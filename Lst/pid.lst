C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Obj\pid.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\pid.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\sr
                    -c\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\
                    -mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measur
                    -e;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\pid.lst) OBJECT(.\Obj\pid.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                               *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : pid.c
    9         * Instance      : 
   10         * Description   : PID control algorithm
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #define PID_GLOBALS
   26         #include "pid.h"
   27         
   28         #include "pwm.h"
   29         #include "adc_sample.h"
   30         #include "booster.h"
   31         #include "FLTD.h"
   32         #include "rte.h"
   33         
   34         
   35         /**** Definition of variables ****/
   36         T_PID tPid = {0};
   37         
   38         
   39         /**** Declaration of functions ****/
   40         static INT16S Pid_CurrentFilter(void);
   41         static INT16S Pid_LimitingAmplitude(INT16S inValue, INT16U thesholdValue);
   42         
   43         /***********************************************************************
   44         *  Name        : Pid_Init
   45         *  Description : After power on, initiliaze booster alogrithm variable
   46         *  Parameter   : None
   47         *  Returns     : None
   48         ***********************************************************************/
   49         void Pid_Init(void)
   50         {
   51  1              memset(&tPid, 0, sizeof(tPid));
   52  1              
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 2   

   53  1              return;
   54  1      }
   55         
   56         /***********************************************************************
   57         *  Name        : Pid_DeInit
   58         *  Description : During running, need initilize booster algorithm variable
   59         *  Parameter   : None
   60         *  Returns     : None
   61         ***********************************************************************/
   62         void Pid_DeInit(void)
   63         {
   64  1              return;
   65  1      }
   66         
   67         /***********************************************************************
   68         *  Name        : Pid_LocationClosedLoopControl
   69         *  Description : Brake main cylinder location closed-loop PID control.
   70         *  Parameter   : object location
   71         *  Returns     : INT16S
   72         ***********************************************************************/
   73         INT16S Pid_LocationClosedLoopControl(INT16U objLocation)
   74         {
   75  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData();
   76  1      
   77  1              INT16U u = 0;
   78  1              INT16S v = 0;
   79  1      
   80  1              /* Set location PID control object value. */
   81  1              tPid.location.ObjectValue = objLocation;
   82  1              tPid.location.actualValue = ptr_adc->mainCylinderLocation1;
   83  1              tPid.location.error = tPid.location.ObjectValue - tPid.location.actualValue;
   84  1              
   85  1              
   86  1              //Add dead zone and limiter to the error
   87  1              if(ABS(tPid.location.error) < 50)
   88  1              {
   89  2                      tPid.location.error = 0;
   90  2              }
   91  1              else if(ABS(tPid.location.error) > 500)
   92  1              {
   93  2                      tPid.location.error = 500 * SIGN(tPid.location.error);
   94  2              }
   95  1              else    
   96  1              {
   97  2                      tPid.location.error = tPid.location.error - 50 * SIGN(tPid.location.error);
   98  2              }
   99  1              
  100  1              
  101  1              /********************************************************************************
  102  1              *  Description        :   Integration with forgetting factor to avoid saturation
  103  1              *  Main Parameter :   forgetting factor = 63/64, i.e. 0.984375
  104  1              *  Measure for overflow :   displacement error limited to 5 mm when added
  105  1              ********************************************************************************/
  106  1              if(tPid.location.integral < 0)
  107  1              {
  108  2                  tPid.location.integral += (32 - tPid.location.integral) >> 6U; // polyspace test by gzz 2020.12.30
  109  2              }
  110  1              else
  111  1              {
  112  2                  u = 32 + tPid.location.integral;
  113  2                  u = (u >> 6);
  114  2                  tPid.location.integral = tPid.location.integral - u;
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 3   

  115  2              }
  116  1              
  117  1              tPid.location.integral = tPid.location.integral + tPid.location.error;
  118  1              tPid.location.integral = Pid_LimitingAmplitude(tPid.location.integral, 30000);
  119  1              
  120  1              /* PID */
  121  1              if(tPid.location.error < 0)
  122  1              {
  123  2                      u = -tPid.location.error;
  124  2                      u = u * (INT32U)gRTE_locationKp / 100;
*** WARNING C192 IN LINE 124 OF src\app\alogrithm\pid.c: '=': value truncated
  125  2                      tPid.location.term_Kp = -u;
*** WARNING C115 IN LINE 125 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
  126  2              }
  127  1              else
  128  1              {
  129  2                      u = tPid.location.error;
  130  2                      tPid.location.term_Kp = u * (INT32U)gRTE_locationKp / 100;
*** WARNING C192 IN LINE 130 OF src\app\alogrithm\pid.c: '=': value truncated
  131  2              }
  132  1              
  133  1      
  134  1              if(tPid.location.integral < 0)
  135  1              {
  136  2                  u = -tPid.location.integral;
  137  2                  u = u * (INT32U)gRTE_locationKi / 100;
*** WARNING C192 IN LINE 137 OF src\app\alogrithm\pid.c: '=': value truncated
  138  2                  tPid.location.term_Ki = -u;
*** WARNING C115 IN LINE 138 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
  139  2              }
  140  1              else
  141  1              {
  142  2                  u = tPid.location.integral;
  143  2                  u = u * (INT32U)gRTE_locationKi / 100;
*** WARNING C192 IN LINE 143 OF src\app\alogrithm\pid.c: '=': value truncated
  144  2                  tPid.location.term_Ki = u;
  145  2              }
  146  1              
  147  1              v = tPid.location.error - tPid.location.errorPre;
  148  1              if(v < 0)
  149  1              {
  150  2                  u = -v;
  151  2                  u = u * (INT32U)gRTE_locationKd / 100;
*** WARNING C192 IN LINE 151 OF src\app\alogrithm\pid.c: '=': value truncated
  152  2                  tPid.location.term_Kd = -u;
*** WARNING C115 IN LINE 152 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
  153  2              }
  154  1              else
  155  1              {
  156  2                  tPid.location.term_Kd = v * (INT32U)gRTE_locationKd / 100;
*** WARNING C192 IN LINE 156 OF src\app\alogrithm\pid.c: '=': value truncated
  157  2              }
  158  1      
  159  1              /* PID term limit amplitude */
  160  1              tPid.location.term_Kp = Pid_LimitingAmplitude(tPid.location.term_Kp, 3000u);
  161  1              tPid.location.term_Ki = Pid_LimitingAmplitude(tPid.location.term_Ki, 3000u);
  162  1              tPid.location.term_Kd = Pid_LimitingAmplitude(tPid.location.term_Kd, 500u);
  163  1      
  164  1              
  165  1              /* Update diviation value. */   
  166  1              tPid.location.errorPre = tPid.location.error;
  167  1              tPid.location.incrementValue = tPid.location.term_Kp + tPid.location.term_Ki + tPid.location.term_Kd;
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 4   

  168  1              tPid.location.incrementValue = Pid_LimitingAmplitude(tPid.location.incrementValue, 4000u);
  169  1              
  170  1              return (tPid.location.incrementValue);
  171  1      }
  172         
  173         /***********************************************************************
  174         *  Name        : Pid_CurrentClosedLoopControl
  175         *  Description : Brake motor current closed-loop PID control.
  176         *  Parameter   : object current
  177         *  Returns     : None
  178         ***********************************************************************/
  179         INT16S Pid_CurrentClosedLoopControl(INT16S objCurrent)
  180         {
  181  1              INT32U u = 0;
  182  1              INT16S delta_error = 0;
  183  1      
  184  1              static INT16S current_error[7] = {0};
  185  1                              
  186  1              tPid.current.ObjectValue = objCurrent;                  
  187  1              tPid.current.actualValue = Pid_CurrentFilter();         
  188  1              tPid.current.error = tPid.current.ObjectValue - tPid.current.actualValue;
  189  1              
  190  1        /* Add a dead zoon to reduce current vibrate. */ 
  191  1              if(ABS(tPid.current.error) <= 100)
  192  1              {
  193  2                      tPid.current.error = 0;
  194  2              }
  195  1              else if(ABS(tPid.current.error) > 2000)
  196  1              {
  197  2                      tPid.current.error = 2000 * SIGN(tPid.current.error);
  198  2              }
  199  1              else
  200  1              {
  201  2                      tPid.current.error = tPid.current.error - 100 * SIGN(tPid.current.error);
  202  2              }
  203  1      
  204  1              /* Integral term  damping process,damping factor mean 63/64 = 0.984; */         
  205  1              if(tPid.current.integral < 0)
  206  1              {
  207  2                      tPid.current.integral += (-tPid.current.integral) >> 6U; // polyspace test by gzz 2020.12.30
  208  2              }
  209  1              else
  210  1              {
  211  2                      u = tPid.current.integral;
  212  2                      u = (u >> 6);
  213  2                      tPid.current.integral = tPid.current.integral - u;
*** WARNING C192 IN LINE 213 OF src\app\alogrithm\pid.c: '=': value truncated
  214  2              }
  215  1              
  216  1              tPid.current.integral = tPid.current.integral + tPid.current.error;
  217  1              tPid.current.integral = Pid_LimitingAmplitude(tPid.current.integral, 30000);
  218  1              
  219  1              /* Set KP  KI  KD */
  220  1              
  221  1              /* KP Factor  */
  222  1      
  223  1              if(tPid.current.error < 0)
  224  1              {
  225  2                      u = - tPid.current.error;
  226  2                      u = u * gRTE_currentKp / 100;
  227  2                      tPid.current.term_Kp = -u;
*** WARNING C115 IN LINE 227 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 5   

*** WARNING C192 IN LINE 227 OF src\app\alogrithm\pid.c: '=': value truncated
  228  2              }
  229  1              else
  230  1              {
  231  2                      u = tPid.current.error;         
  232  2                      u = u * gRTE_currentKp / 100;
  233  2                      tPid.current.term_Kp = u ;
*** WARNING C192 IN LINE 233 OF src\app\alogrithm\pid.c: '=': value truncated
  234  2              }
  235  1              
  236  1      
  237  1              /* KI Factor  */
  238  1              if(tPid.current.integral < 0)
  239  1              {
  240  2                      u = - tPid.current.integral;
  241  2                      u = u * gRTE_currentKi / 100;
  242  2                      tPid.current.term_Ki = -u;          
*** WARNING C115 IN LINE 242 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
*** WARNING C192 IN LINE 242 OF src\app\alogrithm\pid.c: '=': value truncated
  243  2              }
  244  1              else
  245  1              {
  246  2                      u = tPid.current.integral;
  247  2                      u = u * gRTE_currentKi / 100;
  248  2                      tPid.current.term_Ki  = u;    
*** WARNING C192 IN LINE 248 OF src\app\alogrithm\pid.c: '=': value truncated
  249  2              }
  250  1              
  251  1              
  252  1              /* KD Factor  */
  253  1              /*==========================================================================
  254  1               * Estimated y_dot = (-7y1 - 5y2 -3y3 - y4 + y5 + 3y6 + 5y7 + 7y8) / (84 Ts)
  255  1               *==========================================================================*/
  256  1              delta_error = 7 * (tPid.current.error - current_error[0]) + 5 * (current_error[6] - current_error[1])
  257  1                            + 3 * (current_error[5] - current_error[2]) + (current_error[4] - current_error[3]);
  258  1              /* Update diviation value. */       
  259  1              current_error[0] = current_error[1];
  260  1              current_error[1] = current_error[2];
  261  1              current_error[2] = current_error[3];
  262  1              current_error[3] = current_error[4];
  263  1              current_error[4] = current_error[5];
  264  1              current_error[5] = current_error[6];
  265  1              current_error[6] = tPid.current.error;
  266  1                      
  267  1              if(delta_error < 0)
  268  1              {
  269  2                      u = -delta_error;
  270  2                      u = u * gRTE_currentKd / 100;
  271  2                      tPid.current.term_Kd = - u;
*** WARNING C115 IN LINE 271 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
*** WARNING C192 IN LINE 271 OF src\app\alogrithm\pid.c: '=': value truncated
  272  2              }
  273  1              else
  274  1              {
  275  2                      u = delta_error;
  276  2                      u = u * gRTE_currentKd / 100;
  277  2                      tPid.current.term_Kd = u;
*** WARNING C192 IN LINE 277 OF src\app\alogrithm\pid.c: '=': value truncated
  278  2              }
  279  1      
  280  1              
  281  1              /* PID term limit amplitude */
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 6   

  282  1              tPid.current.term_Kp = Pid_LimitingAmplitude(tPid.current.term_Kp, 1600u);
  283  1              tPid.current.term_Ki = Pid_LimitingAmplitude(tPid.current.term_Ki, 1200u);
  284  1              tPid.current.term_Kd = Pid_LimitingAmplitude(tPid.current.term_Kd, 300u);
  285  1              
  286  1              tPid.current.incrementValue = tPid.current.term_Kp + tPid.current.term_Ki + tPid.current.term_Kd;
  287  1              tPid.current.incrementValue = Pid_LimitingAmplitude(tPid.current.incrementValue, MAXIMUM_OUTPUT_THRESHOLD
             -);
  288  1      
  289  1              /* PWM output. */
  290  1              return tPid.current.incrementValue;
  291  1      }
  292         
  293         
  294         
  295         /***********************************************************************
  296         *  Name        : Pid_OnlyLocationClosedLoopControl
  297         *  Description : Brake main cylinder location closed-loop PID control.
  298         *  Parameter   : object location
  299         *  Returns     : None
  300         ***********************************************************************/
  301         INT16S Pid_OnlyLocationClosedLoopControl(INT16U objLocation)
  302         {
  303  1              INT16U u = 0;
  304  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData();
  305  1              
  306  1              /* Set location PID control object value. */
  307  1              tPid.onlyLocation.ObjectValue = objLocation ;
  308  1              tPid.onlyLocation.actualValue = ptr_adc->mainCylinderLocation1;
  309  1              tPid.onlyLocation.error = tPid.onlyLocation.ObjectValue - tPid.onlyLocation.actualValue;
  310  1              
  311  1              /*------------Integral term damping process,damping factor = 63/64--------*/
  312  1              /*----Customary Integral damping factor is 0.994,when objLocation >=1mm---*/
  313  1              /*--------------damping factor is 0.95,when objLocation == 1mm------------*/
  314  1              
  315  1              if(tPid.onlyLocation.integral < 0)
  316  1              {
  317  2                      tPid.onlyLocation.integral += (-tPid.onlyLocation.integral) >> 6U; // polyspace test by gzz 2020.12.30
  318  2              }
  319  1              else
  320  1              {
  321  2                      u = tPid.onlyLocation.integral;
  322  2                      u = (u >> 6);
  323  2                      tPid.onlyLocation.integral = tPid.onlyLocation.integral - u;
  324  2              }
  325  1              
  326  1              tPid.onlyLocation.integral = tPid.onlyLocation.integral + tPid.onlyLocation.error;
  327  1              tPid.onlyLocation.integral = Pid_LimitingAmplitude(tPid.onlyLocation.integral, 30000);
  328  1              
  329  1              
  330  1              /* Set KP  KI  KD */
  331  1              
  332  1              /* KP Factor  */
  333  1              if(tPid.onlyLocation.error < 0)
  334  1              {
  335  2                      u = - tPid.onlyLocation.error;
  336  2                      u = u * (INT32U)gRTE_onlyPositionKp / 100;
*** WARNING C192 IN LINE 336 OF src\app\alogrithm\pid.c: '=': value truncated
  337  2                      tPid.onlyLocation.term_Kp = -u;
*** WARNING C115 IN LINE 337 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
  338  2              }
  339  1              else
  340  1              {
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 7   

  341  2                      u = tPid.onlyLocation.error;    
  342  2                      u = u * (INT32U)gRTE_onlyPositionKp / 100;
*** WARNING C192 IN LINE 342 OF src\app\alogrithm\pid.c: '=': value truncated
  343  2                      tPid.onlyLocation.term_Kp = u ;
  344  2              }
  345  1              
  346  1              /* KI Factor  */
  347  1              if(tPid.onlyLocation.integral < 0)
  348  1              {
  349  2                      u = - tPid.onlyLocation.integral;
  350  2                      u = u * (INT32U)gRTE_onlyPositionKi / 100;
*** WARNING C192 IN LINE 350 OF src\app\alogrithm\pid.c: '=': value truncated
  351  2                      tPid.onlyLocation.term_Ki = -u;          
*** WARNING C115 IN LINE 351 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
  352  2              }
  353  1              else
  354  1              {
  355  2                      u = tPid.onlyLocation.integral;
  356  2                      u = u * (INT32U)gRTE_onlyPositionKi / 100;
*** WARNING C192 IN LINE 356 OF src\app\alogrithm\pid.c: '=': value truncated
  357  2                      tPid.onlyLocation.term_Ki = u;    
  358  2              }
  359  1              
  360  1              /* PID term limit amplitude */
  361  1              tPid.onlyLocation.term_Kp = Pid_LimitingAmplitude(tPid.onlyLocation.term_Kp, 1600u);
  362  1              tPid.onlyLocation.term_Ki = Pid_LimitingAmplitude(tPid.onlyLocation.term_Ki, 1200u);
  363  1              tPid.onlyLocation.term_Kd = Pid_LimitingAmplitude(tPid.onlyLocation.term_Kd, 300u);
  364  1              
  365  1              /* Update diviation value. */   
  366  1              tPid.onlyLocation.errorPre = tPid.onlyLocation.error;
  367  1              tPid.onlyLocation.incrementValue = tPid.onlyLocation.term_Kp + tPid.onlyLocation.term_Ki + tPid.onlyLocat
             -ion.term_Kd;
  368  1              tPid.onlyLocation.incrementValue = Pid_LimitingAmplitude(tPid.onlyLocation.incrementValue, MAXIMUM_OUTPUT
             -_THRESHOLD);
  369  1      
  370  1              Pwm_Control(tPid.onlyLocation.incrementValue);
  371  1              
  372  1              return tPid.onlyLocation.incrementValue;
  373  1      }
  374         
  375         /***********************************************************************
  376         *  Name        : Pid_PressureClosedLoopControl
  377         *  Description : Brake main cylinder pressure closed-loop PID control.
  378         *  Parameter   : object pressure
  379         *  Returns     : None
  380         ***********************************************************************/
  381         INT16S Pid_PressureClosedLoopControl(INT16U objPressure)
  382         {
  383  1              INT16U u = 0;
  384  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData();
  385  1      
  386  1              /* Set pressure PID control object value. */
  387  1              tPid.pressure.ObjectValue = objPressure / 100;
  388  1      #if 0
                      tPid.pressure.actualValue = ptr_adc->mainCylinderPressure / 100;
              #else
  391  1              tPid.pressure.actualValue = g_wireControlActualPressure;
  392  1      #endif
  393  1              tPid.pressure.error = tPid.pressure.ObjectValue - tPid.pressure.actualValue;
  394  1              tPid.pressure.error = Pid_LimitingAmplitude(tPid.pressure.error, 20);
  395  1              
  396  1              /* Residual pressure judgment */
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 8   

  397  1              if(tPid.pressure.error <= -4)
  398  1              {
  399  2                      residualPressureReleaseTimeCnt = 0;
  400  2                      
  401  2                      if(residualPressureTimeCnt > 1000)
  402  2                      {
  403  3                              g_residualPressureFlag = TRUE;
  404  3                      }
  405  2                      else
  406  2                      {
  407  3                              residualPressureTimeCnt++;
  408  3                      }
  409  2              }
  410  1              else if(tPid.pressure.error > 0)
  411  1              {
  412  2                      residualPressureTimeCnt = 0;
  413  2                      
  414  2                      if(residualPressureReleaseTimeCnt > 200)
  415  2                      {
  416  3                              g_residualPressureFlag = FALSE;
  417  3                      }
  418  2                      else
  419  2                      {
  420  3                              residualPressureReleaseTimeCnt++;
  421  3                      }
  422  2              }
  423  1              
  424  1              if(ABS(tPid.pressure.error) >= 6)
  425  1              {
  426  2                      g_pressureErrorNormalTimeCnt = 0;
  427  2                      
  428  2                      if(g_pressureErrorLargeTimeCnt > 1000)
  429  2                      {
  430  3                              g_pressureErrorLargeFlag = TRUE;
  431  3                      }
  432  2                      else
  433  2                      {
  434  3                              g_pressureErrorLargeTimeCnt++;
  435  3                      }
  436  2              }
  437  1              else
  438  1              {
  439  2                      g_pressureErrorLargeTimeCnt = 0;
  440  2                      
  441  2                      if(g_pressureErrorNormalTimeCnt > 1000)
  442  2                      {
  443  3                              g_pressureErrorLargeFlag = FALSE;
  444  3                      }
  445  2                      else
  446  2                      {
  447  3                              g_pressureErrorNormalTimeCnt++;
  448  3                      }
  449  2              }
  450  1              
  451  1              /* Determine whether it is oscillating */
  452  1              if((tPid.pressure.error < 0) && (tPid.pressure.errorPre > 0))
  453  1              {
  454  2                      stabiliseTimeCnt = 0;
  455  2                      if(g_topEdgeCnt < 65535)
  456  2                      {
  457  3                              g_topEdgeCnt++;
  458  3                      }
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 9   

  459  2              }
  460  1              else if((tPid.pressure.error > 0) && (tPid.pressure.errorPre < 0))
  461  1              {
  462  2                      stabiliseTimeCnt = 0;
  463  2                      if(g_bottomEdgeCnt < 65535)
  464  2                      {
  465  3                              g_bottomEdgeCnt++;
  466  3                      }
  467  2              }
  468  1              else
  469  1              {
  470  2                      if(stabiliseTimeCnt > 1000)
  471  2                      {
  472  3                              g_topEdgeCnt = 0;
  473  3                              g_bottomEdgeCnt = 0;
  474  3                              g_systemAbnormalFlag = FALSE;
  475  3                      }
  476  2                      else
  477  2                      {
  478  3                              stabiliseTimeCnt++;
  479  3                      }
  480  2              }
  481  1                      
  482  1              
  483  1              /*------------Integral term damping process,damping factor = 127/128--------*/
  484  1              /*----Customary Integral damping factor is 0.994,when objLocation >=1mm---*/
  485  1              /*--------------damping factor is 0.95,when objLocation == 1mm------------*/
  486  1              
  487  1              if(tPid.pressure.integral < 0)
  488  1              {
  489  2                      //  mean: u = -63/64 * tPid.pressure.integral;
  490  2                      tPid.pressure.integral += (-tPid.pressure.integral) >> 7U; // polyspace test by gzz 2020.12.30
  491  2              }
  492  1              else
  493  1              {
  494  2                      u = tPid.pressure.integral;
  495  2                      u = (u >> 7);
  496  2                      tPid.pressure.integral = tPid.pressure.integral - u;
  497  2              }       
  498  1              
  499  1              tPid.pressure.integral = tPid.pressure.integral + tPid.pressure.error;
  500  1              tPid.pressure.integral = Pid_LimitingAmplitude(tPid.pressure.integral, 25000);
  501  1              
  502  1              /* Set KP  KI  KD */
  503  1              
  504  1              /* KP Factor  */
  505  1              
  506  1              if(tPid.pressure.error < 0)
  507  1              {
  508  2                      u = - tPid.pressure.error;
  509  2                      u = u * (INT32U)gRTE_pressureKp / 100;          
*** WARNING C192 IN LINE 509 OF src\app\alogrithm\pid.c: '=': value truncated
  510  2                      tPid.pressure.term_Kp = -u;
*** WARNING C115 IN LINE 510 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
  511  2              }
  512  1              else
  513  1              {
  514  2                      u = tPid.pressure.error;
  515  2                      u = u * (INT32U)gRTE_pressureKp / 100;
*** WARNING C192 IN LINE 515 OF src\app\alogrithm\pid.c: '=': value truncated
  516  2                      tPid.pressure.term_Kp = u ;
  517  2              }
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 10  

  518  1      
  519  1              /* KI Factor  */
  520  1              if(tPid.pressure.integral < 0)
  521  1              {
  522  2                      u = - tPid.pressure.integral;
  523  2                      u = u * (INT32U)gRTE_pressureKi / 100;
*** WARNING C192 IN LINE 523 OF src\app\alogrithm\pid.c: '=': value truncated
  524  2                      tPid.pressure.term_Ki = -u;          
*** WARNING C115 IN LINE 524 OF src\app\alogrithm\pid.c: '-' applied to unsigned type, result still unsigned
  525  2              }
  526  1              else
  527  1              {
  528  2                      u = tPid.pressure.integral;
  529  2                      u = u * (INT32U)gRTE_pressureKi / 100;
*** WARNING C192 IN LINE 529 OF src\app\alogrithm\pid.c: '=': value truncated
  530  2                      tPid.pressure.term_Ki = u;    
  531  2              }
  532  1              
  533  1              
  534  1              /* PID term limit amplitude */
  535  1              tPid.pressure.term_Kp = Pid_LimitingAmplitude(tPid.pressure.term_Kp, 1600); // updated 20210108 pm; 1600u
             - -> 1000u
  536  1              tPid.pressure.term_Ki = Pid_LimitingAmplitude(tPid.pressure.term_Ki, 1400); // updated 20210108 pm; 1200u
             - -> 800u
  537  1              tPid.pressure.term_Kd = Pid_LimitingAmplitude(tPid.pressure.term_Kd, 300u);
  538  1              
  539  1              /* Update diviation value. */   
  540  1              tPid.pressure.errorPre = tPid.pressure.error;
  541  1              tPid.pressure.incrementValue = tPid.pressure.term_Kp + tPid.pressure.term_Ki + tPid.pressure.term_Kd;
  542  1              tPid.pressure.incrementValue = Pid_LimitingAmplitude(tPid.pressure.incrementValue, MAXIMUM_OUTPUT_THRESHO
             -LD);
  543  1                      
  544  1              Pwm_Control(tPid.pressure.incrementValue);
  545  1              return tPid.pressure.incrementValue;
  546  1      }
  547         
  548         /***********************************************************************
  549         *  Name        : Pid_CurrentFilter
  550         *  Description : Current sampling filter in current closed-loop control.
  551         *  Parameter   : None
  552         *  Returns     : None
  553         ***********************************************************************/
  554         static INT16S Pid_CurrentFilter(void)
  555         {
  556  1              INT8U currentIndex = 0;
  557  1              INT32S currentFilterArraySum = 0;
  558  1              
  559  1              static INT16S currentFilterArray[8] = {0};
  560  1              static INT16S currentFilterAverage = 0;
  561  1              const T_ADC_APP *ptr_adcApp = AdcApp_SampleData();      
  562  1                      
  563  1              for(currentIndex = 0; currentIndex < 7; currentIndex++)
  564  1              {
  565  2                      currentFilterArray[currentIndex] = currentFilterArray[currentIndex + 1];
  566  2                      currentFilterArraySum = currentFilterArraySum + currentFilterArray[currentIndex];
  567  2              }
  568  1      
  569  1              if(ptr_adcApp->brakeMotorCurrent > currentFilterArray[7] + 50)
  570  1              {
  571  2                      currentFilterArray[7] = currentFilterArray[7] + 50;
  572  2              }
  573  1              else if(ptr_adcApp->brakeMotorCurrent < currentFilterArray[7] - 50)
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 11  

  574  1              {
  575  2                      currentFilterArray[7] = currentFilterArray[7] - 50;
  576  2              }
  577  1              else
  578  1              {
  579  2                      currentFilterArray[7] = ptr_adcApp->brakeMotorCurrent;
  580  2              }
  581  1      
  582  1              currentFilterArraySum = currentFilterArraySum + currentFilterArray[7];
  583  1              currentFilterAverage = (INT16S)(currentFilterArraySum / 8);     
  584  1      
  585  1              return currentFilterAverage;
  586  1      }
  587         
  588         
  589         /***********************************************************************
  590         *  Name        : Pid_LimitingAmplitude
  591         *  Description : Limiting output value amplitude
  592         *  Parameter   : inValue
  593         *  Returns     : OutValue
  594         ***********************************************************************/
  595         static INT16S Pid_LimitingAmplitude(INT16S inValue, INT16U thresholdValue)
  596         {
  597  1              INT16S outValue;
  598  1      
  599  1              if (abs(inValue) > thresholdValue)
  600  1              {
  601  2                      outValue = thresholdValue * SIGN(inValue);
  602  2              }
  603  1              else
  604  1              {
  605  2                      outValue = inValue;
  606  2              }
  607  1              
  608  1              return outValue;
  609  1      }
  610         
  611         
  612         
  613         /***********************************************************************
  614         *  Name        : Pid_AlogrithmData
  615         *  Description : PID control alogrithm data
  616         *  Parameter   : None
  617         *  Returns     : PID control alogrithm data structure access address
  618         ***********************************************************************/
  619         T_PID* Pid_AlogrithmData(void)
  620         {
  621  1              return (&tPid);
  622  1      }       
  623         
  624         /* _END_OF_PID_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        3058     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           2     --------
  FAR-DATA SIZE    =         102     --------
  XHUGE-DATA SIZE  =    --------     --------
C166 COMPILER V7.57.0, PID                                                                 01/20/2021 09:50:44 PAGE 12  

  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =         126     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  31 WARNING(S),  0 ERROR(S)
