C166 COMPILER V7.57.0, PWM                                                                 01/20/2021 09:50:51 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Obj\pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\interaction\pwm.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\src\
                    -driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\mo
                    -de control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measure;
                    -.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\pwm.lst) OBJECT(.\Obj\pwm.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                                   * 
    3         *               All Rights Reserved.                                                                       *
    4         *   Department : iCAS SW                                                                                               *
    5         *   AUTHOR         :                                                                                                                   *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : pwm.c
    9         * Instance      : 
   10         * Description   : pwm output
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1          Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "pwm.h"
   26         #include "pid.h"
   27         #include "rte.h"
   28         #include "booster.h"
   29         #include "FLTD.h"
   30         
   31         /**** Definition of variables ****/
   32         static T_PWM tPwm = {0u};
   33         
   34         /**** Declaration of functions ****/
   35         static void Pwm_OutputLimit(INT16S pwmValue);
   36         static void Pwm_ControlOutput(void);
   37         static void Pwm_pwmOutFilter(INT16S* pwmInputValue);
   38         
   39         /***********************************************************************
   40         *  Name        : Pwm_Init
   41         *  Description : After power on, initiliaze PWM sample variable
   42         *  Parameter   : None
   43         *  Returns     : None
   44         ***********************************************************************/
   45         void Pwm_Init(void)
   46         {
   47  1              tPwm.motorCtrl = PWM_AMPLITUDE_DEFAULT;
   48  1              tPwm.channelDutyA = 1000u;
   49  1              tPwm.channelDutyB = 1000u;
   50  1              return;
   51  1      }
   52         
C166 COMPILER V7.57.0, PWM                                                                 01/20/2021 09:50:51 PAGE 2   

   53         /***********************************************************************
   54         *  Name        : Pwm_DeInit
   55         *  Description : During running, need initilize PWM sample variable
   56         *  Parameter   : None
   57         *  Returns     : None
   58         ***********************************************************************/
   59         void Pwm_DeInit(void)
   60         {
   61  1              return;
   62  1      }
   63         
   64         /***********************************************************************
   65         *  Name        : Pwm_Control
   66         *  Description : PWM control function
   67         *  Parameter   : pwm control value
   68         *  Returns     : None
   69         ***********************************************************************/
   70         void Pwm_Control(INT16S pwmValue)
   71         {
   72  1              Pwm_OutputLimit(pwmValue);
   73  1              Pwm_ControlOutput();
   74  1              return;
   75  1      }
   76         
   77         
   78         /***********************************************************************
   79         *  Name        : Pwm_OutputLimit
   80         *  Description : PWM amolitude limiting processing
   81         *  Parameter   : None
   82         *  Returns     : None
   83         ***********************************************************************/
   84         static void Pwm_OutputLimit(INT16S pwmValue)
   85         {
   86  1              INT16S motorDuty = PWM_AMPLITUDE_DEFAULT; 
   87  1              
   88  1              const T_BOOSTER* ptr_Booster = Booster_AlogrithmData();
   89  1              const FLTD_faultActType* FLTDAct_ptr = FLTD_FltActFlgData();
   90  1              T_PID* ptr_Pid = Pid_AlogrithmData();
   91  1      
   92  1      #if 1
   93  1              if((TRUE != g_pvTestFlag)
   94  1                      && (((BoosterBrakeMode == BrakeSysMode) 
   95  1                              && (ptr_Booster->pedalRate <= 0) 
   96  1                              && (ptr_Booster->brakePedalLocation < 100) 
   97  1                              && (TRUE != FLTDAct_ptr->fixedDecelerationFlg) 
   98  1                              && (ptr_Booster->mainCylinderLocation <= 200) 
   99  1                              && (ptr_Booster->cylinderRate <= 0))
  100  1                      || ((WireCtrlBrakeMode == BrakeSysMode) 
  101  1                              && (FALSE == g_cylinderExhaustEnFlag)
  102  1                              && ((TRUE == g_brakeReleaseFlag) || ((0 == g_wireControlObjPressure) && (g_wireControlActualPressure < 
             -4)))))
  103  1              )
  104  1              {
  105  2                      motorDuty = PWM_AMPLITUDE_DEFAULT;
  106  2      
  107  2                      ptr_Pid->current.integral = 0;  
  108  2                      ptr_Pid->onlyLocation.integral = 0;             
  109  2                      ptr_Pid->pressure.integral = 0;         
  110  2              }
  111  1              else
  112  1      #endif
  113  1              {
C166 COMPILER V7.57.0, PWM                                                                 01/20/2021 09:50:51 PAGE 3   

  114  2                      Pwm_pwmOutFilter(&pwmValue);
  115  2                      
  116  2                      if (abs(pwmValue) <= 10)
  117  2                      {
  118  3                              motorDuty = PWM_AMPLITUDE_DEFAULT;
  119  3                      }
  120  2                      else
  121  2                      {
  122  3                              motorDuty = pwmValue + PWM_AMPLITUDE_DEFAULT;
  123  3      
  124  3                              if (motorDuty <= PWM_AMPLITUDE_LOWER)
  125  3                              {
  126  4                                      motorDuty = PWM_AMPLITUDE_LOWER;
  127  4                              }
  128  3                              else if (motorDuty >= PWM_AMPLITUDE_UPPER)
  129  3                              {
  130  4                                      motorDuty = PWM_AMPLITUDE_UPPER;
  131  4                              }
  132  3                              else
  133  3                              {
  134  4                                      /* NOP */
  135  4                              }
  136  3                      }
  137  2              }
  138  1              
  139  1              tPwm.motorCtrl = motorDuty;
  140  1      }
  141         
  142         
  143         /***********************************************************************
  144         *  Name        : Pwm_ControlOutput
  145         *  Description : 
  146         *  Parameter   : None
  147         *  Returns     : None
  148         ***********************************************************************/
  149         static void Pwm_ControlOutput(void)
  150         {
  151  1              INT32U temp = 0;
  152  1              
  153  1              temp = ((INT32U)tPwm.motorCtrl * 2000u) >> 12u;
  154  1              
  155  1      #if (0 == HARDWARE_VERSION)
                      tPwm.channelDutyA = (INT16U)temp;
                      tPwm.channelDutyB = 2000u - tPwm.channelDutyA;
              #else
  159  1              tPwm.channelDutyB = (INT16U)temp;
  160  1              tPwm.channelDutyA = 2000u - tPwm.channelDutyB;
  161  1      #endif
  162  1      
  163  1              return;
  164  1      }
  165         
  166         /***********************************************************************
  167         *  Name        : FunctionPWMOutFilter
  168         *  Description : PWM OUT value Filter.
  169         *  Parameter   : NONE
  170         *  Returns     : NONE
  171         ***********************************************************************/
  172         static void Pwm_pwmOutFilter(INT16S* pwmInputValue)
  173         {       
  174  1              INT8U PwmIndex = 0;
  175  1              INT16S PwmFilterArraySum = 0;
C166 COMPILER V7.57.0, PWM                                                                 01/20/2021 09:50:51 PAGE 4   

  176  1              
  177  1              static INT16S PwmFilterArray[8] = {0};
  178  1      
  179  1              PwmFilterArray[0] = PwmFilterArray[1];
  180  1              PwmFilterArray[1] = PwmFilterArray[2];
  181  1              PwmFilterArray[2] = PwmFilterArray[3];
  182  1              PwmFilterArray[3] = PwmFilterArray[4];
  183  1              PwmFilterArray[4] = PwmFilterArray[5];
  184  1              PwmFilterArray[5] = PwmFilterArray[6];  
  185  1              PwmFilterArray[6] = PwmFilterArray[7];
  186  1              PwmFilterArray[7] = *pwmInputValue;     
  187  1                      
  188  1              for(PwmIndex = 0; PwmIndex < 7; PwmIndex++)
  189  1              {
  190  2                      PwmFilterArray[PwmIndex] = PwmFilterArray[PwmIndex + 1];
  191  2                      PwmFilterArraySum = PwmFilterArraySum + PwmFilterArray[PwmIndex];
  192  2              }       
  193  1              PwmFilterArraySum = PwmFilterArraySum + PwmFilterArray[7];
  194  1              
  195  1          *pwmInputValue = PwmFilterArraySum / 8;             
  196  1      }
  197         
  198         /***********************************************************************
  199         *  Name        : Pwm_ControlData
  200         *  Description : PWM module interface
  201         *  Parameter   : None
  202         *  Returns     : PWM data structure access address
  203         ***********************************************************************/
  204         const T_PWM* Pwm_ControlData(void)
  205         {
  206  1              return (&tPwm);
  207  1      }
  208         
  209         /* _END_OF_PWM_IF_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         490     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           6     --------
  FAR-DATA SIZE    =          16     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          32     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
