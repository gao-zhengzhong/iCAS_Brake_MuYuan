C166 COMPILER V7.57.0, WIRE_CONTROL                                                        12/25/2020 20:36:04 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE WIRE_CONTROL
OBJECT MODULE PLACED IN .\Obj\wire_control.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\wire_control.c MODV2 LARGE BROWSE INCDIR(.\src;.\src
                    -\bsw;.\src\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.
                    -\src\app\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\ti
                    -me measure;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\wire_control.lst) OBJECT(.\Obj\wire_control.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                               *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : apa.c
    9         * Instance      : 
   10         * Description   : APA brake algorithm
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         #define WIRE_CONTROL_GLOBALS
   25         #include "wire_control.h"
   26         #include "wireControl_Cfg.h"
   27         #include "adc_sample.h"
   28         #include "rte.h"
   29         #include "pid.h"
   30         #include "booster.h"
   31         #include "pwm.h"
   32         #include "EEPROM_Cfg.h"
   33         #include "eepRom.h"
   34         #include "FLTD.h"
   35         
   36         /**** Definition of variables ****/
   37         static T_WIRE_CONTROL tWireControl = {0};
   38         
   39         
   40         /**** Declaration of functions ****/
   41         
   42         
   43         
   44         /***********************************************************************
   45         *  Name        : WireControl_Init
   46         *  Description : After power on, initiliaze wire control alogrithm variable
   47         *  Parameter   : None
   48         *  Returns     : None
   49         ***********************************************************************/
   50         void WireControl_Init(void)
   51         {
   52  1              memset(&tWireControl, 0, sizeof(tWireControl));
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        12/25/2020 20:36:04 PAGE 2   

   53  1              
   54  1              tWireControl.cylinderToPressureArrayLength = sizeof(cylinder_To_pressure[0]) / sizeof(INT16U);
   55  1              tWireControl.pressureToCylinderArrayLength = sizeof(pressure_To_cylinder[0]) / sizeof(INT16U);
   56  1              tWireControl.currentToPressureArrayLength = sizeof(current_To_pressure[0]) / sizeof(INT16U);
   57  1              tWireControl.pressureToCurrentArrayLength = sizeof(pressure_To_current[0]) / sizeof(INT16U);
   58  1      }
   59         
   60         /***********************************************************************
   61         *  Name        : WireControl_DeInit
   62         *  Description : During running, need initilize wire control algorithm variable
   63         *  Parameter   : None
   64         *  Returns     : None
   65         ***********************************************************************/
   66         void WireControl_DeInit(void)
   67         {
   68  1              memset(&tWireControl, 0, sizeof(tWireControl));
   69  1      }
   70         
   71         /***********************************************************************
   72         *  Name        : WireControl_Algorithm
   73         *  Description : Wire brake control algorithm
   74         *  Parameter   : None
   75         *  Returns     : None
   76         ***********************************************************************/
   77         void WireControl_Algorithm(void)
   78         {
   79  1              static INT16U ProCounter = 0;
   80  1              static INT8U increaseFlag = FALSE;
   81  1      
   82  1              // ObjPressure get; // 20200906
   83  1              if((TRUE == g_wireControlEnFlag) || (TRUE == g_cylinderExhaustEnFlag))
   84  1              {
   85  2                      if(g_wireControlObjPressure >= 60)      // pressure decreasing protect: motor life
   86  2                      {               
   87  3                              ProCounter++;                           
   88  3                              if(ProCounter > 4000)
   89  3                              {
   90  4                                      ProCounter = 4000;                                      
   91  4                                      /* The request pressure is over 6MPa and over 12s */
   92  4                                      if(FALSE == increaseFlag)
   93  4                                      {
   94  5                                              increaseFlag = TRUE;
   95  5                                              g_longTimeBrakeCnt++;
   96  5                                              CopyString_v_g(&g_longTimeBrakeCnt, LONG_TIME_BRAKE_ADDRESS, LONG_TIME_BRAKE_LENGTH, 1);
   97  5                                      }
   98  4                              }
   99  3                      }
  100  2                      else if(g_wireControlObjPressure <= 55)
  101  2                      {
  102  3                              increaseFlag = FALSE;
  103  3                              ProCounter = 0;
  104  3                      }
  105  2                      else
  106  2                      {
  107  3                              ProCounter++;
  108  3                              if(ProCounter > 4000)
  109  3                              {       
  110  4                                      ProCounter = 4000;      
  111  4                              }
  112  3                      }
  113  2              }
  114  1              else
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        12/25/2020 20:36:04 PAGE 3   

  115  1              {
  116  2                      increaseFlag = FALSE;
  117  2                      ProCounter = 0;
  118  2                      tWireControl.cylinderObjPressure = 0;
  119  2              }
  120  1      
  121  1              tWireControl.cylinderObjPressure = (INT16U)g_wireControlObjPressure * 100; //0.1MPa->1KPa
  122  1              // ObjPrs maximum limit
  123  1              if(tWireControl.cylinderObjPressure > 10000)
  124  1              {       
  125  2                      tWireControl.cylinderObjPressure = 10000;       
  126  2              }
  127  1      
  128  1      }
  129         
  130         
  131         /***********************************************************************
  132         *  Name        : WireControl_PressureToCylinder
  133         *  Description : Pressure to CAN date, transform objcylinder
  134         *  Parameter   : None
  135         *  Returns     : None
  136         ***********************************************************************/
  137         INT16U WireControl_PressureToCylinder(INT16U objPrs)
  138         {
  139  1              INT16U objCylinderLocation = 0;
  140  1      
  141  1              objCylinderLocation = lookupTable_1D(objPrs, pressure_To_cylinder[0], pressure_To_cylinder[1], tWireContr
             -ol.pressureToCylinderArrayLength - 1);
  142  1              
  143  1              return objCylinderLocation;
  144  1      
  145  1      }
  146         
  147         /***********************************************************************
  148         *  Name        : WireControl_PressureToCurrent
  149         *  Description : Pressure to CAN date, transform objcurrent
  150         *  Parameter   : None
  151         *  Returns     : None
  152         ***********************************************************************/
  153         INT16S WireControl_PressureToCurrent(INT16U objPrs)
  154         {
  155  1              INT16U objCurrent = 0;
  156  1      
  157  1              objCurrent = lookupTable_1D(objPrs, pressure_To_current[0], pressure_To_current[1], tWireControl.pressure
             -ToCurrentArrayLength - 1);
  158  1      
  159  1              return (INT16S)objCurrent;
  160  1      }
  161         
  162         /***********************************************************************
  163         *  Name        : WireControl_CylinderToPressure
  164         *  Description : Pressure to CAN date, transform objcylinder
  165         *  Parameter   : None
  166         *  Returns     : None
  167         ***********************************************************************/
  168         void WireControl_CylinderToPressure(void)
  169         {       
  170  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData(); 
  171  1      
  172  1              INT16U cylinderPressure = 0;
  173  1      
  174  1              cylinderPressure = lookupTable_1D(ptr_adc->mainCylinderLocation1, cylinder_To_pressure[0], cylinder_To_pr
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        12/25/2020 20:36:04 PAGE 4   

             -essure[1], tWireControl.cylinderToPressureArrayLength - 1);
  175  1      
  176  1              CylinderToPressure = cylinderPressure / 100;
  177  1      }
  178         
  179         /***********************************************************************
  180         *  Name        : WireControl_CylinderToPressure
  181         *  Description : Pressure to CAN date, transform objcylinder
  182         *  Parameter   : None
  183         *  Returns     : None
  184         ***********************************************************************/
  185         void WireControl_CurrentToPressure(void)
  186         {       
  187  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData(); 
  188  1      
  189  1              INT16U cylinderPressure = 0;
  190  1              INT16U tempMotorCurrent = 0;
  191  1              if(ptr_adc->brakeMotorCurrent <= 0)
  192  1              {
  193  2                      tempMotorCurrent = 0;
  194  2              }
  195  1              else
  196  1              {
  197  2                      tempMotorCurrent = ptr_adc->brakeMotorCurrent;
  198  2              }
  199  1      
  200  1              cylinderPressure = lookupTable_1D(tempMotorCurrent, current_To_pressure[0], current_To_pressure[1], tWire
             -Control.currentToPressureArrayLength - 1);
  201  1      
  202  1              CylinderToPressure = cylinderPressure / 100;
  203  1      }
  204         
  205         
  206         /***********************************************************************
  207         *  Name        : WireControl_AlogrithmData
  208         *  Description : Wire Control brake control alogrithm data
  209         *  Parameter   : None
  210         *  Returns     : APA brake control alogrithm data structure access address
  211         ***********************************************************************/
  212         const T_WIRE_CONTROL* WireControl_AlogrithmData(void)
  213         {
  214  1              return (&tWireControl);
  215  1      }       
  216         
  217         /* _END_OF_WIRE_CONTROL_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         522     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           3     --------
  FAR-DATA SIZE    =         124     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =         166     --------
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        12/25/2020 20:36:04 PAGE 5   

END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
