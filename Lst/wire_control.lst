C166 COMPILER V7.57.0, WIRE_CONTROL                                                        01/20/2021 09:50:45 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE WIRE_CONTROL
OBJECT MODULE PLACED IN .\Obj\wire_control.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\wire_control.c MODV2 LARGE BROWSE INCDIR(.\src;.\src
                    -\bsw;.\src\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.
                    -\src\app\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\ti
                    -me measure;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\wire_control.lst) OBJECT(.\Obj\wire_control.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                               *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : apa.c
    9         * Instance      : 
   10         * Description   : APA brake algorithm
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         #define WIRE_CONTROL_GLOBALS
   25         #include "wire_control.h"
   26         #include "wireControl_Cfg.h"
   27         #include "adc_sample.h"
   28         #include "rte.h"
   29         #include "pid.h"
   30         #include "booster.h"
   31         #include "pwm.h"
   32         #include "EEPROM_Cfg.h"
   33         #include "eepRom.h"
   34         #include "FLTD.h"
   35         
   36         /**** Definition of variables ****/
   37         static T_WIRE_CONTROL tWireControl = {0};
   38         
   39         
   40         /**** Declaration of functions ****/
   41         
   42         
   43         
   44         /***********************************************************************
   45         *  Name        : WireControl_Init
   46         *  Description : After power on, initiliaze wire control alogrithm variable
   47         *  Parameter   : None
   48         *  Returns     : None
   49         ***********************************************************************/
   50         void WireControl_Init(void)
   51         {
   52  1              memset(&tWireControl, 0, sizeof(tWireControl));
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        01/20/2021 09:50:45 PAGE 2   

   53  1              
   54  1              tWireControl.cylinderToPressureArrayLength = sizeof(cylinder_To_pressure[0]) / sizeof(INT16U);
   55  1              tWireControl.pressureToCylinderArrayLength = sizeof(pressure_To_cylinder[0]) / sizeof(INT16U);
   56  1              tWireControl.currentToPressureArrayLength = sizeof(current_To_pressure[0]) / sizeof(INT16U);
   57  1              tWireControl.pressureToCurrentArrayLength = sizeof(pressure_To_current[0]) / sizeof(INT16U);
   58  1      }
   59         
   60         /***********************************************************************
   61         *  Name        : WireControl_DeInit
   62         *  Description : During running, need initilize wire control algorithm variable
   63         *  Parameter   : None
   64         *  Returns     : None
   65         ***********************************************************************/
   66         void WireControl_DeInit(void)
   67         {
   68  1              memset(&tWireControl, 0, sizeof(tWireControl));
   69  1      }
   70         
   71         /***********************************************************************
   72         *  Name        : WireControl_Algorithm
   73         *  Description : Wire brake control algorithm
   74         *  Parameter   : None
   75         *  Returns     : None
   76         ***********************************************************************/
   77         void WireControl_Algorithm(void)
   78         {
   79  1              static INT16U ProCounter = 0;
   80  1              static INT8U writeFlag = FALSE;
   81  1      
   82  1              if((FALSE == g_brakeReleaseFlag)
   83  1                      && ((TRUE == g_wireControlEnFlag) || (TRUE == g_cylinderExhaustEnFlag))
   84  1                      && (g_wireControlObjPressure >= 50))
   85  1                      {               
   86  2                      if(ProCounter > 3300)
   87  2                      {
   88  3                              ProCounter = 0;                                 
   89  3                              /* The request pressure is over 5MPa and over 10s */
   90  3                              g_longTimeBrakeCnt++;   
   91  3                              writeFlag = TRUE;
   92  3                      }
   93  2                      else
   94  2                      {
   95  3                              ProCounter++;
   96  3                      }
   97  2              }
   98  1              else // polyspace test by gzz 2020.12.30
   99  1              {
  100  2                      ProCounter = 0;
  101  2              }
  102  1              
  103  1              if((TRUE == writeFlag) && (0 == (g_longTimeBrakeCnt % 30))) //Record every 5 minutes
  104  1              {
  105  2                      CopyString_v_g(&g_longTimeBrakeCnt, LONG_TIME_BRAKE_ADDRESS, LONG_TIME_BRAKE_LENGTH, 1);
  106  2                      writeFlag = FALSE;
  107  2              }
  108  1      
  109  1              tWireControl.cylinderObjPressure = (INT16U)g_wireControlObjPressure * 100; //0.1MPa->1KPa
  110  1              
  111  1              // ObjPrs maximum limit
  112  1              if(tWireControl.cylinderObjPressure > 9000)
  113  1              {       
  114  2                      tWireControl.cylinderObjPressure = 9000;        
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        01/20/2021 09:50:45 PAGE 3   

  115  2              }
  116  1      
  117  1      }
  118         
  119         
  120         /***********************************************************************
  121         *  Name        : WireControl_PressureToCylinder
  122         *  Description : Pressure to CAN date, transform objcylinder
  123         *  Parameter   : None
  124         *  Returns     : None
  125         ***********************************************************************/
  126         INT16U WireControl_PressureToCylinder(INT16U objPrs)
  127         {
  128  1              INT16U objCylinderLocation = 0;
  129  1      
  130  1              objCylinderLocation = lookupTable_1D(objPrs, pressure_To_cylinder[0], pressure_To_cylinder[1], tWireContr
             -ol.pressureToCylinderArrayLength - 1);
  131  1              
  132  1              return objCylinderLocation;
  133  1      
  134  1      }
  135         
  136         /***********************************************************************
  137         *  Name        : WireControl_PressureToCurrent
  138         *  Description : Pressure to CAN date, transform objcurrent
  139         *  Parameter   : None
  140         *  Returns     : None
  141         ***********************************************************************/
  142         INT16S WireControl_PressureToCurrent(INT16U objPrs)
  143         {
  144  1              INT16U objCurrent = 0;
  145  1      
  146  1              objCurrent = lookupTable_1D(objPrs, pressure_To_current[0], pressure_To_current[1], tWireControl.pressure
             -ToCurrentArrayLength - 1);
  147  1      
  148  1              return (INT16S)objCurrent;
  149  1      }
  150         
  151         /***********************************************************************
  152         *  Name        : WireControl_CylinderToPressure
  153         *  Description : Pressure to CAN date, transform objcylinder
  154         *  Parameter   : None
  155         *  Returns     : None
  156         ***********************************************************************/
  157         void WireControl_CylinderToPressure(void)
  158         {       
  159  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData(); 
  160  1      
  161  1              INT16U cylinderPressure = 0;
  162  1      
  163  1              cylinderPressure = lookupTable_1D(ptr_adc->mainCylinderLocation1, cylinder_To_pressure[0], cylinder_To_pr
             -essure[1], tWireControl.cylinderToPressureArrayLength - 1);
  164  1      
  165  1              CylinderToPressure = cylinderPressure / 100;
  166  1      }
  167         
  168         /***********************************************************************
  169         *  Name        : WireControl_CylinderToPressure
  170         *  Description : Pressure to CAN date, transform objcylinder
  171         *  Parameter   : None
  172         *  Returns     : None
  173         ***********************************************************************/
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        01/20/2021 09:50:45 PAGE 4   

  174         void WireControl_CurrentToPressure(void)
  175         {       
  176  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData(); 
  177  1      
  178  1              INT16U cylinderPressure = 0;
  179  1              INT16U tempMotorCurrent = 0;
  180  1              if(ptr_adc->brakeMotorCurrent <= 0)
  181  1              {
  182  2                      tempMotorCurrent = 0;
  183  2              }
  184  1              else
  185  1              {
  186  2                      tempMotorCurrent = ptr_adc->brakeMotorCurrent;
  187  2              }
  188  1      
  189  1              cylinderPressure = lookupTable_1D(tempMotorCurrent, current_To_pressure[0], current_To_pressure[1], tWire
             -Control.currentToPressureArrayLength - 1);
  190  1      
  191  1              CylinderToPressure = cylinderPressure / 100;
  192  1      }
  193         
  194         
  195         /***********************************************************************
  196         *  Name        : WireControl_AlogrithmData
  197         *  Description : Wire Control brake control alogrithm data
  198         *  Parameter   : None
  199         *  Returns     : APA brake control alogrithm data structure access address
  200         ***********************************************************************/
  201         const T_WIRE_CONTROL* WireControl_AlogrithmData(void)
  202         {
  203  1              return (&tWireControl);
  204  1      }       
  205         
  206         /* _END_OF_WIRE_CONTROL_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         498     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           3     --------
  FAR-DATA SIZE    =         124     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =         166     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
