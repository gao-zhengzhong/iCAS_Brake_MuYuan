C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE WIRE_CONTROL
OBJECT MODULE PLACED IN .\Obj\wire_control.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\wire_control.c MODV2 LARGE BROWSE INCDIR(.\src;.\src
                    -\bsw;.\src\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.
                    -\src\app\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\ti
                    -me measure;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\wire_control.lst) OBJECT(.\Obj\wire_control.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                               *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : apa.c
    9         * Instance      : 
   10         * Description   : APA brake algorithm
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "wire_control.h"
   26         #include "adc_sample.h"
   27         #include "rte.h"
   28         #include "pid.h"
   29         #include "booster.h"
   30         #include "pwm.h"
   31         #include "EEPROM_Cfg.h"
   32         #include "eepRom.h"
   33         #include "FLTD.h"
   34         #include "math.h"
   35         #define WIRE_CONTROL_GLOBALS
   36         
   37         /**** Definition of variables ****/
   38         WIRE_CONTROL_STAT T_WIRE_CONTROL tWireControl = {0u};
   39         
   40         
   41         /**** Declaration of functions ****/
   42         WIRE_CONTROL_STAT void WireControl_APA(void);
   43         WIRE_CONTROL_STAT void WireControl_ConversionObjPressure(INT8U TargetPressure);
   44         void Function_WireModeMotorControl(void);
   45         static INT16U Function_CANPrsToCylinder(INT16U objPrs);
   46         static INT16S Function_CANPrsToCurrent(INT16U objPrs);
   47         
   48         /***********************************************************************
   49         *  Name        : WireControl_Init
   50         *  Description : After power on, initiliaze wire control alogrithm variable
   51         *  Parameter   : None
   52         *  Returns     : None
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 2   

   53         ***********************************************************************/
   54         void WireControl_Init(void)
   55         {
   56  1              memset(&tWireControl, 0, sizeof(tWireControl));
   57  1              return;
   58  1      }
   59         
   60         /***********************************************************************
   61         *  Name        : WireControl_DeInit
   62         *  Description : During running, need initilize wire control algorithm variable
   63         *  Parameter   : None
   64         *  Returns     : None
   65         ***********************************************************************/
   66         void WireControl_DeInit(void)
   67         {
   68  1              memset(&tWireControl, 0, sizeof(tWireControl));
   69  1              return;
   70  1      }
   71         
   72         /***********************************************************************
   73         *  Name        : WireControl_Algorithm
   74         *  Description : Wire brake control algorithm
   75         *  Parameter   : None
   76         *  Returns     : None
   77         ***********************************************************************/
   78         void WireControl_Algorithm(void)
   79         {
   80  1              // 20200908 added for Temperature Protection
   81  1              const T_BOOSTER* ptr_Booster = Booster_AlogrithmData();
   82  1              const FLTD_faultFlagType* faultFlag_ptr = FLTD_FltFlgData();
   83  1              INT16U objcylinder = 0;
   84  1              INT16S objcurrent = 0;
   85  1              INT16U objPwm = 0;
   86  1              INT16U objprs = 0;
   87  1              INT8U temp_Prs = 0;
   88  1              INT8U LadenParkingPrs = 55u;
   89  1              static INT16U ProCounter = 0;
   90  1              static INT8U increaseFlag = FALSE;
   91  1              
   92  1              //if(0 == iCAS_BrakeFault_Level)
   93  1              {
   94  2                      // ObjPressure get; // 20200906
   95  2                      if(TRUE == WireCtrlEnableFlag)
   96  2                      {
   97  3                              if(g_ObjPressure >= 60) // pressure decreasing protect: motor life
   98  3                              {               
   99  4                                      ProCounter++;                           
  100  4                                      // ObjPrs decreasing gradually; tuning 20200913 am
  101  4                                      if(ProCounter < 1000)   // 3ms per cycle; namely, 1000 cycles -> 3s
  102  4                                      {
  103  5                                              WireCtrlObjPressure = g_ObjPressure;
  104  5                                      }
  105  4                                      else
  106  4                                      {       
  107  5                                              // decreasing test
  108  5                                              if(ProCounter % 20 == 0)
  109  5                                              {
  110  6                                                      temp_Prs = WireCtrlObjPressure;
  111  6                                                      temp_Prs = temp_Prs - (temp_Prs>>5);
  112  6                                                      WireCtrlObjPressure = (INT8U)temp_Prs;
  113  6                                              }
  114  5                                              // decreased prs limit
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 3   

  115  5                                              if(WireCtrlObjPressure < LadenParkingPrs)
  116  5                                              {       
  117  6                                                      WireCtrlObjPressure = LadenParkingPrs;  
  118  6                                              }
  119  5                                      }
  120  4      
  121  4                                      if(ProCounter > 4000)
  122  4                                      {
  123  5                                              ProCounter = 4000;                                      
  124  5                                              /* The request pressure is over 6MPa and over 12s */
  125  5                                              if(FALSE == increaseFlag)
  126  5                                              {
  127  6                                                      increaseFlag = TRUE;
  128  6                                                      g_longTimeBrakeCnt++;
  129  6                                                      CopyString_v_g(&g_longTimeBrakeCnt, LONG_TIME_BRAKE_ADDRESS, LONG_TIME_BRAKE_LENGTH, 1);
  130  6                                              }
  131  5                                      }
  132  4                              }
  133  3                              else if(g_ObjPressure <= 55)
  134  3                              {
  135  4                                      increaseFlag = FALSE;
  136  4                                      ProCounter = 0;
  137  4                                      WireCtrlObjPressure = g_ObjPressure;
  138  4                              }
  139  3                              else
  140  3                              {
  141  4                                      ProCounter++;
  142  4                                      if(ProCounter > 4000)
  143  4                                      {       
  144  5                                              ProCounter = 4000;      
  145  5                                      }
  146  4                                      WireCtrlObjPressure = g_ObjPressure;
  147  4                              }
  148  3                      }
  149  2                      else if(TRUE == g_cylinderExhaustEnFlag)
  150  2                      {
  151  3                              WireCtrlObjPressure = g_exhaustObjPressure;
  152  3                      }
  153  2                      else
  154  2                      {
  155  3                              increaseFlag = FALSE;
  156  3                              ProCounter = 0;
  157  3                              WireCtrlObjPressure = 0;
  158  3                      }
  159  2                      
  160  2                      // ObjPrs maximum limit
  161  2                      if(WireCtrlObjPressure > 100)
  162  2                      {       
  163  3                              WireCtrlObjPressure = 100;      
  164  3                      }
  165  2      
  166  2                      objprs = WireCtrlObjPressure * 10;              
  167  2                      if((FALSE == iCAS_CylinderSensorPwrFault) // locationloop method 
  168  2                              && (FALSE == iCAS_CylinderSigErr)
  169  2                              && (FALSE == g_cylinderExhaustEnFlag))
  170  2                      {
  171  3                              objcylinder = Function_CANPrsToCylinder(objprs);        
  172  3                              // 20200911 TemperatureProtect
  173  3                              objcylinder = (INT16U)((objcylinder/10u) * ptr_Booster->temperatureProtectCoeff / 10u);         /* Multiplue t
             -he temperature protect compensation coeff. */
  174  3                              Pid_OnlyLocationClosedLoopControl(objcylinder); 
  175  3                      }
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 4   

  176  2                      else if(FALSE == faultFlag_ptr->currentSensorOverRangFlg) // currentloop method // 20200913
  177  2                      {
  178  3                              objcurrent = Function_CANPrsToCurrent(objprs);  
  179  3                              // 20200913 TemperatureProtect
  180  3                              objcurrent = ((objcurrent + 50)/100u) * ptr_Booster->temperatureProtectCoeff;           /* Multiplue the tempera
             -ture protect compensation coeff. */
  181  3                              Pid_CurrentClosedLoopControl(objcurrent);
  182  3                      }
  183  2                      else
  184  2                      {
  185  3                              if(WireCtrlObjPressure > 0)
  186  3                              {
  187  4                                      objPwm = ((INT32U)1400 * ptr_Booster->temperatureProtectCoeff) / 100;
*** WARNING C192 IN LINE 187 OF src\app\alogrithm\wire_control.c: '=': value truncated
  188  4                                      Pwm_Control(objPwm);
  189  4                              }
  190  3                              else
  191  3                              {
  192  4                                      Pwm_Control(0);
  193  4                              }
  194  3                      }               
  195  2                      Function_WireControlCylinderToPres();
  196  2              }
  197  1      }
  198         /***********************************************************************
  199         *  Name        : FinalTestDesk_Singal
  200         *  Description : Final brake control algorithm
  201         *  Parameter   : None
  202         *  Returns     : None
  203         ***********************************************************************/
  204         INT16U FinalTestDesk_Singal(INT8U signal_choose)
  205         {
  206  1              INT16U objpressure = 0;
  207  1              INT16U shang = 0;
  208  1              FP32 sinecont = 0;
  209  1              switch(signal_choose)
  210  1              {
  211  2                      case 0:
  212  2                              /*------step signal ----------*/
  213  2                              if(FinalDeskTeskTimer <= 2000)
  214  2                              {
  215  3                                      objpressure = 0;
  216  3                              }
  217  2                              else if(FinalDeskTeskTimer <= 4000)
  218  2                              {
  219  3                                      objpressure = 20;
  220  3                              }
  221  2                              else if(FinalDeskTeskTimer <= 6000)
  222  2                              {
  223  3                                      objpressure = 40;
  224  3                              }
  225  2                              else if(FinalDeskTeskTimer <= 8000)
  226  2                              {
  227  3                                      objpressure = 60;
  228  3                              }
  229  2                              else
  230  2                              {
  231  3                                      objpressure = 0;
  232  3                                      if(FinalDeskTeskTimer > 16000)
  233  3                                      {
  234  4                                              FinalDeskTeskTimer = 0;
  235  4                                      }                               
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 5   

  236  3                              }
  237  2                      break;
  238  2                              
  239  2                      case 1:
  240  2                              /*------slop signal---------*/
  241  2                              shang = FinalDeskTeskTimer / 100;
  242  2                              if(FinalDeskTeskTimer <= 6000)
  243  2                              {
  244  3                                      objpressure = shang ;
  245  3                              }
  246  2                              else if(FinalDeskTeskTimer <= 12000)
  247  2                              {
  248  3                                      objpressure = 120 - shang ;
  249  3                              }
  250  2                              else
  251  2                              {
  252  3                                      objpressure = 0;
  253  3                                      if(FinalDeskTeskTimer > 16000)
  254  3                                      {
  255  4                                              FinalDeskTeskTimer = 0;
  256  4                                      }
  257  3                              }
  258  2                      break;
  259  2                      case 2 :
  260  2                              /*------sine signal---------*/  
  261  2                              if(FinalDeskTeskTimer <= 10000)
  262  2                              {
  263  3                                      sinecont = sin( 3.14 * FinalDeskTeskTimer /10000);
  264  3                                      sinecont = Sin_Tap(3.14 * FinalDeskTeskTimer /10000);
  265  3                                      objpressure = (INT16U)(sinecont * 60.0);        
  266  3                              }
  267  2                              else
  268  2                              {
  269  3                                      objpressure = 0;
  270  3                                      
  271  3                                      if(FinalDeskTeskTimer > 16000)
  272  3                                      {
  273  4                                              FinalDeskTeskTimer = 0;
  274  4                                      }
  275  3                              }
  276  2                      break;
  277  2      
  278  2                      default:
  279  2                              objpressure = 0;
  280  2                              FinalDeskTeskTimer = 0;
  281  2                      break;
  282  2              }
  283  1              if(objpressure > 60)
  284  1                      objpressure = 60;
  285  1              return objpressure;
  286  1      }
  287         /***********************************************************************
  288         *  Name        : FinalTestDesk_Algorithm
  289         *  Description : Wire brake control algorithm
  290         *  Parameter   : None
  291         *  Returns     : None
  292         ***********************************************************************/
  293         void FinalTestDesk_Algorithm(void)
  294         {
  295  1              const T_BOOSTER* ptr_Booster = Booster_AlogrithmData();
  296  1              const FLTD_faultFlagType* faultFlag_ptr = FLTD_FltFlgData();    
  297  1              INT16U finaltestobjprs = 0;
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 6   

  298  1              INT16U objcylinder = 0;
  299  1              
  300  1              if(FinalDeskTesk_Enable == 1)
  301  1              {
  302  2                      finaltestobjprs = FinalTestDesk_Singal(FinalDeskTesk_SingalMode) * 10;
  303  2                      FinalDeskTesk_ObjPres = FinalTestDesk_Singal(FinalDeskTesk_SingalMode);
  304  2                      objcylinder = Function_CANPrsToCylinder(finaltestobjprs);       
  305  2                      objcylinder = (INT16U)((objcylinder/10u) * ptr_Booster->temperatureProtectCoeff / 10u);         /* Multiplue th
             -e temperature protect compensation coeff. */
  306  2                      Pid_OnlyLocationClosedLoopControl(objcylinder);
  307  2              }
  308  1              else
  309  1              {
  310  2                  finaltestobjprs = 0;
  311  2                      FinalDeskTesk_ObjPres = finaltestobjprs / 10 ;
  312  2                      objcylinder = 0;
  313  2                      objcylinder = (INT16U)((objcylinder/10u) * ptr_Booster->temperatureProtectCoeff / 10u);         /* Multiplue th
             -e temperature protect compensation coeff. */
  314  2                      Pid_OnlyLocationClosedLoopControl(objcylinder);
  315  2              }
  316  1              Function_WireControlCylinderToPres();
  317  1      }
  318         /***********************************************************************
  319         *  Name        : Function_CANPrsToCylinder
  320         *  Description : Pressure to CAN date, transform objcylinder
  321         *  Parameter   : None
  322         *  Returns     : None
  323         ***********************************************************************/
  324         static INT16U Function_CANPrsToCylinder(INT16U objPrs)
  325         {
  326  1              INT16U objcylinderlocation = 0;
  327  1              INT16U kx = 0;
  328  1              
  329  1      #if 0   // go   // 20200911 pm 2.4Nm; phi 23.81mm
                      if(objPrs <= 0)
                      {
                              objcylinderlocation = 0;
                      }       
                      else if(objPrs <= 5)
                      {
                              objcylinderlocation = objPrs * 32; 
                      }
                      else if(objPrs <= 45)
                      {
                          kx = objPrs * 4;
                              objcylinderlocation = kx + 140; 
                      }               
                      else if(objPrs <= 65)
                      {
                          kx = objPrs * 34;
                              objcylinderlocation = kx - 1210;
                      }       
                      else if(objPrs <= 205)      
                      {
                              kx = objPrs * 3 + objPrs / 2;
                              objcylinderlocation = kx + 773;
                      }
                      else
                      {
                              kx = objPrs * 2;
                              objcylinderlocation = kx + 1080;
                      }
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 7   

              
              #else // new    // 20200911 pm; adapt; tune objCylLoc
  360  1              if(objPrs <= 0)
  361  1              {
  362  2                      objcylinderlocation = 0;
  363  2              }       
  364  1              else if(objPrs <= 5)
  365  1              {
  366  2                      objcylinderlocation = objPrs * 32; 
  367  2              }
  368  1              else if(objPrs <= 45)
  369  1              {
  370  2                  kx = objPrs * 4;
  371  2                      objcylinderlocation = kx + 140; 
  372  2              }               
  373  1              else if(objPrs <= 65)
  374  1              {
  375  2                  kx = objPrs * 34;
  376  2                      objcylinderlocation = kx - 1210;
  377  2              }       
  378  1              else if(objPrs <= 225)      
  379  1              {
  380  2                      kx = objPrs * 4 - objPrs/4;
  381  2                      objcylinderlocation = kx + 756;
  382  2              }
  383  1              else
  384  1              {
  385  2                      kx = objPrs * 2 + objPrs / 5;
  386  2                      objcylinderlocation = kx + 1105;
  387  2              }
  388  1              
  389  1      #endif          
  390  1              // modified 20200912 pm;
  391  1              if(objcylinderlocation >= 2800)
  392  1                      objcylinderlocation = 2800;     
  393  1              
  394  1              return(objcylinderlocation);
  395  1      
  396  1      }
  397         
  398         /***********************************************************************
  399         *  Name        : Function_CANPrsToCurrent
  400         *  Description : Pressure to CAN date, transform objcurrent
  401         *  Parameter   : None
  402         *  Returns     : None
  403         ***********************************************************************/
  404         static INT16S Function_CANPrsToCurrent(INT16U objPrs)
  405         {
  406  1              INT16S objcurrent = 0;
  407  1              INT16U kx = 0;
  408  1              
  409  1      #if 0   // go   // 20200913 pm 2.4Nm; phi 23.81mm
                      if(objPrs <= 0)
                      {
                              objcurrent = 0;
                      }       
                      else if(objPrs <= 10)
                      {
                              objcurrent = objPrs * 40; 
                      }
                      else if(objPrs <= 50)
                      {
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 8   

                          kx = objPrs * 7 + objPrs / 2;
                              objcurrent = kx + 325;  
                      }
                      else if(objPrs <= 200)
                      {
                          kx = objPrs * 4;
                              objcurrent = kx + 500;
                      }       
                      else if(objPrs <= 400)      
                      {
                              kx = objPrs * 5;
                              objcurrent = kx + 300;
                      }
                      else
                      {
                              kx = objPrs * 4;
                              objcurrent = kx + 700;
                      }
              
              #else // new    // 20200913 pm; adapt; tune objCylLoc
  440  1              if(objPrs <= 0)
  441  1              {
  442  2                      objcurrent = 0;
  443  2              }       
  444  1              else if(objPrs <= 5)
  445  1              {
  446  2                      objcurrent = objPrs * 76; 
  447  2              }
  448  1              else if(objPrs <= 110)
  449  1              {
  450  2                  kx = objPrs * 4;
  451  2                      objcurrent = kx + 360;  
  452  2              }
  453  1              else if(objPrs <= 200)
  454  1              {
  455  2                  kx = objPrs * 5;
  456  2                      objcurrent = kx + 250;
  457  2              }       
  458  1              else if(objPrs <= 400)      
  459  1              {
  460  2                      kx = objPrs * 4 + objPrs / 4;
  461  2                      objcurrent = kx + 400;
  462  2              }
  463  1              else
  464  1              {
  465  2                      kx = objPrs * 5 - objPrs/3;
  466  2                      objcurrent = kx + 233;
  467  2              }
  468  1              
  469  1      #endif          
  470  1              // modified 20200913 pm;
  471  1              if(objcurrent >= 4200)
  472  1                      objcurrent = 4200;      
  473  1              if(objcurrent <= 0)
  474  1                      objcurrent = 0; 
  475  1              
  476  1              return(objcurrent);
  477  1      }
  478         
  479         /***********************************************************************
  480         *  Name        : Function_WireControlCylinderToPres
  481         *  Description : Pressure to CAN date, transform objcylinder
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 9   

  482         *  Parameter   : None
  483         *  Returns     : None
  484         ***********************************************************************/
  485         void Function_WireControlCylinderToPres(void)
  486         {       
  487  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData(); 
  488  1              INT16U actualcylinder = 0;
  489  1              INT16U CylinderToPrs = 0;
  490  1              INT16U kx = 0;
  491  1      
  492  1              actualcylinder = ptr_adc->mainCylinderLocation1;
  493  1              
  494  1      #if 0    // go  // 20200911 pm 2.4Nm; phi 23.81mm
                      if(actualcylinder <= 0)
                      {
                              CylinderToPrs = 0;
                      }       
                      else if(actualcylinder <= 150) 
                      {
                              CylinderToPrs = (actualcylinder + 15) / 30;
                      }
                      else if(actualcylinder <= 290)
                      {
                              kx = actualcylinder / 4;
                              CylinderToPrs = kx - 33;
                      }               
                      else if(actualcylinder <= 1040)        
                      {
                              kx = (actualcylinder * 2 + 25)/50;
                              CylinderToPrs = kx + 28;
                      }
                      else if(actualcylinder <= 1540) 
                      {
                              kx = (actualcylinder * 3 + 5) / 10;
                              CylinderToPrs = kx - 242;
                      }
                      else                           
                      {
                              kx = actualcylinder / 2 + (actualcylinder + 25)/ 50;
                              CylinderToPrs = kx - 581;       
                      }
                      
              #else // new    // 20200912 pm; adapt; tune TrsPrs
  525  1              if(actualcylinder <= 0)
  526  1              {
  527  2                      CylinderToPrs = 0;
  528  2              }       
  529  1              else if(actualcylinder <= 150) 
  530  1              {
  531  2                      CylinderToPrs = (actualcylinder + 15) / 30;
  532  2              }
  533  1              else if(actualcylinder <= 300)
  534  1              {
  535  2                      kx = (actualcylinder * 3 + 5)/ 10;
  536  2                      CylinderToPrs = kx - 40;
  537  2              }               
  538  1              else if(actualcylinder <= 1000)        
  539  1              {
  540  2                      kx = (actualcylinder + 10)/20;
  541  2                      CylinderToPrs = kx + 35;
  542  2              }
  543  1              else if(actualcylinder <= 1550) 
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 10  

  544  1              {
  545  2                      kx = (actualcylinder * 3 + 5)/10 + (actualcylinder + 25)/50;
  546  2                      CylinderToPrs = kx - 235;
  547  2              }
  548  1              else                           
  549  1              {
  550  2                      kx = actualcylinder / 2 + (actualcylinder + 25)/ 50;
  551  2                      CylinderToPrs = kx - 545;       
  552  2              }
  553  1              
  554  1      #endif
  555  1              
  556  1              CylinderToPressure = CylinderToPrs / 10;
  557  1              FinalDeskTesk_CylindertoPres = CylinderToPrs;
  558  1      }
  559         
  560         #if (ENABLE == FUNC_WIRE_CONTROL_APA)
  561         /***********************************************************************
  562         *  Name        : WireControl_APA
  563         *  Description : Wire brake control of APA algorithm
  564         *  Parameter   : None
  565         *  Returns     : None
  566         ***********************************************************************/
  567         WIRE_CONTROL_STAT void WireControl_APA(void)
  568         {
  569  1              const T_ADC_APP *ptr_adc = AdcApp_SampleData();
  570  1      
  571  1              if (TRUE == APA_BrakeFlag)
  572  1              {
  573  2                      tWireControl.APARequestFeedback = TRUE;
  574  2      
  575  2                      /* If APA emergency brake, apply maximum parking pressure, else
  576  2                       * according to the brake percentage to apply. */
  577  2                      if (APA_EMERGENCY_BRAKE_VALID == APA_EmgBrakeFlag)
  578  2                      {
  579  3                              Pid_PressureClosedLoopControl(APA_EMERGENCY_BRAKE_PRESSURE);
  580  3                      }
  581  2                      else
  582  2                      {
  583  3                              WireControl_ConversionObjPressure(APA_TargetPrs);
  584  3                              Pid_PressureClosedLoopControl(tWireControl.mainCylinderObjPressure);
  585  3                      }
  586  2                      
  587  2                      /* Feedback the actual main cylinder pressure and limit the amplitude. */
  588  2                      if (ptr_adc->mainCylinderPressure >= APA_BRAKE_PRESSURE_UPPER_LIMIT)
  589  2                      {
  590  3                              tWireControl.APApressureFeedback = APA_BRAKE_PRESSURE_UPPER_LIMIT;
  591  3                      }
  592  2                      else
  593  2                      {
  594  3                              if (ptr_adc->mainCylinderPressure <= 0u)
  595  3                              {
  596  4                                      tWireControl.APApressureFeedback = 0u;
  597  4                              }
  598  3                              else
  599  3                              {
  600  4                                      tWireControl.APApressureFeedback = ptr_adc->mainCylinderPressure;
  601  4                              }
  602  3                      }
  603  2              }
  604  1              else
  605  1              {
C166 COMPILER V7.57.0, WIRE_CONTROL                                                        11/13/2020 15:09:25 PAGE 11  

  606  2                      WireControl_DeInit();   
  607  2              }       
  608  1      
  609  1              return;
  610  1      }
  611         #endif
  612         
  613         /***********************************************************************
  614         *  Name        : WireControl_ConversionObjPressure
  615         *  Description : APA function get percentage to conversion brake main
  616         *                cylinder control object pressure.
  617         *  Parameter   : None
  618         *  Returns     : None
  619         ***********************************************************************/
  620         WIRE_CONTROL_STAT void WireControl_ConversionObjPressure(INT8U TargetPressure)
  621         {
  622  1              /* TargetPrs signal from CAN, represent the percentage of brake pressure 0~100%, 
  623  1               * corresponding main cylinder object pressure 0~2000kpa. */
  624  1              tWireControl.mainCylinderObjPressure = TargetPressure * 10u;
  625  1              
  626  1              return;
  627  1      }
  628         
  629         /***********************************************************************
  630         *  Name        : WireControl_AlogrithmData
  631         *  Description : Wire Control brake control alogrithm data
  632         *  Parameter   : None
  633         *  Returns     : APA brake control alogrithm data structure access address
  634         ***********************************************************************/
  635         const T_WIRE_CONTROL* WireControl_AlogrithmData(void)
  636         {
  637  1              return (&tWireControl);
  638  1      }       
  639         
  640         /* _END_OF_WIRE_CONTROL_ */
*** WARNING C174 IN LINE 567 OF src\app\alogrithm\wire_control.c: 'WireControl_APA': unreferenced 'static' function


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1572     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           3     --------
  FAR-DATA SIZE    =          12     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          30     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
