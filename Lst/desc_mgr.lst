C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE DESC_MGR
OBJECT MODULE PLACED IN .\Obj\desc_mgr.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\bsw\desc\desc_mgr.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\sr
                    -c\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\
                    -mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measur
                    -e;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\desc_mgr.lst) OBJECT(.\Obj\desc_mgr.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : DescDtcMgr.c
    9         * Instance      : 
   10         * Description   : UDS
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 27,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 27,2019    Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #define DESC_MGR_GLOBALS
   23         
   24         #include <string.h>
   25         
   26         #include "desc_mgr.h"
   27         #include "desc_ser.h"
   28         #include "EEPROM_Cfg.h"
   29         #include "adc_sample.h"
   30         #include "eepRom.h"
   31         #include "can_diag.h"
   32         #include "rte.h"
   33         
   34         
   35         /**** Definition of variables ****/
   36         INT16U desc_delay_sig;
   37         
   38         DESC_MGR_STAT INT16U can_diag_init_delay_timer = 0u;
   39         DESC_MGR_STAT INT16U can_diag_ign_delay_timer = 0u;
   40         DESC_MGR_STAT INT16U can_diag_init_nm_delay_timer = 0u;
   41         DESC_MGR_STAT INT16U can_diag_bat_volt_recover_delay_timer = 0u;
   42         
   43         DESC_MGR_STAT BOOLEAN dtc_control_setting_on_off = TRUE;
   44         DESC_MGR_STAT BOOLEAN bDtcDataNeedSendToEep = FALSE;
   45         DESC_MGR_STAT DTC_INIT_STEP_TYPE dtc_eeprom_init_step = DTC_INIT_STEP_START;
   46         DESC_MGR_STAT INT8U dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_FINISHED;
   47         
   48         //DESC_MGR_STAT INT8U dtc_occurance_count[DTC_CODE_MAX_NUM] = {0u};
   49         //DESC_MGR_STAT INT8U dtc_aging_count[DTC_CODE_MAX_NUM] = {0u};
   50         //DESC_MGR_STAT INT8U dtc_pending_count[DTC_CODE_MAX_NUM] = {0u}; 
   51         //DESC_MGR_STAT INT8U dtc_aged_count[DTC_CODE_MAX_NUM] = {0u};
   52         
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 2   

   53         DESC_MGR_STAT INT8U dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
   54         DESC_MGR_STAT INT32U delta_trip_count = 0x00000000;
   55         
   56         DESC_MGR_STAT BOOLEAN bSetClearHistoryFaultCntFlag[DTC_CODE_MAX_NUM] = {FALSE}; 
   57         DESC_MGR_STAT BOOLEAN bSetClearHistoryPendingCntFlag[DTC_CODE_MAX_NUM] = {FALSE}; 
   58         DESC_MGR_STAT BOOLEAN bSetIncreaseHistoryPendingCntFlag[DTC_CODE_MAX_NUM] = {FALSE}; 
   59         
   60         /* DTC status mask statusOfDTC */
   61         DESC_MGR_STAT DTC_RECORD_TYPE dtc_current_status_record[DTC_CODE_MAX_NUM] = {0x00};
   62         
   63         /* DTC create count Fault occurrence counter */
   64         DESC_MGR_STAT DTC_RECORD_CNT_TYPE dtc_create_record_cnt[DTC_CODE_MAX_NUM] = {0u};
   65         
   66         /* DTC create and recover time count */
   67         DESC_MGR_STAT DTC_RECORD_TIME_CNT_TYPE dtc_status_time_record_cnt[DTC_CODE_MAX_NUM] = {0u}; 
   68         
   69         /* DTC snapshot data */
   70         DESC_MGR_STAT DTC_SNAPSHOT_DATA_RECORD dtc_snapshot_data_record[DTC_CODE_MAX_NUM] = {0u};
   71         
   72         /* DTC extern data */
   73         DESC_MGR_STAT DTC_EXTERN_DATA_RECORD dtc_extern_data_record[DTC_CODE_MAX_NUM] = {0u};
   74         
   75         
   76         /* DTC Number */
   77         DTC_CODE_DATA_TYPE dtc_code_data[DTC_CODE_MAX_NUM] = 
   78         {       
   79                 {0x70, 0x06, 0x01}, /*C300601, DTC_VEHICLE_POWER_VOLTAGE_HIGH */
   80                 {0x70, 0x06, 0x02}, /*C300602, DTC_VEHICLE_POWER_VOLTAGE_LOW */
   81                 {0x70, 0x06, 0x03}, /*C300603, DTC_ECU_TEMPERATURE_HIGH */
   82                 {0x70, 0x06, 0x04}, /*C300604, DTC_ECU_TEMPERATURE_LOW */
   83                 {0x70, 0x06, 0x05}, /*C300605, DTC_TEMPERATURE_SENSOR_FAULT */
   84         
   85                 {0x70, 0x06, 0x06}, /*C300606, DTC_PEDAL_SENSOR_POWER_VOLTAGE_HIGH */
   86                 {0x70, 0x06, 0x07}, /*C300607, DTC_PEDAL_SENSOR_POWER_VOLTAGE_LOW */
   87                 {0x70, 0x06, 0x08}, /*C300608, DTC_PEDAL_SENSOR_POWER_SHORT_CIRCUIT */
   88                 {0x70, 0x06, 0x09}, /*C300609, DTC_PEDAL_SENSOR_POWER_OPEN_CIRCUIT */
   89                 {0x70, 0x06, 0x10}, /*C300610, DTC_PEDAL_SENSOR_SIGNAL_OVER_RANGE */
   90                 {0x70, 0x06, 0x11}, /*C300611, DTC_PEDAL_SENSOR_SIGNAL_CHECK_ERR */
   91                 {0x70, 0x06, 0x12}, /*C300612, DTC_PEDAL_SENSOR_INITIAL_SIGNAL_ERR */
   92                 {0x70, 0x06, 0x13}, /*C300613, DTC_PEDAL_SENSOR_SIGNAL_ABNORMAL */
   93         
   94                 {0x70, 0x06, 0x16}, /*C300616, DTC_CYLINDER_SENSOR_POWER_VOLTAGE_HIGH */
   95                 {0x70, 0x06, 0x17}, /*C300617, DTC_CYLINDER_SENSOR_POWER_VOLTAGE_LOW */
   96                 {0x70, 0x06, 0x18}, /*C300618, DTC_CYLINDER_SENSOR_POWER_SHORT_CIRCUIT */
   97                 {0x70, 0x06, 0x19}, /*C300619, DTC_CYLINDER_SENSOR_POWER_OPEN_CIRCUIT */
   98                 {0x70, 0x06, 0x20}, /*C300620, DTC_CYLINDER_SENSOR_SIGNAL_OVER_RANGE */
   99                 {0x70, 0x06, 0x21}, /*C300621, DTC_CYLINDER_SENSOR_SIGNAL_CHECK_ERR */
  100                 {0x70, 0x06, 0x22}, /*C300622, DTC_CYLINDER_SENSOR_INITIAL_SIGNAL_ERR */
  101                 {0x70, 0x06, 0x23}, /*C300623, DTC_CYLINDER_SENSOR_SIGNAL_ABNORMAL */
  102         
  103                 {0x70, 0x06, 0x25}, /*C300625, DTC_CURRENT_SENSOR_SIGNAL_OVER_RANGE */
  104                 {0x70, 0x06, 0x26}, /*C300626, DTC_CURRENT_SENSOR_INITIAL_SIGNAL_ERR */
  105                 {0x70, 0x06, 0x27}, /*C300627, DTC_MOTOR_DRIVE_BUS_VOLTAGE_HIGH */
  106                 {0x70, 0x06, 0x28}, /*C300628, DTC_MOTOR_DRIVE_BUS_VOLTAGE_LOW */
  107                 {0x70, 0x06, 0x29}, /*C300629, DTC_MOTOR_DRIVER_FAULT */
  108                 {0x70, 0x06, 0x32}, /*C300632, DTC_MOTOR_OPEN_CIRCUIT */
  109                 {0x70, 0x06, 0x33}, /*C300633, DTC_MOTOR_SHORT_CIRCUIT */
  110         
  111                 {0xC1, 0x55, 0x87}, /*U015587, DTC_CAN_NODE_VCU_LOST_ERR */
  112                 {0xC1, 0x21, 0x87}, /*U012187, DTC_CAN_NODE_MCU_LOST_ERR */
  113                 {0xC1, 0x40, 0x87}, /*U014087, DTC_CAN_NODE_ABS_LOST_ERR */
  114                 {0xC0, 0x73, 0x00}, /*U007300, DTC_VEHICLE_CAN_BUS_OFF */
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 3   

  115         };
  116         
  117         /**** Declaration of functions ****/
  118         DESC_MGR_STAT void DescMgr_ReadDtcFromEEP(void);
  119         DESC_MGR_STAT void DescMgr_WriteAllDtcToEEP(void);
  120         DESC_MGR_STAT void DescMgr_WriteExtendDataToEEP(INT8U dtc_code);
  121         DESC_MGR_STAT void DescMgr_WriteSnapshotDataToEEP(INT8U dtc_code);
  122         DESC_MGR_STAT void DescMgr_ExtendDataReport(INT8U dtc_code);
  123         DESC_MGR_STAT void DescMgr_SnapshotDataReport(INT8U dtc_code);
  124         DESC_MGR_STAT void DescMgr_CanDigDtcRecordEnableAdjust(void);
  125         DESC_MGR_STAT void DescMgr_InitDtcCreateRecoverCounterAndStatus(void);
  126         DESC_MGR_STAT void DescMgr_SetDeltaTripCounter(INT8U dtc_code, BOOLEAN delta_Trip_flag);
  127         DESC_MGR_STAT void DescMgr_ReturnSnapshotData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number);
  128         DESC_MGR_STAT void DescMgr_ReturnSnapshotDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number);
  129         DESC_MGR_STAT void DescMgr_ReturnExtendData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U RecordNum
             -);
  130         DESC_MGR_STAT void DescMgr_ReturnExtendDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U Re
             -cordNum);
  131         
  132         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearAll(void);
  133         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearFinished(void);
  134         void DescMgr_DelaySetSig(INT16U sig);
  135         void DescMgr_Sv14ClearStart(void);
  136         
  137         
  138         
  139         #define DELAY_1s 10
  140         #define POWER_9V_VOLTAGE 9000
  141         #define POWER_9_5V_VOLTAGE 9500
  142         
  143         
  144         /***********************************************************************
  145         * FUNCTION    : CanDescDtc_vInit
  146         * DESCRIPTION : 
  147         * INPUTS      : none
  148         * RETURN      : none
  149         ***********************************************************************/
  150         void CanDescDtc_vInit(void)
  151         {
  152  1              /* control dtc setting to on in default */
  153  1          dtc_control_setting_on_off = TRUE; 
  154  1          dtc_eeprom_init_step = DTC_INIT_STEP_START;
  155  1          dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_FINISHED;
  156  1      
  157  1          bDtcDataNeedSendToEep = FALSE;
  158  1          
  159  1          can_diag_init_delay_timer = CAN_DIAG_INIT_DELAY_TIME;
  160  1          
  161  1          can_diag_init_nm_delay_timer = CAN_DIAG_NM_INIT_DELAY_TIME;
  162  1          can_diag_ign_delay_timer = CAN_DIAG_NM_IGN_ON_DELAY_TIME;
  163  1          can_diag_bat_volt_recover_delay_timer = CAN_DIAG_BAT_VOLT_RECOVER_DELAY_TIMEOUT;    
  164  1      
  165  1          /* init to disable all dtc record */
  166  1          dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
  167  1      
  168  1          /* Adjust dtc record enable mask */
  169  1              
  170  1      #ifdef DTC_AGING_COUNTER
  171  1              memset(bSetClearHistoryFaultCntFlag, TRUE, DTC_CODE_MAX_NUM);
  172  1      #endif
  173  1      
  174  1          //EEP_Read_Status_Before_S3_Monitor();
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 4   

  175  1      }
  176         
  177         /***********************************************************************
  178         * FUNCTION    : DescMgr_CanDiagDtcDeInit
  179         * DESCRIPTION : 
  180         * INPUTS      : none
  181         * RETURN      : none
  182         ***********************************************************************/
  183         void DescMgr_CanDiagDtcDeInit(void)
  184         {
  185  1              return;
  186  1      }
  187         
  188         /***********************************************************************
  189         * FUNCTION    : can_diag_dtc_eeprom_handle
  190         * DESCRIPTION : Initialize all the dtc eeprom data at one time will lead to other can function delay,
  191         * such as nm or app cycle msg transmition. So we separate the init action of dtc eeprom.
  192         * INPUTS      : none
  193         * RETURN      : none
  194         ***********************************************************************/
  195         DESC_MGR_STAT INT8U write_delay = 0u;
  196         DESC_MGR_STAT void DescMgr_CanDiagDtcEepromHandle(void)
  197         {
  198  1      
  199  1              switch (dtc_eeprom_init_step)
  200  1              {
  201  2                      case DTC_INIT_STEP_START:
  202  2                              dtc_eeprom_init_step = DTC_INIT_STEP_READ_DTC_ST;
  203  2                              break;
  204  2                              
  205  2                      case DTC_INIT_STEP_READ_DTC_ST:
  206  2                              DescMgr_ReadDtcFromEEP();
  207  2                              dtc_eeprom_init_step = DTC_INIT_STEP_CALCULATE_DTC_ST;
  208  2                              break;
  209  2                              
  210  2                      case DTC_INIT_STEP_CALCULATE_DTC_ST:
  211  2                              DescMgr_InitDtcCreateRecoverCounterAndStatus();
  212  2                              dtc_eeprom_init_step = DTC_INIT_STEP_WRITE_EEPROM_ST;
  213  2                              break;
  214  2                              
  215  2                      case DTC_INIT_STEP_WRITE_EEPROM_ST:
  216  2                  dtc_eeprom_init_step = DTC_INIT_STEP_FINISHED;
  217  2                  dtc_record_enable_mask |= DTC_RECORD_ENALBE_BDY; /* enable body diag */                     
  218  2                              break;
  219  2      
  220  2                      case DTC_INIT_STEP_FINISHED:
  221  2                              if (TRUE == bDtcDataNeedSendToEep)
  222  2                              {
  223  3                                      write_delay++;
  224  3                                      if (write_delay >= EEP_WRITE_FRE) /* write eep frequence 1s once */
  225  3                                      {
  226  4                                              write_delay = 0u;
  227  4                                              bDtcDataNeedSendToEep = FALSE; // EED_nDTCRecord;
  228  4      
  229  4                                              DescMgr_WriteAllDtcToEEP();
  230  4                                      }             
  231  3                              }                       
  232  2                              break;
  233  2      
  234  2                      default:
  235  2                              break;
  236  2              }
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 5   

  237  1      }
  238         
  239         /***********************************************************************
  240         * FUNCTION    : DescMgr_ReadDtcFromEEP
  241         * DESCRIPTION : None
  242         * INPUTS      : None
  243         * RETURN      : None
  244         ***********************************************************************/
  245         DESC_MGR_STAT void DescMgr_ReadDtcFromEEP(void)
  246         {
  247  1              INT8U i;
  248  1      
  249  1              for (i=0; i<DTC_CODE_MAX_NUM; i++)
  250  1              {
  251  2                      ReadString_v_g((INT8U *)&dtc_current_status_record[i], DTC_EEPROM_STATUS_BYTE_START_ADDRESS+(i * 16u), s
             -izeof(dtc_current_status_record[i]));
  252  2                      ReadString_v_g((INT8U *)&dtc_snapshot_data_record[i], DTC_EEPROM_SNAPSHOT_DATA_START_ADDRESS+(i * 16u), 
             -sizeof(dtc_snapshot_data_record[i]));
  253  2                      ReadString_v_g((INT8U *)&dtc_extern_data_record[i], DTC_EEPROM_EXTENDED_DATA_START_ADDRESS+(i * 16u), si
             -zeof(dtc_extern_data_record[i]));
  254  2      
  255  2              }
  256  1      }
  257         
  258         /***********************************************************************
  259         * FUNCTION    : DescMgr_WriteAllDtcToEEP
  260         * DESCRIPTION : None
  261         * INPUTS      : None
  262         * RETURN      : None
  263         ***********************************************************************/
  264         DESC_MGR_STAT void DescMgr_WriteAllDtcToEEP(void)
  265         {
  266  1              INT8U i;        
  267  1      
  268  1              for (i=0; i<DTC_CODE_MAX_NUM; i++)
  269  1              {
  270  2                      CopyString_v_g(&dtc_current_status_record[i], DTC_EEPROM_STATUS_BYTE_START_ADDRESS + (i * 16u), sizeof(d
             -tc_current_status_record[i]), 1);
  271  2                      CopyString_v_g(&dtc_snapshot_data_record[i], DTC_EEPROM_SNAPSHOT_DATA_START_ADDRESS + (i * 16u), sizeof(
             -dtc_snapshot_data_record[i]), 1);     
  272  2                      CopyString_v_g(&dtc_extern_data_record[i], DTC_EEPROM_EXTENDED_DATA_START_ADDRESS + (i * 16u), sizeof(dt
             -c_extern_data_record[i]), 1);
  273  2                      
  274  2      
  275  2                      // TODO:Write extend data to EEPROM
  276  2              }       
  277  1      }
  278         
  279         /***********************************************************************
  280         * FUNCTION    : DescMgr_WriteExtendDataToEEP
  281         * DESCRIPTION : None
  282         * INPUTS      : None
  283         * RETURN      : None
  284         ***********************************************************************/
  285         DESC_MGR_STAT void DescMgr_WriteExtendDataToEEP(INT8U dtc_code)
  286         {
  287  1              // TODO:Write extend data to EEPROM
  288  1      }
*** WARNING C47 IN LINE 285 OF src\bsw\desc\desc_mgr.c: 'dtc_code': unreferenced parameter
  289         
  290         /***********************************************************************
  291         * FUNCTION    : DescMgr_WriteSnapshotDataToEEP
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 6   

  292         * DESCRIPTION : None
  293         * INPUTS      : INT8U dtc_code
  294         * RETURN      : None
  295         ***********************************************************************/
  296         DESC_MGR_STAT void DescMgr_WriteSnapshotDataToEEP(INT8U dtc_code)
  297         {
  298  1              INT16U snapshotDataLength = 0;
  299  1              INT32U snapshotDataAddress = 0;
  300  1              
  301  1              snapshotDataLength = sizeof(DTC_SNAPSHOT_DATA_RECORD);
  302  1              snapshotDataAddress = DTC_EEPROM_SNAPSHOT_DATA_START_ADDRESS + (dtc_code * snapshotDataLength);
  303  1              CopyString_v_g(&dtc_snapshot_data_record[dtc_code], snapshotDataAddress, snapshotDataLength, 1);
  304  1      }
  305         
  306         /***********************************************************************
  307         * FUNCTION    : Init_DTC_Creat_Recover_Counter_And_Status
  308         * DESCRIPTION : 
  309         * INPUTS      : none
  310         * RETURN      : none
  311         ***********************************************************************/
  312         DESC_MGR_STAT void DescMgr_InitDtcCreateRecoverCounterAndStatus(void)
  313         {
  314  1          INT8U i = 0u;
  315  1      
  316  1          for (i=0u; i<DTC_CODE_MAX_NUM; i++)
  317  1          {
  318  2              dtc_status_time_record_cnt[i].dtc_create_time_cnt = 0u;
  319  2              dtc_status_time_record_cnt[i].dtc_recover_time_cnt = 0u;
  320  2      
  321  2              DescMgr_DtcStatusDataReport(i, (DTC_TEST_INIT | DTC_TEST_NEW_OPR));
  322  2          }   
  323  1      }
  324         
  325         /***********************************************************************
  326         * FUNCTION    : DescMgr_DtcStatusDataReport
  327         * DESCRIPTION : None
  328         * INPUTS      : None
  329         * RETURN      : None
  330         ***********************************************************************/
  331         void DescMgr_DtcStatusDataReport(INT8U dtc_code, INT8U dtc_test_type)
  332         {
  333  1              BOOLEAN dtc_status_changed = FALSE; 
  334  1                      
  335  1              if ((dtc_code < DTC_CODE_MAX_NUM) && ((TRUE == DescMgr_CanDiagDtcControlSettingCheck()) || (DTC_TEST_CLEA
             -R == dtc_test_type)))
  336  1              {
  337  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT0)               
  338  2                      /* DTC Status Bit0: Test Fail */
  339  2                      if (TRUE == DescMgr_ProcTestFailed(dtc_code, dtc_test_type))
  340  2                      {
  341  3                              dtc_status_changed = TRUE;
  342  3                      }
  343  2      #endif
  344  2      
  345  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT1)       
  346  2                      /* DTC Status Bit1: Test Fail This Operation Cycle */
  347  2                      if (TRUE == DescMgr_ProcTestFailedThisOperationCycle(dtc_code, dtc_test_type))
  348  2                      {
  349  3                              dtc_status_changed = TRUE;
  350  3                      }
  351  2      #endif
  352  2      
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 7   

  353  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT2)       
  354  2                      /* DTC Status Bit2: Not Confirmed DTC */
  355  2                      if (TRUE == DescMgr_ProcPendingDTC(dtc_code, dtc_test_type))
  356  2                      {
  357  3                              dtc_status_changed = TRUE;
  358  3                      }
  359  2      #endif
  360  2      
  361  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT3)       
  362  2                      /* DTC Status Bit3: Confirmed DTC */
  363  2                      if (TRUE == DescMgr_ProcConfirmedDTC(dtc_code, dtc_test_type))
  364  2                      {
  365  3                              dtc_status_changed = TRUE;
  366  3                              bDtcDataNeedSendToEep = TRUE;
  367  3                      }
  368  2      #endif
  369  2      
  370  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT4)       
                              /* DTC Status Bit4: Test Not Completed Since Last Clear */
                              if (TRUE == DescMgr_ProcTestNotCompletedSinceLastClear(dtc_code, dtc_test_type))
                              {
                                      dtc_status_changed = TRUE;
                              }
              #endif
  377  2      
  378  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT5)       
                              /* DTC Status Bit5: Test Fail Since Last Clear */
                              if (TRUE == DescMgr_ProcTestFailedSinceLastClear(dtc_code, dtc_test_type))
                              {
                                      dtc_status_changed = TRUE;
                              }               
              #endif
  385  2      
  386  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT6)       
  387  2                      /* DTC Status Bit6: Test Not Completed This Operation Cycle */
  388  2                      if (TRUE == DescMgr_ProcTestNotCompletedThisOperationCycle(dtc_code, dtc_test_type))
  389  2                      {
  390  3                              dtc_status_changed = TRUE;
  391  3                      }
  392  2      #endif
  393  2      
  394  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT7)       
                              /* DTC Status Bit7: Warning Indicator Requested */
                              if (TRUE == DescMgr_ProcWarningIndicatorRequested(dtc_code, dtc_test_type))
                              {
                                      dtc_status_changed = TRUE;
                              }
              #endif
  401  2              }
  402  1      }
  403         
  404         /***********************************************************************
  405         * FUNCTION    : DescMgr_ProcTestFailed
  406         * DESCRIPTION : None
  407         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  408         * RETURN      : None
  409         ***********************************************************************/
  410         BOOLEAN DescMgr_ProcTestFailed(INT8U dtc_code, INT8U dtc_test_type)
  411         {
  412  1              BOOLEAN dtc_status_changed = FALSE;
  413  1      
  414  1              if (dtc_code < DTC_CODE_MAX_NUM)
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 8   

  415  1              {
  416  2                      /* DTC Status Bit0 Supported Check */
  417  2                      if (0 != (DTC_STATUS_BIT0_MASK_TF & DTC_STATUS_AVAILABILITY_MASK)) 
  418  2                      {
  419  3                              /* Check test initial */
  420  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  421  3                              {
  422  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  423  4                                      {
  424  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
  425  5                                              dtc_status_changed = TRUE;                                              
  426  5                                      }                       
  427  4                              }
  428  3      
  429  3                              /* Check test passed */
  430  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
  431  3                              {
  432  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  433  4                                      {
  434  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
  435  5                                              dtc_status_changed = TRUE;                                              
  436  5                                      }
  437  4                              }
  438  3      
  439  3                              /* Check test failed */
  440  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  441  3                              {
  442  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  443  4                                      {
  444  5                                              dtc_create_record_cnt[dtc_code].dtc_create_cnt++;       /*error count add*/
  445  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = TRUE;
  446  5      
  447  5                                              DescMgr_SnapshotDataReport(dtc_code);
  448  5                                              //DescMgr_WriteSnapshotDataToEEP(dtc_code);
  449  5      
  450  5                                              dtc_status_changed = TRUE;
  451  5                                              #if defined (DTC_AGING_COUNTER)
  452  5                                                      if (dtc_extern_data_record[dtc_code].exOccuranceCnt != 255u)
  453  5                                                      {
  454  6                                                              dtc_extern_data_record[dtc_code].exOccuranceCnt++;
  455  6                                                      }
  456  5      
  457  5                                                      if (DTC_STATUS_AGING_CNT_RESET != dtc_extern_data_record[dtc_code].exAgingCnt)
  458  5                                                      {
  459  6                                                              dtc_extern_data_record[dtc_code].exAgingCnt = DTC_STATUS_AGING_CNT_RESET;
  460  6                                                              bDtcDataNeedSendToEep = TRUE;
  461  6                                                      
  462  6                                                              dtc_status_changed = TRUE;
  463  6                                                      }
  464  5                                              #endif
  465  5                                      }
  466  4                              }
  467  3      
  468  3                              /* Check test clear */
  469  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  470  3                              {
  471  4                                      /* Clear all counter */
  472  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  473  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  474  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  475  4      
  476  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 9   

  477  4                                      {
  478  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
  479  5                                              dtc_status_changed = TRUE;                                              
  480  5                                      }
  481  4                              }
  482  3      
  483  3                              /* Check test new operation */
  484  3                              if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  485  3                              {
  486  4                                      /* Nothing to do. */
  487  4                              }
  488  3                              
  489  3                      }
  490  2                      else
  491  2                      {
  492  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  493  3                               * Please adapter the default value according to SPEC. */
  494  3                              if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  495  3                              {
  496  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
  497  4                                      dtc_status_changed = TRUE;
  498  4                              }
  499  3                      }
  500  2              }
  501  1      
  502  1              return dtc_status_changed;
  503  1      }
  504         
  505         /***********************************************************************
  506         * FUNCTION    : DescMgr_ProcTestFailedThisOperationCycle
  507         * DESCRIPTION : None
  508         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  509         * RETURN      : None
  510         ***********************************************************************/
  511         BOOLEAN DescMgr_ProcTestFailedThisOperationCycle(INT8U dtc_code, INT8U dtc_test_type)
  512         {
  513  1              BOOLEAN dtc_status_changed = FALSE;
  514  1      
  515  1              if (dtc_code < DTC_CODE_MAX_NUM)
  516  1              {
  517  2                      /* DTC Status Bit1 suppored check */
  518  2                      if (0u != (DTC_STATUS_BIT1_MASK_TFTOC & DTC_STATUS_AVAILABILITY_MASK))
  519  2                      {
  520  3                              /* Check test initial */
  521  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  522  3                              {
  523  4                                      /* Nothing to do. */                    
  524  4                              }
  525  3      
  526  3                              /* Check test passed */
  527  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
  528  3                              {
  529  4                                      /* Nothing to do. */
  530  4                              }
  531  3      
  532  3                              /* Check test failed */
  533  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  534  3                              {
  535  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  536  4                                      {
  537  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = TRUE;
  538  5                                              dtc_status_changed = TRUE;
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 10  

  539  5                                      }
  540  4                              }
  541  3      
  542  3                              /* Check test clear */
  543  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  544  3                              {
  545  4                                      /* Clear all counter */
  546  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  547  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  548  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  549  4      
  550  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  551  4                                      {
  552  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = TRUE;
  553  5                                              dtc_status_changed = TRUE;
  554  5                                      }
  555  4                              }       
  556  3      
  557  3                              /* Check test new operation */
  558  3                              if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  559  3                              {
  560  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  561  4                                      {
  562  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = TRUE;
  563  5                                              dtc_status_changed = TRUE;
  564  5                                      }
  565  4                              }
  566  3                      }
  567  2                      else
  568  2                      {
  569  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  570  3                               * Please adapter the default value according to SPEC. */       
  571  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  572  3                               {
  573  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = FALSE;
  574  4                                      dtc_status_changed = TRUE;
  575  4                               }
  576  3                      }
  577  2              }
  578  1      
  579  1              return dtc_status_changed;
  580  1      }
  581         
  582         /***********************************************************************
  583         * FUNCTION    : DescMgr_ProcPendingDTC
  584         * DESCRIPTION : None
  585         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  586         * RETURN      : None
  587         ***********************************************************************/
  588         BOOLEAN DescMgr_ProcPendingDTC(INT8U dtc_code, INT8U dtc_test_type)
  589         {
  590  1              BOOLEAN dtc_status_changed = FALSE;
  591  1      
  592  1              DESC_MGR_STAT INT32U testDeltaTrip = 0u;
  593  1              testDeltaTrip = delta_trip_count >> dtc_code & 1u;
  594  1      
  595  1              if (dtc_code < DTC_CODE_MAX_NUM)
  596  1              {
  597  2                      /* DTC Status Bit2 suppored check */
  598  2                      if (0u != (DTC_STATUS_BIT1_MASK_TFTOC & DTC_STATUS_AVAILABILITY_MASK))
  599  2                      {
  600  3                              /* Check test initial */
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 11  

  601  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  602  3                              {
  603  4                                      /* Nothing to do. */                    
  604  4                              }
  605  3      #if 0
                                      if (TRUE == bSetIncreaseHistoryPendingCntFlag[dtc_code])
                                      {
                                              bSetIncreaseHistoryPendingCntFlag[dtc_code] = FALSE;
              #if defined (DTC_AGING_COUNTER)
                                              if (255u != dtc_pending_count[dtc_code])
                                              {
                                                      dtc_pending_count[dtc_code]++;
                                                      bDtcDataNeedSendToEep = TRUE;
                                              }
              #endif
                                      }
              #endif
  618  3      
  619  3                              /* Check test passed */
  620  3                              if (0u != (dtc_test_type & DTC_TEST_PASSED))
  621  3                              {
  622  4      #if 0
              #if defined (DTC_AGING_COUNTER)
                                              if (TRUE == bSetClearHistoryPendingCntFlag[dtc_code])
                                              {
                                                      bSetClearHistoryPendingCntFlag[dtc_code] = FALSE;
              
                                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
                                                      {
                                                              if (testDeltaTrip)
                                                              {
                                                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = FALSE;
                                                                      dtc_pending_count[dtc_code] = 0u;
                                                                      DescMgr_SetDeltaTripCounter(dtc_code, FALSE);
              
                                                                      dtc_status_changed = TRUE;
                                                              }
                                                              else
                                                              {
                                                                      DescMgr_SetDeltaTripCounter(dtc_code, FALSE);
                                                              }
                                                      }
                                              }
              #endif  
              #endif
  646  4                              }
  647  3      
  648  3                              /* Check test failed */
  649  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  650  3                              {
  651  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
  652  4                                      {
  653  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = TRUE;
  654  5      #ifdef DTC_AGING_COUNTER
  655  5                                              //if (255u != dtc_pending_count[dtc_code])
  656  5                                              //{
  657  5                                                      //dtc_pending_count[dtc_code]++;
  658  5                                                      //bDtcDataNeedSendToEep = TRUE;
  659  5                                              //}
  660  5      #endif
  661  5                                              dtc_status_changed = TRUE;
  662  5                                      }                               
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 12  

  663  4                              }
  664  3      
  665  3                              /* Check test clear */
  666  3                  if (0u != (dtc_test_type & DTC_TEST_CLEAR))
  667  3                  {
  668  4                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  669  4                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  670  4      
  671  4                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  672  4      
  673  4      
  674  4                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
  675  4                      {
  676  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = FALSE;
  677  5                          dtc_status_changed = TRUE;
  678  5                      }
  679  4                  }
  680  3      
  681  3                              /* Check test new operation */
  682  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  683  3                  {
  684  4                      /* Nothing to do */
  685  4                  }                   
  686  3                      }
  687  2                      else
  688  2                      {
  689  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  690  3                               * Please adapter the default value according to SPEC. */       
  691  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
  692  3                               {
  693  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = FALSE;
  694  4                                      dtc_status_changed = TRUE;
  695  4                               }                      
  696  3                      }
  697  2              }
  698  1              
  699  1              return dtc_status_changed;
  700  1      }
  701         
  702         /***********************************************************************
  703         * FUNCTION    : DescMgr_ProcConfirmedDTC
  704         * DESCRIPTION : None
  705         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  706         * RETURN      : None
  707         ***********************************************************************/
  708         BOOLEAN DescMgr_ProcConfirmedDTC(INT8U dtc_code, INT8U dtc_test_type)
  709         {
  710  1              BOOLEAN dtc_status_changed = FALSE;
  711  1      
  712  1              if (dtc_code < DTC_CODE_MAX_NUM)
  713  1              {
  714  2                      /* DTC Status Bit3 supported check */
  715  2                      if (0u != (DTC_STATUS_BIT3_MASK_CDTC & DTC_STATUS_AVAILABILITY_MASK))
  716  2                      {
  717  3                              /* Check test initial */
  718  3                              if (0u != (dtc_test_type & DTC_TEST_INIT))
  719  3                  {
  720  4                      /* Nothing to do */
  721  4                  }   
  722  3      
  723  3                              /* Check test passed */
  724  3                  if (0u != (dtc_test_type & DTC_TEST_PASSED))
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 13  

  725  3                  {                
  726  4      #if defined (DTC_AGING_COUNTER)
  727  4                      if (TRUE == bSetClearHistoryFaultCntFlag[dtc_code])
  728  4                      {
  729  5                                              bSetClearHistoryFaultCntFlag[dtc_code] = FALSE;
  730  5      
  731  5                                              if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
  732  5                          {
  733  6                              if (dtc_extern_data_record[dtc_code].exAgingCnt >= DTC_STATUS_AGING_CNT_MAX)
  734  6                              {
  735  7                                  dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = FALS
             -E;
  736  7                                                              
  737  7                                                              /* DTC aging counter and DTC occurrence counter will be reset to 0 by self healing */
  738  7                                  dtc_extern_data_record[dtc_code].exAgingCnt = DTC_STATUS_AGING_CNT_RESET;
  739  7                                                              dtc_extern_data_record[dtc_code].exOccuranceCnt = 0u;
  740  7                                                              
  741  7                                                              #if 0  // no pending and aged counter requirement
                                          dtc_pending_count[dtc_code] = 0u;
              
                                                                      /* When the aging counter is up to self healing value, DTC will be moved out from current memory */
                                                                      //CanDiagApp_DTC_StatusDataReport(dtc_code, DTC_TEST_CLEAR);
                                                                      
                                                                      if(dtc_aged_count[dtc_code] < 255u)
                                                                      {
                                                                              /* When the DTC's aging counter is up to set-value, Aged counter will be increased by 1. */
                                                                              dtc_aged_count[dtc_code]++;
                                                                      }
                                                                      else
                                                                      {
                                                                              /* If the aged counter is up to 255, it will keep to 255. */
                                                                              dtc_aged_count[dtc_code] = 255u;
                                                                      }
                                                                      #endif
  758  7                                  dtc_status_changed = TRUE;
  759  7                              }
  760  6                              else
  761  6                              {
  762  7                                      /* ECU error never occur during the last whole operation cycle, driving cycle, or
             - warm-up cycle.The DTC aging
  763  7                                                               * counter value shall be increased by 1. */
  764  7                                  dtc_extern_data_record[dtc_code].exAgingCnt++;
  765  7                                  dtc_status_changed = TRUE;
  766  7                              }
  767  6                          }
  768  5                      }
  769  4      #endif
  770  4                  }
  771  3      
  772  3                              /* Check test failed */
  773  3                              if (0u != (dtc_test_type & DTC_TEST_FAILED))
  774  3                  {
  775  4                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
  776  4                      {                   
  777  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = TRUE;
  778  5                          dtc_extern_data_record[dtc_code].exAgingCnt = DTC_STATUS_AGING_CNT_RESET;
  779  5                          
  780  5                          dtc_status_changed = TRUE;
  781  5                      }
  782  4                  }
  783  3      
  784  3                              /* Check test clear */
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 14  

  785  3                  if (0u != (dtc_test_type & DTC_TEST_CLEAR))
  786  3                  {
  787  4                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  788  4                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  789  4                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  790  4      
  791  4                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
  792  4                      {
  793  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = FALSE;
  794  5                          dtc_status_changed = TRUE;
  795  5                      }
  796  4                  }
  797  3      
  798  3                              /* Check test new operation */
  799  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  800  3                  {
  801  4                      /* Nothing to do */
  802  4                  }
  803  3                      }
  804  2                      else
  805  2                      {
  806  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  807  3                               * Please adapter the default value according to SPEC. */
  808  3                              if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
  809  3                  {
  810  4                      dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = FALSE;
  811  4                      dtc_status_changed = TRUE;
  812  4                  }                   
  813  3                      }
  814  2              }
  815  1              
  816  1              return dtc_status_changed;
  817  1      }
  818         
  819         /***********************************************************************
  820         * FUNCTION    : DescMgr_ProcTestNotCompletedSinceLastClear
  821         * DESCRIPTION : None
  822         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  823         * RETURN      : None
  824         ***********************************************************************/
  825         BOOLEAN DescMgr_ProcTestNotCompletedSinceLastClear(INT8U dtc_code, INT8U dtc_test_type)
  826         {
  827  1              BOOLEAN dtc_status_changed = FALSE;
  828  1      
  829  1              if (dtc_code < DTC_CODE_MAX_NUM)
  830  1              {
  831  2                      /* DTC Status Bit4 supported check */
  832  2                      if (0u != (DTC_STATUS_BIT4_MASK_TNCSLC & DTC_STATUS_AVAILABILITY_MASK))
  833  2                      {
  834  3                              /* Check test initial */
  835  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  836  3                              {
  837  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear
             -)
  838  4                                      {
  839  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = TRUE;
  840  5                                              dtc_status_changed = TRUE;
  841  5                                      }
  842  4                              }
  843  3      
  844  3                              /* Check test passed */
  845  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 15  

  846  3                              {
  847  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear)
  848  4                                      {
  849  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = FALSE;
  850  5                                              dtc_status_changed = TRUE;
  851  5                                      }       
  852  4                              }
  853  3      
  854  3                              /* Check test failed */
  855  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  856  3                              {
  857  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear)
  858  4                                      {
  859  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = FALSE;
  860  5                                              dtc_status_changed = TRUE;
  861  5                                      }       
  862  4                              }       
  863  3      
  864  3                              /* Check test clear */
  865  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  866  3                              {
  867  4                                      /* Clear all counter */
  868  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  869  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  870  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  871  4      
  872  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear
             -)
  873  4                                      {
  874  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = TRUE;
  875  5                                              dtc_status_changed = TRUE;
  876  5                                      }
  877  4                              }       
  878  3      
  879  3                              /* Check test new operation */
  880  3                  if (0u != (dtc_test_type&DTC_TEST_NEW_OPR))
  881  3                  {
  882  4                      /* Nothing to do */
  883  4                  }                   
  884  3                      }
  885  2                      else
  886  2                      {
  887  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  888  3                               * Please adapter the default value according to SPEC. */       
  889  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear)
  890  3                               {
  891  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = FALSE;
  892  4                                      dtc_status_changed = TRUE;
  893  4                               }                      
  894  3                      }
  895  2              }
  896  1              
  897  1              return dtc_status_changed;
  898  1      }
  899         
  900         /***********************************************************************
  901         * FUNCTION    : DescMgr_ProcTestFailedSinceLastClear
  902         * DESCRIPTION : None
  903         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  904         * RETURN      : None
  905         ***********************************************************************/
  906         BOOLEAN DescMgr_ProcTestFailedSinceLastClear(INT8U dtc_code, INT8U dtc_test_type)
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 16  

  907         {
  908  1              BOOLEAN dtc_status_changed = FALSE;
  909  1      
  910  1              if (dtc_code < DTC_CODE_MAX_NUM)
  911  1              {
  912  2                      /* DTC Status Bit5 supported check */
  913  2                      if (0u != (DTC_STATUS_BIT5_MASK_TFSLC & DTC_STATUS_AVAILABILITY_MASK))
  914  2                      {
  915  3                              /* Check test initial */
  916  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  917  3                              {
  918  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  919  4                                      {
  920  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = FALSE;
  921  5                                              dtc_status_changed = TRUE;
  922  5                                      }
  923  4                              }
  924  3      
  925  3                              /* Check test passed */
  926  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
  927  3                              {
  928  4                                      /* Nothing to do. */
  929  4                              }
  930  3      
  931  3                              /* Check test failed */
  932  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  933  3                              {
  934  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  935  4                                      {
  936  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = TRUE;
  937  5                                              dtc_status_changed = TRUE;
  938  5                                      }       
  939  4                              }       
  940  3      
  941  3                              /* Check test clear */
  942  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  943  3                              {
  944  4                                      /* Clear all counter */
  945  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  946  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  947  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  948  4      
  949  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  950  4                                      {
  951  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = FALSE;
  952  5                                              dtc_status_changed = TRUE;
  953  5                                      }
  954  4                              }       
  955  3      
  956  3                              /* Check test new operation */
  957  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  958  3                  {
  959  4                      /* Nothing to do */
  960  4                  }                   
  961  3                      }
  962  2                      else
  963  2                      {
  964  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  965  3                               * Please adapter the default value according to SPEC. */       
  966  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  967  3                               {
  968  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = FALSE;
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 17  

  969  4                                      dtc_status_changed = TRUE;
  970  4                               }                      
  971  3                      }
  972  2              }
  973  1      
  974  1              return dtc_status_changed;
  975  1      }
  976         
  977         /***********************************************************************
  978         * FUNCTION    : DescMgr_ProcTestNotCompletedThisOperationCycle
  979         * DESCRIPTION : None
  980         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  981         * RETURN      : None
  982         ***********************************************************************/
  983         BOOLEAN DescMgr_ProcTestNotCompletedThisOperationCycle(INT8U dtc_code, INT8U dtc_test_type)
  984         {
  985  1              BOOLEAN dtc_status_changed = FALSE;
  986  1      
  987  1              if (dtc_code < DTC_CODE_MAX_NUM)
  988  1              {
  989  2                      /* DTC Status Bit6 supported check */
  990  2                      if (0u != (DTC_STATUS_BIT6_MASK_TNCTOC & DTC_STATUS_AVAILABILITY_MASK))
  991  2                      {
  992  3                              /* Check test initial */
  993  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  994  3                              {
  995  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationC
             -ycle)
  996  4                                      {
  997  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = TRUE;
  998  5                                              dtc_status_changed = TRUE;
  999  5                                      }
 1000  4                              }
 1001  3      
 1002  3                              /* Check test passed */
 1003  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
 1004  3                              {
 1005  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCy
             -cle)
 1006  4                                      {
 1007  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = FALSE
             -;
 1008  5                                              dtc_status_changed = TRUE;
 1009  5                                      }
 1010  4                              }
 1011  3      
 1012  3                              /* Check test failed */
 1013  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
 1014  3                              {
 1015  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCy
             -cle)
 1016  4                                      {
 1017  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = FALSE
             -;
 1018  5                                              dtc_status_changed = TRUE;
 1019  5                                      }       
 1020  4                              }       
 1021  3      
 1022  3                              /* Check test clear */
 1023  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
 1024  3                              {
 1025  4                                      /* Clear all counter */
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 18  

 1026  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
 1027  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
 1028  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
 1029  4      
 1030  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationC
             -ycle)
 1031  4                                      {
 1032  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = TRUE;
 1033  5                                              dtc_status_changed = TRUE;
 1034  5                                      }
 1035  4                              }       
 1036  3      
 1037  3                              /* Check test new operation */
 1038  3                  if (0u != (dtc_test_type&DTC_TEST_NEW_OPR))
 1039  3                  {
 1040  4                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedTh
             -isOperationCycle)
 1041  4                      {
 1042  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperati
             -onCycle = TRUE;
 1043  5                          dtc_status_changed = TRUE;
 1044  5                      }
 1045  4                  }                   
 1046  3                      }
 1047  2                      else
 1048  2                      {
 1049  3                              /* DTC Status Bit not supported, set to a default value if needed. 
 1050  3                               * Please adapter the default value according to SPEC. */       
 1051  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCy
             -cle)
 1052  3                               {
 1053  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = FALSE
             -;
 1054  4                                      dtc_status_changed = TRUE;
 1055  4                               }                      
 1056  3                      }
 1057  2              }
 1058  1      
 1059  1              return dtc_status_changed;
 1060  1      }
 1061         
 1062         /***********************************************************************
 1063         * FUNCTION    : DescMgr_ProcWarningIndicatorRequested
 1064         * DESCRIPTION : None
 1065         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
 1066         * RETURN      : None
 1067         ***********************************************************************/
 1068         BOOLEAN DescMgr_ProcWarningIndicatorRequested(INT8U dtc_code, INT8U dtc_test_type)
 1069         {
 1070  1              BOOLEAN dtc_status_changed = FALSE;
 1071  1      
 1072  1          if (dtc_code < DTC_CODE_MAX_NUM)
 1073  1          {
 1074  2                      /* DTC Status Bit7 supported check */
 1075  2                      if (0u != (DTC_STATUS_BIT7_MASK_WIR & DTC_STATUS_AVAILABILITY_MASK)) 
 1076  2              {
 1077  3                              /* Check test initial */
 1078  3                  if (0u != (dtc_test_type & DTC_TEST_INIT))
 1079  3                  {
 1080  4                                      /* Not implement yet */
 1081  4                  }
 1082  3      
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 19  

 1083  3                              /* Check test passed */
 1084  3                  if (0u != (dtc_test_type & DTC_TEST_PASSED))
 1085  3                  {
 1086  4                      /* Not implement yet */
 1087  4                  }
 1088  3      
 1089  3                              /* Check test failed */                 
 1090  3                  if (0u != (dtc_test_type & DTC_TEST_FAILED))
 1091  3                  {
 1092  4                      /* Not implement yet */
 1093  4                  }
 1094  3      
 1095  3                              /* Check test clear */                  
 1096  3                  if (0u != (dtc_test_type & DTC_TEST_CLEAR))
 1097  3                  {
 1098  4                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
 1099  4                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
 1100  4                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
 1101  4      
 1102  4                      /* Not implement yet */
 1103  4                  }
 1104  3      
 1105  3                              /* Check test new operation */
 1106  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
 1107  3                  {
 1108  4                      /* Not implement yet */
 1109  4                  }    
 1110  3              }
 1111  2              else
 1112  2              {
 1113  3                              /* DTC Status Bit not supported, set to a default value if needed. 
 1114  3                               * Please adapter the default value according to SPEC. */
 1115  3                  if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.warningIndicatorRequest
             -ed)
 1116  3                  {
 1117  4                      dtc_current_status_record[dtc_code].dtc_status.status_bits.warningIndicatorRequested = FAL
             -SE;
 1118  4                      dtc_status_changed = TRUE;
 1119  4                  }
 1120  3              }
 1121  2          }
 1122  1              
 1123  1              return dtc_status_changed;
 1124  1      }
 1125         
 1126         /*****************************************************************************************
 1127         *  Name        : DescMgr_ExtendDataReport
 1128         *  Description :     
 1129         *  Parameter   : INT8U dtc_code
 1130         *  Returns     : none 
 1131         *****************************************************************************************/
 1132         DESC_MGR_STAT void DescMgr_ExtendDataReport(INT8U dtc_code)
 1133         {
 1134  1              // TODO:
 1135  1      }
*** WARNING C47 IN LINE 1132 OF src\bsw\desc\desc_mgr.c: 'dtc_code': unreferenced parameter
 1136         
 1137         /*****************************************************************************************
 1138         *  Name        : DescMgr_SnapshotDataReport
 1139         *  Description :     
 1140         *  Parameter   : INT8U dtc_code
 1141         *  Returns     : none 
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 20  

 1142         *****************************************************************************************/
 1143         DESC_MGR_STAT void DescMgr_SnapshotDataReport(INT8U dtc_code)
 1144         {
 1145  1              // TODO:Snapshot data need to conversion
 1146  1      
 1147  1              const T_ADC_APP *ptr = AdcApp_SampleData();
 1148  1      
 1149  1              // DF00: power voltage
 1150  1              dtc_snapshot_data_record[dtc_code].snapPowerVoltage = (INT8U)(ptr->vehiclePowerVoltage / 100u);
 1151  1      
 1152  1              // DF01: ECU temperature
 1153  1              dtc_snapshot_data_record[dtc_code].snapTemperature = ptr->environmentTemperature;
 1154  1      
 1155  1              // DF02: Cylinder Travel
 1156  1              dtc_snapshot_data_record[dtc_code].snapCylinderTravel_HB = (INT8U)((ptr->mainCylinderLocation1 & 0xFF00)>
             ->8);
 1157  1              dtc_snapshot_data_record[dtc_code].snapCylinderTravel_LB = (INT8U)(ptr->mainCylinderLocation1 & 0x00FF);
 1158  1      
 1159  1              // DF03: pedal Travel
 1160  1              dtc_snapshot_data_record[dtc_code].snapPedalTravel_HB = (INT8U)((ptr->brakePedalLocation1 & 0xFF00)>>8);
 1161  1              dtc_snapshot_data_record[dtc_code].snapPedalTravel_LB = (INT8U)(ptr->brakePedalLocation1 & 0x00FF);
 1162  1      
 1163  1              // DF04: motor voltage
 1164  1              dtc_snapshot_data_record[dtc_code].snapMotorVoltage = (INT8U)(ptr->brakeMotorVlinkVoltage / 100u);
 1165  1      
 1166  1              // DF05: motor current
 1167  1              dtc_snapshot_data_record[dtc_code].snapMotorCurrent_HB = (INT8U)((ptr->brakeMotorCurrent & 0xFF00)>>8);
 1168  1              dtc_snapshot_data_record[dtc_code].snapMotorCurrent_LB = (INT8U)(ptr->brakeMotorCurrent & 0x00FF);
 1169  1      
 1170  1              // DF06: Vehicle speed
 1171  1              dtc_snapshot_data_record[dtc_code].snapVehicleSpeed = (INT8U)(VCU_VehicleSpeed / 100u);
 1172  1      
 1173  1              // DF07: gear position
 1174  1              dtc_snapshot_data_record[dtc_code].snapGearPosition = 0xFF;
 1175  1      
 1176  1              // DF08: brake mode
 1177  1              dtc_snapshot_data_record[dtc_code].snapBrakeMode = BrakeSysMode;
 1178  1      
 1179  1              // DF09: target pressure
 1180  1              dtc_snapshot_data_record[dtc_code].snapTargetPressure = g_wireControlObjPressure;
 1181  1      
 1182  1              // DF10: actual pressure
 1183  1              dtc_snapshot_data_record[dtc_code].snapActualPressure = g_wireControlActualPressure;
 1184  1      
 1185  1              // DF11: reserved
 1186  1              dtc_snapshot_data_record[dtc_code].snapRelaySwitchStatus = (g_MainRelaySts & 0x01)
 1187  1                                                                                                                                      | ((g_PedalPowerSts & 0x01) << 1)
 1188  1                                                                                                                                      | ((g_CylinderPowerSts & 0x01) << 2);
*** WARNING C192 IN LINE 1188 OF src\bsw\desc\desc_mgr.c: '=': value truncated
 1189  1              dtc_snapshot_data_record[dtc_code].snapPreDriveStatus = (g_PredriverEnableSts & 0x01)
 1190  1                                                                                                                                      | ((g_inPreDriverErrorSts & 0x01) << 1)
 1191  1                                                                                                                                      | ((gRTE_wireControlPressureLoopFlag & 0x01) << 2)
 1192  1                                                                                                                                      | ((g_PressureSensorFaultFlag & 0x01) << 3);
*** WARNING C192 IN LINE 1192 OF src\bsw\desc\desc_mgr.c: '=': value truncated
 1193  1      
 1194  1              return;
 1195  1      }
 1196         
 1197         /******************************************************************************
 1198         * Name         :  DescMgr_SetDeltaTripCounter 
 1199         * Called by    :   
 1200         * Preconditions:  None
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 21  

 1201         * Parameters   :  None
 1202         * Description  :  uidq2008
 1203         ******************************************************************************/
 1204         DESC_MGR_STAT void DescMgr_SetDeltaTripCounter(INT8U dtc_code, BOOLEAN delta_Trip_flag)
 1205         {
 1206  1         if (TRUE == delta_Trip_flag)
 1207  1         {
 1208  2              delta_trip_count |= (1u << dtc_code);
 1209  2         }
 1210  1         else
 1211  1         {
 1212  2              delta_trip_count &= ~(1u << dtc_code);
 1213  2         }
 1214  1      }
 1215         
 1216         /***********************************************************************
 1217         * FUNCTION    : DescMgr_CanDiagDtcRecordBodyEnableCheck
 1218         * DESCRIPTION : 
 1219         * INPUTS      : none
 1220         * RETURN      : none
 1221         ***********************************************************************/
 1222         BOOLEAN DescMgr_CanDiagDtcRecordBodyEnableCheck(void)
 1223         {
 1224  1          return (((dtc_record_enable_mask & DTC_RECORD_ENALBE_BDY) != 0u) ? 1u : 0u);
 1225  1      }
 1226         
 1227         
 1228         /***********************************************************************
 1229         * FUNCTION    : DescMgr_CanDiagDtcRecordNmEnableCheck
 1230         * DESCRIPTION : 
 1231         * INPUTS      : none
 1232         * RETURN      : none
 1233         ***********************************************************************/
 1234         BOOLEAN DescMgr_CanDiagDtcRecordNmEnableCheck(void)
 1235         {
 1236  1          return (((dtc_record_enable_mask & DTC_RECORD_ENABLE_NM) != 0u) ? 1u : 0u);
 1237  1      }
 1238         
 1239         
 1240         /***********************************************************************
 1241         * FUNCTION    : DescMgr_CanDiagDtcRecordOpVoltEnableCheck
 1242         * DESCRIPTION : 
 1243         * INPUTS      : none
 1244         * RETURN      : none
 1245         ***********************************************************************/
 1246         BOOLEAN DescMgr_CanDiagDtcRecordOpVoltEnableCheck(void)
 1247         {
 1248  1          return (((dtc_record_enable_mask & DTC_RECORD_ENABLE_OP_VOLT) != 0u) ? 1u : 0u);
 1249  1      }
 1250         
 1251         /**** $85 ****/
 1252         
 1253         /***********************************************************************
 1254         * FUNCTION    : DescMgr_CanDiagDtcControlSettingOn
 1255         * DESCRIPTION : TRUE:means control dtc setting is on,
 1256         *               FALSE:means control dtc setting is off.
 1257         * INPUTS      : none
 1258         * RETURN      : none
 1259         ***********************************************************************/
 1260         void DescMgr_CanDiagDtcControlSettingOn(void)
 1261         {
 1262  1          dtc_control_setting_on_off = TRUE;
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 22  

 1263  1      }
 1264         
 1265         /***********************************************************************
 1266         * FUNCTION    : DescMgr_CanDiagDtcControlSettingOff
 1267         * DESCRIPTION : TRUE:means control dtc setting is on,
 1268         *               FALSE:means control dtc setting is off.
 1269         * INPUTS      : none
 1270         * RETURN      : none
 1271         ***********************************************************************/
 1272         void DescMgr_CanDiagDtcControlSettingOff(void)
 1273         {
 1274  1          dtc_control_setting_on_off = FALSE;
 1275  1      }
 1276         
 1277         /***********************************************************************
 1278         * FUNCTION    : DescMgr_CanDiagDtcControlSettingCheck
 1279         * DESCRIPTION : TRUE:means control dtc setting is on,
 1280         *               FALSE:means control dtc setting is off.
 1281         * INPUTS      : none
 1282         * RETURN      : none
 1283         ***********************************************************************/
 1284         BOOLEAN DescMgr_CanDiagDtcControlSettingCheck(void)
 1285         {
 1286  1          return dtc_control_setting_on_off;
 1287  1      }
 1288         
 1289         /**** $14 ****/
 1290         /***********************************************************************
 1291         * FUNCTION    : DescMgr_CanDiagClearDtcDataStart
 1292         * DESCRIPTION : none
 1293         * INPUTS      : none
 1294         * RETURN      : none
 1295         ***********************************************************************/
 1296         void DescMgr_CanDiagClearDtcDataStart(void)
 1297         {
 1298  1          /* do not care about last time, just reset the whole clear things */
 1299  1          dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_START; /* clear begin */
 1300  1          
 1301  1          /* Adjust dtc record enable mask */
 1302  1          DescMgr_CanDigDtcRecordEnableAdjust();
 1303  1      }
 1304         
 1305         /***********************************************************************
 1306         * FUNCTION    : DescMgr_CanDiagDtcStatusServiceClearAll
 1307         * DESCRIPTION : Do not clear all the dtc status at the same time, it would cost worse CPU/thread load,
 1308         *               So just separate the clear action, Called by desc_delay_service_task to do this job.
 1309         * INPUTS      : none
 1310         * RETURN      : none
 1311         ***********************************************************************/
 1312         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearAll(void)
 1313         {
 1314  1          BOOLEAN clear_finished = FALSE;
 1315  1      
 1316  1          if (dtc_status_svc14_clear_counter < DTC_CODE_MAX_NUM)
 1317  1          {
 1318  2                      DescMgr_DtcStatusDataReport(dtc_status_svc14_clear_counter, DTC_TEST_CLEAR);
 1319  2      
 1320  2      #ifdef DTC_AGING_COUNTER
 1321  2                      memset(dtc_extern_data_record, 0u, sizeof(dtc_extern_data_record));
 1322  2                      //memset(dtc_aging_count, DTC_STATUS_AGING_CNT_RESET, DTC_CODE_MAX_NUM);
 1323  2                      //memset(dtc_pending_count, DTC_STATUS_AGING_CNT_RESET, DTC_CODE_MAX_NUM);      
 1324  2                      //memset(dtc_occurance_count, DTC_STATUS_AGING_CNT_RESET, DTC_CODE_MAX_NUM);
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 23  

 1325  2      #endif
 1326  2              dtc_status_svc14_clear_counter++;
 1327  2                      clear_finished = FALSE;
 1328  2          }
 1329  1          else
 1330  1          {
 1331  2                      /* Adjust dtc record enable mask */
 1332  2              DescMgr_CanDigDtcRecordEnableAdjust();    
 1333  2              dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_FINISHED;  
 1334  2              clear_finished = TRUE;
 1335  2          }
 1336  1          
 1337  1          return clear_finished;
 1338  1      }
 1339         
 1340         /***********************************************************************
 1341         * FUNCTION    : DescMgr_CanDiagDtcStatusServiceClearFinished
 1342         * DESCRIPTION : none                        
 1343         * INPUTS      : none
 1344         * RETURN      : none
 1345         ***********************************************************************/
 1346         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearFinished(void)
 1347         {
 1348  1          return ((DTC_STATUS_SVC14_CLEAR_FINISHED == dtc_status_svc14_clear_counter) ? 1u : 0u);
 1349  1      }
 1350         
 1351         /***********************************************************************
 1352         * FUNCTION    : DescMgr_CanDigDtcRecordEnableAdjust
 1353         * DESCRIPTION : none
 1354         * INPUTS      : none
 1355         * RETURN      : none
 1356         ***********************************************************************/
 1357         DESC_MGR_STAT void DescMgr_CanDigDtcRecordEnableAdjust(void)
 1358         {
 1359  1          /* diagnosis function start-up init delay according to vehicle manufacturer */
 1360  1          if (CAN_DIAG_INIT_DELAY_TIMEOUT != can_diag_init_delay_timer)
 1361  1          {
 1362  2              /* all dtc record disable */
 1363  2              dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
 1364  2              
 1365  2              return;
 1366  2          }
 1367  1          else
 1368  1          {
 1369  2              /* Disable here, because we do not know the other situations, so let other judgement following to 
             -do this job. */
 1370  2              dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
 1371  2          }
 1372  1      
 1373  1          /* dtc eeprom init delay */
 1374  1          if (DTC_INIT_STEP_FINISHED != dtc_eeprom_init_step)
 1375  1          {
 1376  2              /* all dtc record disable */
 1377  2              dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
 1378  2              
 1379  2              return;    
 1380  2          }
 1381  1          else
 1382  1          {
 1383  2              /* Disable here, because we do not know the other situations, so let other judgement following to 
             -do this job. */
 1384  2              dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;        
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 24  

 1385  2          }
 1386  1      
 1387  1          /* service $14 clear dtc eeprom init delay */
 1388  1          if (DTC_STATUS_SVC14_CLEAR_FINISHED != dtc_status_svc14_clear_counter)
 1389  1          {
 1390  2              /* all dtc record disable */
 1391  2              dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
 1392  2              
 1393  2              return;    
 1394  2          }
 1395  1          else
 1396  1          {
 1397  2              /* Disable here, because we do not know the other situations, so let other judgement following to 
             -do this job. */
 1398  2              dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;        
 1399  2          }
 1400  1      
 1401  1          /* other delay according to vehicle manufacturer */
 1402  1              // TODO:System power voltage status 9-16V.      
 1403  1          if (1)  /*if power out range of [9-16v],stop candiag*/
 1404  1          {
 1405  2              dtc_record_enable_mask = (dtc_record_enable_mask | DTC_RECORD_ENALBE_BDY);//DTC_RECORD_ENABLE_OP_V
             -OLT
 1406  2      
 1407  2              if (CAN_DIAG_BAT_VOLT_RECOVER_DELAY_TIMEOUT != can_diag_bat_volt_recover_delay_timer)
 1408  2              {
 1409  3                  dtc_record_enable_mask = (dtc_record_enable_mask & (~DTC_RECORD_ENABLE_NM));
 1410  3                  dtc_record_enable_mask = (dtc_record_enable_mask & (~DTC_RECORD_ENALBE_BDY));
 1411  3      
 1412  3                  return;
 1413  3              }
 1414  2              else
 1415  2              {
 1416  3                  dtc_record_enable_mask = (dtc_record_enable_mask | DTC_RECORD_ENALBE_BDY);
 1417  3      
 1418  3                  if (CAN_DIAG_NM_INIT_DELAY_TIMEOUT == can_diag_init_nm_delay_timer)
 1419  3                  {
 1420  4                      dtc_record_enable_mask = (dtc_record_enable_mask | DTC_RECORD_ENABLE_NM);
 1421  4                  }
 1422  3                  else
 1423  3                  {
 1424  4                      dtc_record_enable_mask = (dtc_record_enable_mask & (~DTC_RECORD_ENABLE_NM));
 1425  4                  }
 1426  3              }
 1427  2          }
 1428  1          else
 1429  1          {
 1430  2              dtc_record_enable_mask = (dtc_record_enable_mask|DTC_RECORD_ENALBE_BDY);//DTC_RECORD_ENABLE_OP_VOL
             -T
 1431  2          }
 1432  1      
 1433  1      }
 1434         
 1435         /**** $19 ****/
 1436         
 1437         /***********************************************************************
 1438         * FUNCTION    : DescMgr_CanDiagGetDtcCount
 1439         * DESCRIPTION : none
 1440         * INPUTS      : INT8U status_mask
 1441         * RETURN      : none
 1442         ***********************************************************************/
 1443         INT16U DescMgr_CanDiagGetDtcCount(INT8U status_mask)
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 25  

 1444         {
 1445  1          INT16U dtc_count = 0u;
 1446  1          INT8U record_count = 0u;
 1447  1      
 1448  1          for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
 1449  1          {
 1450  2              if ((dtc_current_status_record[record_count].dtc_status.status_byte & status_mask) != 0u)
 1451  2              {
 1452  3                  dtc_count++;
 1453  3              }
 1454  2          }
 1455  1          
 1456  1          return dtc_count;
 1457  1      }
 1458         
 1459         /***********************************************************************
 1460         * FUNCTION    : DescMgr_CanDiagGetDtcStatusByStatusMask
 1461         * DESCRIPTION : none
 1462         * INPUTS      : INT8U *p_dtc, INT8U status_mask
 1463         * RETURN      : none
 1464         ***********************************************************************/
 1465         INT16U DescMgr_CanDiagGetDtcStatusByStatusMask(INT8U *p_dtc, INT8U status_mask)
 1466         {
 1467  1          INT16U dtc_count = 0u;
 1468  1          INT8U record_count = 0u;
 1469  1      
 1470  1          for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
 1471  1          {
 1472  2              if ((dtc_current_status_record[record_count].dtc_status.status_byte & status_mask) != 0u)
 1473  2              {
 1474  3                  *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_high_byte;
 1475  3                  *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_middle_byte;
 1476  3                  *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_low_byte;
 1477  3                  *p_dtc++ = dtc_current_status_record[record_count].dtc_status.status_byte;
 1478  3                  
 1479  3                  dtc_count++;
 1480  3              }
 1481  2          }
 1482  1          
 1483  1          return dtc_count;
 1484  1      }
 1485         
 1486         /***********************************************************************
 1487         * FUNCTION    : DescMgr_CanDiagGetSupportedDtc
 1488         * DESCRIPTION : none
 1489         * INPUTS      : *p_dtc
 1490         * RETURN      : none
 1491         ***********************************************************************/
 1492         INT16U DescMgr_CanDiagGetSupportedDtc(INT8U *p_dtc)
 1493         {
 1494  1          INT16U dtc_count = 0u;
 1495  1          INT8U record_count = 0u;
 1496  1      
 1497  1          for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
 1498  1          {
 1499  2              *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_high_byte;
 1500  2              *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_middle_byte;
 1501  2              *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_low_byte;
 1502  2              *p_dtc++ = dtc_current_status_record[record_count].dtc_status.status_byte;
 1503  2              
 1504  2              dtc_count++;
 1505  2          }
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 26  

 1506  1              
 1507  1          return dtc_count;
 1508  1      }
 1509         
 1510         /***********************************************************************
 1511         * FUNCTION    : DescMgr_CanDiagGetSnapshotData
 1512         * DESCRIPTION : none
 1513         * INPUTS      : INT8U *res_data, INT8U *req_dtc
 1514         * RETURN      : none
 1515         ***********************************************************************/
 1516         void DescMgr_CanDiagGetSnapshotData(INT8U *res_data, INT8U *req_dtc)
 1517         {
 1518  1          INT8U record_count;
 1519  1              
 1520  1              for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)   
 1521  1          {
 1522  2              if ((dtc_code_data[record_count].dtc_bytes.dtc_high_byte == req_dtc[2]) 
 1523  2                       && (dtc_code_data[record_count].dtc_bytes.dtc_middle_byte == req_dtc[3])
 1524  2                       && (dtc_code_data[record_count].dtc_bytes.dtc_low_byte == req_dtc[4]))
 1525  2              {
 1526  3                      if ((dtc_current_status_record[record_count].dtc_status.status_byte & DTC_STATUS_AVAILABILITY_MAS
             -K) != 0)
 1527  3                      {
 1528  4                              DescMgr_ReturnSnapshotData(res_data, record_count);
 1529  4                              }
 1530  3                  else
 1531  3                  {
 1532  4                      DescMgr_ReturnSnapshotDataDefault(res_data, record_count);
 1533  4                  }
 1534  3              }
 1535  2          }
 1536  1      }
 1537         
 1538         /***********************************************************************
 1539         * FUNCTION    : DescMgr_ReturnSnapshotData
 1540         * DESCRIPTION : none
 1541         * INPUTS      : INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number
 1542         * RETURN      : none
 1543         ***********************************************************************/
 1544         DESC_MGR_STAT void DescMgr_ReturnSnapshotData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number)
 1545         {
 1546  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1547  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;          /* DTCMiddleByte */
 1548  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1549  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */     
 1550  1          *(res_data+4) = 0x01; /* DTC Snapshot Record Number */   
 1551  1          *(res_data+5) = 0x0C; /* DTC Snapshot Record Number Of Identifiers */
 1552  1      
 1553  1          *(res_data+6) = 0xDF;
 1554  1          *(res_data+7) = 0x00;
 1555  1          *(res_data+8) = dtc_snapshot_data_record[dtc_number].snapPowerVoltage;
 1556  1      
 1557  1              *(res_data+9) = 0xDF;
 1558  1          *(res_data+10) = 0x01;
 1559  1          *(res_data+11) = dtc_snapshot_data_record[dtc_number].snapTemperature;
 1560  1      
 1561  1              *(res_data+12) = 0xDF;
 1562  1          *(res_data+13) = 0x02;
 1563  1          *(res_data+14) = dtc_snapshot_data_record[dtc_number].snapCylinderTravel_HB;
 1564  1              *(res_data+15) = dtc_snapshot_data_record[dtc_number].snapCylinderTravel_LB;
 1565  1      
 1566  1              *(res_data+16) = 0xDF;
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 27  

 1567  1          *(res_data+17) = 0x03;
 1568  1          *(res_data+18) = dtc_snapshot_data_record[dtc_number].snapPedalTravel_HB;
 1569  1              *(res_data+19) = dtc_snapshot_data_record[dtc_number].snapPedalTravel_LB;
 1570  1      
 1571  1              *(res_data+20) = 0xDF;
 1572  1          *(res_data+21) = 0x04;
 1573  1          *(res_data+22) = dtc_snapshot_data_record[dtc_number].snapMotorVoltage;
 1574  1      
 1575  1              *(res_data+23) = 0xDF;
 1576  1          *(res_data+24) = 0x05;
 1577  1          *(res_data+25) = dtc_snapshot_data_record[dtc_number].snapMotorCurrent_HB;
 1578  1              *(res_data+26) = dtc_snapshot_data_record[dtc_number].snapMotorCurrent_LB;
 1579  1      
 1580  1              *(res_data+27) = 0xDF;
 1581  1          *(res_data+28) = 0x06;
 1582  1          *(res_data+29) = dtc_snapshot_data_record[dtc_number].snapVehicleSpeed;
 1583  1      
 1584  1              *(res_data+30) = 0xDF;
 1585  1          *(res_data+31) = 0x07;
 1586  1          *(res_data+32) = dtc_snapshot_data_record[dtc_number].snapGearPosition;
 1587  1      
 1588  1              *(res_data+33) = 0xDF;
 1589  1          *(res_data+34) = 0x08;
 1590  1          *(res_data+35) = dtc_snapshot_data_record[dtc_number].snapBrakeMode;
 1591  1      
 1592  1              *(res_data+36) = 0xDF;
 1593  1          *(res_data+37) = 0x09;
 1594  1          *(res_data+38) = dtc_snapshot_data_record[dtc_number].snapTargetPressure;
 1595  1              
 1596  1          *(res_data+39) = 0xDF;
 1597  1          *(res_data+40) = 0x0A;
 1598  1          *(res_data+41) = dtc_snapshot_data_record[dtc_number].snapActualPressure;
 1599  1      
 1600  1              *(res_data+42) = 0xDF;
 1601  1          *(res_data+43) = 0x0B;
 1602  1          *(res_data+44) = dtc_snapshot_data_record[dtc_number].snapRelaySwitchStatus;
 1603  1              *(res_data+45) = dtc_snapshot_data_record[dtc_number].snapPreDriveStatus;
 1604  1      
 1605  1      }
 1606         
 1607         /***********************************************************************
 1608         * FUNCTION    : DescMgr_ReturnSnapshotDataDefault
 1609         * DESCRIPTION : none
 1610         * INPUTS      : INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number
 1611         * RETURN      : none
 1612         ***********************************************************************/
 1613         DESC_MGR_STAT void DescMgr_ReturnSnapshotDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number)
 1614         {
 1615  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1616  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;          /* DTCMiddleByte */
 1617  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1618  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */     
 1619  1          *(res_data+4) = 0x01; /* DTC Snapshot Record Number */   
 1620  1          *(res_data+5) = 0x0C; /* DTC Snapshot Record Number Of Identifiers */
 1621  1      
 1622  1          *(res_data+6) = 0xDF;
 1623  1          *(res_data+7) = 0x00;
 1624  1          *(res_data+8) = 0xFF;
 1625  1      
 1626  1              *(res_data+9) = 0xDF;
 1627  1          *(res_data+10) = 0x01;
 1628  1          *(res_data+11) = 0xFF;
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 28  

 1629  1      
 1630  1              *(res_data+12) = 0xDF;
 1631  1          *(res_data+13) = 0x02;
 1632  1          *(res_data+14) = 0xFF;
 1633  1              *(res_data+15) = 0xFF;
 1634  1      
 1635  1              *(res_data+16) = 0xDF;
 1636  1          *(res_data+17) = 0x03;
 1637  1          *(res_data+18) = 0xFF;
 1638  1              *(res_data+19) = 0xFF;
 1639  1      
 1640  1              *(res_data+20) = 0xDF;
 1641  1          *(res_data+21) = 0x04;
 1642  1          *(res_data+22) = 0xFF;
 1643  1      
 1644  1              *(res_data+23) = 0xDF;
 1645  1          *(res_data+24) = 0x05;
 1646  1          *(res_data+25) = 0xFF;
 1647  1              *(res_data+26) = 0xFF;
 1648  1      
 1649  1              *(res_data+27) = 0xDF;
 1650  1          *(res_data+28) = 0x06;
 1651  1          *(res_data+29) = 0xFF;
 1652  1      
 1653  1              *(res_data+30) = 0xDF;
 1654  1          *(res_data+31) = 0x07;
 1655  1          *(res_data+32) = 0xFF;
 1656  1      
 1657  1              *(res_data+33) = 0xDF;
 1658  1          *(res_data+34) = 0x08;
 1659  1          *(res_data+35) = 0xFF;
 1660  1      
 1661  1              *(res_data+36) = 0xDF;
 1662  1          *(res_data+37) = 0x09;
 1663  1          *(res_data+38) = 0xFF;
 1664  1              
 1665  1          *(res_data+39) = 0xDF;
 1666  1          *(res_data+40) = 0x0A;
 1667  1          *(res_data+41) = 0xFF;
 1668  1      
 1669  1              *(res_data+42) = 0xDF;
 1670  1          *(res_data+43) = 0x0B;
 1671  1          *(res_data+44) = 0xFF;
 1672  1              *(res_data+45) = 0xFF;
 1673  1      }
 1674         
 1675         /***********************************************************************
 1676         * FUNCTION    : DescMgr_CanDiagGetExtendData
 1677         * DESCRIPTION : none
 1678         * INPUTS      : *p_dtc
 1679         * RETURN      : none
 1680         ***********************************************************************/
 1681         void DescMgr_CanDiagGetExtendData(INT8U *res_data, INT8U *req_dtc)
 1682         {
 1683  1          INT8U record_count;
 1684  1              
 1685  1              for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)   //added by uidq2008
 1686  1          {
 1687  2              if ((dtc_code_data[record_count].dtc_bytes.dtc_high_byte == req_dtc[2]) 
 1688  2                      &&  (dtc_code_data[record_count].dtc_bytes.dtc_middle_byte == req_dtc[3])
 1689  2                      &&  (dtc_code_data[record_count].dtc_bytes.dtc_low_byte == req_dtc[4]))
 1690  2              {
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 29  

 1691  3                      if ((dtc_current_status_record[record_count].dtc_status.status_byte & DTC_STATUS_AVAILABILITY_MAS
             -K) != 0)
 1692  3                      {
 1693  4                              DescMgr_ReturnExtendData(res_data, record_count, req_dtc[5]);
 1694  4                              }
 1695  3                  else
 1696  3                  {
 1697  4                      DescMgr_ReturnExtendDataDefault(res_data, record_count, req_dtc[5]);
 1698  4                  }
 1699  3              }
 1700  2          }
 1701  1      }
 1702         
 1703         /***********************************************************************
 1704         * FUNCTION    : DescMgr_ReturnExtendData
 1705         * DESCRIPTION : none
 1706         * INPUTS      : *p_dtc
 1707         * RETURN      : none
 1708         ***********************************************************************/
 1709         DESC_MGR_STAT void DescMgr_ReturnExtendData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U RecordNum
             -)
 1710         {
 1711  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1712  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;              /* DTCMiddleByte */
 1713  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1714  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */
 1715  1              
 1716  1          switch (RecordNum)    
 1717  1          {
 1718  2              case 0x01: /*Fault occurrence counter */
 1719  2                  *(res_data+4) = 0x01;
 1720  2                  *(res_data+5) = dtc_extern_data_record[dtc_number].exOccuranceCnt; 
 1721  2                  break;
 1722  2                              
 1723  2                      #if 0   
                      case 0x02: /*Fault pending counter  */
                          *(res_data+4) = 0x02;
                          *(res_data+5) = dtc_pending_count[dtc_number];      
                          break;
                              #endif
 1729  2                              
 1730  2              case 0x02: /* DTC Aging counter */
 1731  2                  *(res_data+4) = 0x02;
 1732  2                  *(res_data+5) = dtc_extern_data_record[dtc_number].exAgingCnt;      
 1733  2                  break;
 1734  2      
 1735  2                      #if 0
                      case 0x04: /* DTC Aged counter */
                          *(res_data+4) = 0x04;
                          *(res_data+5) = dtc_aged_count[dtc_number]; 
                          break;
                              #endif
 1741  2                              
 1742  2              case 0xFF:
 1743  2                              *(res_data+4) = 0x01;
 1744  2                              *(res_data+5) = dtc_extern_data_record[dtc_number].exOccuranceCnt;      
 1745  2                              *(res_data+6) = 0x02;
 1746  2                              *(res_data+7) = dtc_extern_data_record[dtc_number].exAgingCnt;  
 1747  2                              #if 0
                                      *(res_data+8) = 0x03;
                                      *(res_data+9) = dtc_aging_count[dtc_number];    
                                      *(res_data+10) = 0x04;
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 30  

                                      *(res_data+11) = dtc_aged_count[dtc_number];    
                                      #endif
 1753  2                  break;
 1754  2                              
 1755  2              default:
 1756  2                  break;
 1757  2          }
 1758  1      }
 1759         
 1760         /***********************************************************************
 1761         * FUNCTION    : DescMgr_ReturnExtendDataDefault
 1762         * DESCRIPTION : none
 1763         * INPUTS      : *p_dtc
 1764         * RETURN      : none
 1765         ***********************************************************************/
 1766         DESC_MGR_STAT void DescMgr_ReturnExtendDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U Re
             -cordNum)
 1767         {
 1768  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1769  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;              /* DTCMiddleByte */
 1770  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1771  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */
 1772  1              
 1773  1          switch (RecordNum)    
 1774  1          {
 1775  2              case 0x01: /* Fault occurrence counter */
 1776  2                  *(res_data+4) = 0x01;
 1777  2                  *(res_data+5) = 0x00;       
 1778  2                  break;
 1779  2                              
 1780  2              case 0x02: /* Fault pending counter  */
 1781  2                  *(res_data+4) = 0x02;
 1782  2                  *(res_data+5) = 0x00;       
 1783  2                  break;
 1784  2      
 1785  2                      #if 0
                      case 0x03: /* DTC Aging counter */
                          *(res_data+4) = 0x03;
                          *(res_data+5) = 0x00;       
                          break;
                                      
                      case 0x04: /* DTC Aged counter */
                          *(res_data+4) = 0x04;
                          *(res_data+5) = 0x00;       
                          break;
                              #endif
 1796  2                              
 1797  2              case 0xFF:
 1798  2                              *(res_data+4) = 0x01;
 1799  2                              *(res_data+5) = 0x00;   
 1800  2                              *(res_data+6) = 0x02;
 1801  2                              *(res_data+7) = 0x00;
 1802  2                              #if 0
                                      *(res_data+8) = 0x03;
                                      *(res_data+9) = 0x00;
                                      *(res_data+10) = 0x04;
                                      *(res_data+11) = 0x00;  
                                      #endif
 1808  2                  break;
 1809  2                              
 1810  2              default:
 1811  2                  break;
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 31  

 1812  2          }
 1813  1      }
 1814         
 1815         
 1816         #if 0
              static INT8U uVoltageLowTimeoutCnt = 0u;
              static INT8U uVoltageLowRecoverCnt = 0u;
              static BOOLEAN bVehiclePowerVoltageLow = FALSE;
              /*****************************************************************************************
              *  Name        : CanDiagApp_DTC_VehiclePowerVoltageLow
              *  Description : vehicle power voltage low
                               operate condition: 1)ECU power on 2)KL30 node: battery connect 3)KL15 node: IGN ON
                               DTC set condition: power voltage lower than 9V continue 1s
                               DTC resume condition: power voltage higher than 9.5V continue 1s
              *  Parameter   : none
              *  Returns     : none 
              *****************************************************************************************/
              void CanDiagApp_DTC_VehiclePowerVoltageLow(void)
              {
                      static INT16U uVehicleVoltage = 0u;
                      const T_ADC_APP *ptr = AdcApp_SampleData();
              
                      if (FALSE == bVehiclePowerVoltageLow)
                      {
                              if (ptr->vehiclePowerVoltage < POWER_9V_VOLTAGE)
                              {
                                      uVoltageLowRecoverCnt = 0u;
              
                                      uVoltageLowTimeoutCnt++;
                                      if (uVoltageLowTimeoutCnt >= DELAY_1s)          
                                      {
                                              uVoltageLowTimeoutCnt = DELAY_1s;
                                              bVehiclePowerVoltageLow = TRUE;
              
                                              if (TRUE == DescMgr_CanDiagDtcRecordBodyEnableCheck())
                                  {
                                                      DescMgr_DtcStatusDataReport(DTC_VEHICLE_POWER_VOLTAGE_LOW, DTC_TEST_FAILED);
                                              }               
                                      }                       
                              }
                              else
                              {
                                      uVoltageLowTimeoutCnt = 0u;
                                      uVoltageLowRecoverCnt = 0u;
                                      bVehiclePowerVoltageLow = FALSE;
                              }
                      }
                      else
                      {
                              if (ptr->vehiclePowerVoltage >= POWER_9_5V_VOLTAGE)
                              {               
                                      uVoltageLowTimeoutCnt = 0u;
              
                                      uVoltageLowRecoverCnt++;
                                      if (uVoltageLowRecoverCnt >= DELAY_1s)
                              {
                                              uVoltageLowRecoverCnt = DELAY_1s;
                                              bVehiclePowerVoltageLow = FALSE;
              
                                              if (TRUE == DescMgr_CanDiagDtcRecordBodyEnableCheck())
                                  {
                                                      DescMgr_DtcStatusDataReport(DTC_VEHICLE_POWER_VOLTAGE_LOW, DTC_TEST_PASSED);
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 32  

                                  }
                              }                       
                              }
                              else
                              {
                                      uVoltageLowTimeoutCnt = 0u;
                                      uVoltageLowRecoverCnt = 0u;
                                      bVehiclePowerVoltageLow = TRUE;
                              }
                      }
              }
              #endif
 1886         
 1887         /***********************************************************************
 1888         * FUNCTION    : void DescMgr_PowModeSupervise_Init(void)
 1889         * DESCRIPTION : ignition position monitor. Called by can_diag_init only.
 1890         * INPUTS      : none
 1891         * RETURN      : none
 1892         ***********************************************************************/
 1893         DESC_MGR_STAT void DescMgr_PowModeSupervise_Init(void)
 1894         {
 1895  1          can_diag_init_nm_delay_timer = CAN_DIAG_NM_INIT_DELAY_TIME;
 1896  1      }
 1897         
 1898         /***********************************************************************
 1899         * FUNCTION    : void DescMgr_PowModeSupervision(void)
 1900         * DESCRIPTION : ignition position monitor. Called by can_diag_task only. cycle call:10ms
 1901         * INPUTS      : none
 1902         * RETURN      : none
 1903         ***********************************************************************/
 1904         DESC_MGR_STAT void DescMgr_PowModeSupervision(void)
 1905         {
 1906  1          if(can_diag_init_nm_delay_timer > CAN_DIAG_NM_INIT_DELAY_TIMEOUT)
 1907  1          {
 1908  2              can_diag_init_nm_delay_timer--;
 1909  2          }
 1910  1      
 1911  1          /* Adjust dtc record enable mask */
 1912  1          DescMgr_CanDigDtcRecordEnableAdjust();
 1913  1      }
 1914         
 1915         /***********************************************************************
 1916         * FUNCTION    : void DescMgr_DelaySetSig(U16 sig)
 1917         * DESCRIPTION : 
 1918         * INPUTS      : none
 1919         * RETURN      : none
 1920         ***********************************************************************/
 1921         void DescMgr_DelaySetSig(INT16U sig)
 1922         {
 1923  1          desc_delay_sig |= sig;
 1924  1      }
 1925         
 1926         /***********************************************************************
 1927         * FUNCTION    : void DescMgr_DelayClearSig(U16 sig)
 1928         * DESCRIPTION : 
 1929         * INPUTS      : none
 1930         * RETURN      : none
 1931         ***********************************************************************/
 1932         void DescMgr_DelayClearSig(INT16U sig)
 1933         {
 1934  1          desc_delay_sig &= ~sig;
 1935  1      }
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 33  

 1936         
 1937         /***********************************************************************
 1938         * FUNCTION    : BOOL DescMgr_DelayGetSig(U16 sig)
 1939         * DESCRIPTION : 
 1940         * INPUTS      : none
 1941         * RETURN      : none
 1942         ***********************************************************************/
 1943         BOOLEAN DescMgr_DelayGetSig(INT16U sig)
 1944         {
 1945  1          return((desc_delay_sig & sig) != 0);
 1946  1      }
 1947         
 1948         /***********************************************************************
 1949         * FUNCTION    : void DescMgr_DelayServiceMonitor(void)
 1950         * DESCRIPTION : 
 1951         * INPUTS      : none
 1952         * RETURN      : none
 1953         ***********************************************************************/
 1954         DESC_MGR_STAT void DescMgr_DelayServiceMonitor(void)
 1955         {
 1956  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_1))
 1957  1          {
 1958  2              if(DescMgr_CanDiagDtcStatusServiceClearAll())
 1959  2              {
 1960  3                  DescMgr_DelayClearSig(DESC_DELAY_SIG_1);
 1961  3              }
 1962  2          }
 1963  1      
 1964  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_2))
 1965  1          {
 1966  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_2);
 1967  2          }
 1968  1      
 1969  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_3))
 1970  1          {
 1971  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_3);
 1972  2          }
 1973  1      
 1974  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_4))
 1975  1          {
 1976  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_4);
 1977  2          }
 1978  1      
 1979  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_5))
 1980  1          {
 1981  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_5);
 1982  2          }
 1983  1      
 1984  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_6))
 1985  1          {
 1986  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_6);
 1987  2          }
 1988  1      
 1989  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_7))
 1990  1          {
 1991  2         //    if(can_diag_check_os_version())
 1992  2              {
 1993  3                  DescMgr_DelayClearSig(DESC_DELAY_SIG_7);
 1994  3              }
 1995  2          }
 1996  1      
 1997  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_8))
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 34  

 1998  1          {
 1999  2          //    if(can_diag_set_machine_id())
 2000  2              {
 2001  3                  DescMgr_DelayClearSig(DESC_DELAY_SIG_8);
 2002  3              }
 2003  2          }
 2004  1      
 2005  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_9))
 2006  1          {
 2007  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_9);
 2008  2          }
 2009  1      }
 2010         
 2011         
 2012         /***********************************************************************
 2013         * FUNCTION    : void DescMgr_Sv14ClearStart(void)
 2014         * DESCRIPTION : 
 2015         * INPUTS      : 
 2016         * RETURN      : 
 2017         ***********************************************************************/
 2018         void DescMgr_Sv14ClearStart(void)
 2019         {
 2020  1      #if 1
 2021  1          /* do not care about last time, just reset the whole clear things */
 2022  1          dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_START; /* clear begin */
 2023  1      #else
              
                  _memset(dtc_status_occurrence_cnt,DTC_STATUS_OCCURRENCE_CNT_RESET,DTC_CODE_MAX_NUM);
                  _memset(dtc_status_aging_cnt,DTC_STATUS_AGING_CNT_RESET,DTC_CODE_MAX_NUM);
                      _memset(dtc_status_aged_cnt,DTC_STATUS_AGED_CNT_RESET,DTC_CODE_MAX_NUM);
                      _memset(&dtc_snapshot_record,0,sizeof(DTC_SNAPSHOT_RECORD_IDENTIFIERS)*DTC_CODE_MAX_NUM);
                      /* last time clearing has not finished yet, just ignore request */
                  if(DTC_STATUS_SVC14_CLEAR_FINISHED == dtc_status_svc14_clear_counter)
                  {
                      dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_START; /* clear begin */
                  }
              #endif
 2035  1      
 2036  1          /* Adjust dtc record enable mask */
 2037  1          DescMgr_CanDigDtcRecordEnableAdjust();
 2038  1      }
 2039         
 2040         
 2041         void CanDescDtc_TaskEntry(void)
 2042         { 
 2043  1          /* Diagnosis init, dtc record enable delay */
 2044  1          if(can_diag_init_delay_timer > CAN_DIAG_INIT_DELAY_TIMEOUT)
 2045  1          {
 2046  2              can_diag_init_delay_timer--;
 2047  2      
 2048  2              if(can_diag_init_delay_timer == CAN_DIAG_INIT_DELAY_TIMEOUT)
 2049  2              {
 2050  3                  /* Adjust dtc record enable mask */
 2051  3                  DescMgr_CanDigDtcRecordEnableAdjust();
 2052  3              }
 2053  2          }
 2054  1              
 2055  1          DescMgr_CanDiagDtcEepromHandle();
 2056  1              DescMgr_PowModeSupervision();
 2057  1      
 2058  1          DescMgr_DelayServiceMonitor();
 2059  1      #if 0   
C166 COMPILER V7.57.0, DESC_MGR                                                            12/25/2020 20:36:16 PAGE 35  

                  Get_Software_Version_Status();
                  EEP_Write_Status_Monitor();
                  EEP_Status_Monitor();
              #endif
 2064  1              CanDiag_DTC_NmCheckTask();
 2065  1              //CanDiagApp_DTC_VehiclePowerVoltageLow();
 2066  1      }
 2067         
 2068         /* _END_OF_DESC_DTC_MGR_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        4456     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          21     --------
  FAR-DATA SIZE    =         896     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =        1018     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
