C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE DESC_MGR
OBJECT MODULE PLACED IN .\Obj\desc_mgr.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\bsw\desc\desc_mgr.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\sr
                    -c\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\
                    -mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measur
                    -e;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\desc_mgr.lst) OBJECT(.\Obj\desc_mgr.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : DescDtcMgr.c
    9         * Instance      : 
   10         * Description   : UDS
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 27,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 27,2019    Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #define DESC_MGR_GLOBALS
   23         
   24         #include <string.h>
   25         
   26         #include "desc_mgr.h"
   27         #include "desc_ser.h"
   28         #include "EEPROM_Cfg.h"
   29         #include "adc_sample.h"
   30         #include "eepRom.h"
   31         #include "can_diag.h"
   32         #include "rte.h"
   33         
   34         
   35         /**** Definition of variables ****/
   36         INT16U desc_delay_sig;
   37         
   38         DESC_MGR_STAT INT16U can_diag_init_delay_timer = 0u;
   39         DESC_MGR_STAT INT16U can_diag_ign_delay_timer = 0u;
   40         DESC_MGR_STAT INT16U can_diag_init_nm_delay_timer = 0u;
   41         DESC_MGR_STAT INT16U can_diag_bat_volt_recover_delay_timer = 0u;
   42         
   43         DESC_MGR_STAT BOOLEAN dtc_control_setting_on_off = TRUE;
   44         DESC_MGR_STAT BOOLEAN bDtcDataNeedSendToEep = FALSE;
   45         DESC_MGR_STAT DTC_INIT_STEP_TYPE dtc_eeprom_init_step = DTC_INIT_STEP_START;
   46         DESC_MGR_STAT INT8U dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_FINISHED;
   47         
   48         //DESC_MGR_STAT INT8U dtc_occurance_count[DTC_CODE_MAX_NUM] = {0u};
   49         //DESC_MGR_STAT INT8U dtc_aging_count[DTC_CODE_MAX_NUM] = {0u};
   50         //DESC_MGR_STAT INT8U dtc_pending_count[DTC_CODE_MAX_NUM] = {0u}; 
   51         //DESC_MGR_STAT INT8U dtc_aged_count[DTC_CODE_MAX_NUM] = {0u};
   52         
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 2   

   53         DESC_MGR_STAT INT8U dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
   54         DESC_MGR_STAT INT32U delta_trip_count = 0x00000000;
   55         
   56         DESC_MGR_STAT BOOLEAN bSetClearHistoryFaultCntFlag[DTC_CODE_MAX_NUM] = {FALSE}; 
   57         DESC_MGR_STAT BOOLEAN bSetClearHistoryPendingCntFlag[DTC_CODE_MAX_NUM] = {FALSE}; 
   58         DESC_MGR_STAT BOOLEAN bSetIncreaseHistoryPendingCntFlag[DTC_CODE_MAX_NUM] = {FALSE}; 
   59         
   60         /* DTC status mask statusOfDTC */
   61         DESC_MGR_STAT DTC_RECORD_TYPE dtc_current_status_record[DTC_CODE_MAX_NUM] = {0x00};
   62         
   63         /* DTC create count Fault occurrence counter */
   64         DESC_MGR_STAT DTC_RECORD_CNT_TYPE dtc_create_record_cnt[DTC_CODE_MAX_NUM] = {0u};
   65         
   66         /* DTC create and recover time count */
   67         DESC_MGR_STAT DTC_RECORD_TIME_CNT_TYPE dtc_status_time_record_cnt[DTC_CODE_MAX_NUM] = {0u}; 
   68         
   69         /* DTC snapshot data */
   70         DESC_MGR_STAT DTC_SNAPSHOT_DATA_RECORD dtc_snapshot_data_record[DTC_CODE_MAX_NUM] = {0u};
   71         
   72         /* DTC extern data */
   73         DESC_MGR_STAT DTC_EXTERN_DATA_RECORD dtc_extern_data_record[DTC_CODE_MAX_NUM] = {0u};
   74         
   75         
   76         /* DTC Number */
   77         DTC_CODE_DATA_TYPE dtc_code_data[DTC_CODE_MAX_NUM] = 
   78         {       
   79                 {0x70, 0x06, 0x01}, /*C300601, DTC_VEHICLE_POWER_VOLTAGE_HIGH */
   80                 {0x70, 0x06, 0x02}, /*C300602, DTC_VEHICLE_POWER_VOLTAGE_LOW */
   81                 {0x70, 0x06, 0x03}, /*C300603, DTC_ECU_TEMPERATURE_HIGH */
   82                 {0x70, 0x06, 0x04}, /*C300604, DTC_ECU_TEMPERATURE_LOW */
   83                 {0x70, 0x06, 0x05}, /*C300605, DTC_TEMPERATURE_SENSOR_FAULT */
   84         
   85                 {0x70, 0x06, 0x06}, /*C300606, DTC_PEDAL_SENSOR_POWER_VOLTAGE_HIGH */
   86                 {0x70, 0x06, 0x07}, /*C300607, DTC_PEDAL_SENSOR_POWER_VOLTAGE_LOW */
   87                 {0x70, 0x06, 0x08}, /*C300608, DTC_PEDAL_SENSOR_POWER_SHORT_CIRCUIT */
   88                 {0x70, 0x06, 0x09}, /*C300609, DTC_PEDAL_SENSOR_POWER_OPEN_CIRCUIT */
   89                 {0x70, 0x06, 0x10}, /*C300610, DTC_PEDAL_SENSOR_SIGNAL_OVER_RANGE */
   90                 {0x70, 0x06, 0x11}, /*C300611, DTC_PEDAL_SENSOR_SIGNAL_CHECK_ERR */
   91                 {0x70, 0x06, 0x12}, /*C300612, DTC_PEDAL_SENSOR_INITIAL_SIGNAL_ERR */
   92                 {0x70, 0x06, 0x13}, /*C300613, DTC_PEDAL_SENSOR_SIGNAL_ABNORMAL */
   93         
   94                 {0x70, 0x06, 0x16}, /*C300616, DTC_CYLINDER_SENSOR_POWER_VOLTAGE_HIGH */
   95                 {0x70, 0x06, 0x17}, /*C300617, DTC_CYLINDER_SENSOR_POWER_VOLTAGE_LOW */
   96                 {0x70, 0x06, 0x18}, /*C300618, DTC_CYLINDER_SENSOR_POWER_SHORT_CIRCUIT */
   97                 {0x70, 0x06, 0x19}, /*C300619, DTC_CYLINDER_SENSOR_POWER_OPEN_CIRCUIT */
   98                 {0x70, 0x06, 0x20}, /*C300620, DTC_CYLINDER_SENSOR_SIGNAL_OVER_RANGE */
   99                 {0x70, 0x06, 0x21}, /*C300621, DTC_CYLINDER_SENSOR_SIGNAL_CHECK_ERR */
  100                 {0x70, 0x06, 0x22}, /*C300622, DTC_CYLINDER_SENSOR_INITIAL_SIGNAL_ERR */
  101                 {0x70, 0x06, 0x23}, /*C300623, DTC_CYLINDER_SENSOR_SIGNAL_ABNORMAL */
  102         
  103                 {0x70, 0x06, 0x25}, /*C300625, DTC_CURRENT_SENSOR_SIGNAL_OVER_RANGE */
  104                 {0x70, 0x06, 0x26}, /*C300626, DTC_CURRENT_SENSOR_INITIAL_SIGNAL_ERR */
  105                 {0x70, 0x06, 0x27}, /*C300627, DTC_MOTOR_DRIVE_BUS_VOLTAGE_HIGH */
  106                 {0x70, 0x06, 0x28}, /*C300628, DTC_MOTOR_DRIVE_BUS_VOLTAGE_LOW */
  107                 {0x70, 0x06, 0x29}, /*C300629, DTC_MOTOR_DRIVER_FAULT */
  108                 {0x70, 0x06, 0x32}, /*C300632, DTC_MOTOR_OPEN_CIRCUIT */
  109                 {0x70, 0x06, 0x33}, /*C300633, DTC_MOTOR_SHORT_CIRCUIT */
  110         
  111                 {0xC1, 0x55, 0x87}, /*U015587, DTC_CAN_NODE_VCU_LOST_ERR */
  112                 {0xC1, 0x21, 0x87}, /*U012187, DTC_CAN_NODE_MCU_LOST_ERR */
  113                 {0xC1, 0x40, 0x87}, /*U014087, DTC_CAN_NODE_ABS_LOST_ERR */
  114                 {0xC0, 0x73, 0x00}, /*U007300, DTC_VEHICLE_CAN_BUS_OFF */
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 3   

  115         };
  116         
  117         /**** Declaration of functions ****/
  118         DESC_MGR_STAT void DescMgr_ReadDtcFromEEP(void);
  119         DESC_MGR_STAT void DescMgr_WriteAllDtcToEEP(void);
  120         DESC_MGR_STAT void DescMgr_WriteExtendDataToEEP(INT8U dtc_code);
  121         DESC_MGR_STAT void DescMgr_WriteSnapshotDataToEEP(INT8U dtc_code);
  122         DESC_MGR_STAT void DescMgr_ExtendDataReport(INT8U dtc_code);
  123         DESC_MGR_STAT void DescMgr_SnapshotDataReport(INT8U dtc_code);
  124         DESC_MGR_STAT void DescMgr_CanDigDtcRecordEnableAdjust(void);
  125         DESC_MGR_STAT void DescMgr_InitDtcCreateRecoverCounterAndStatus(void);
  126         DESC_MGR_STAT void DescMgr_SetDeltaTripCounter(INT8U dtc_code, BOOLEAN delta_Trip_flag);
  127         DESC_MGR_STAT void DescMgr_ReturnSnapshotData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number);
  128         DESC_MGR_STAT void DescMgr_ReturnSnapshotDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number);
  129         DESC_MGR_STAT void DescMgr_ReturnExtendData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U RecordNum
             -);
  130         DESC_MGR_STAT void DescMgr_ReturnExtendDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U Re
             -cordNum);
  131         
  132         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearAll(void);
  133         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearFinished(void);
  134         void DescMgr_DelaySetSig(INT16U sig);
  135         void DescMgr_Sv14ClearStart(void);
  136         
  137         
  138         
  139         #define DELAY_1s 10
  140         #define POWER_9V_VOLTAGE 9000
  141         #define POWER_9_5V_VOLTAGE 9500
  142         
  143         
  144         /***********************************************************************
  145         * FUNCTION    : CanDescDtc_vInit
  146         * DESCRIPTION : 
  147         * INPUTS      : none
  148         * RETURN      : none
  149         ***********************************************************************/
  150         void CanDescDtc_vInit(void)
  151         {
  152  1              /* control dtc setting to on in default */
  153  1          dtc_control_setting_on_off = TRUE; 
  154  1          dtc_eeprom_init_step = DTC_INIT_STEP_START;
  155  1          dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_FINISHED;
  156  1      
  157  1          bDtcDataNeedSendToEep = FALSE;
  158  1          
  159  1          can_diag_init_delay_timer = CAN_DIAG_INIT_DELAY_TIME;
  160  1          
  161  1          can_diag_init_nm_delay_timer = CAN_DIAG_NM_INIT_DELAY_TIME;
  162  1          can_diag_ign_delay_timer = CAN_DIAG_NM_IGN_ON_DELAY_TIME;
  163  1          can_diag_bat_volt_recover_delay_timer = CAN_DIAG_BAT_VOLT_RECOVER_DELAY_TIMEOUT;    
  164  1      
  165  1          /* init to disable all dtc record */
  166  1          dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
  167  1      
  168  1          /* Adjust dtc record enable mask */
  169  1              
  170  1      #ifdef DTC_AGING_COUNTER
  171  1              memset(bSetClearHistoryFaultCntFlag, TRUE, DTC_CODE_MAX_NUM);
  172  1      #endif
  173  1      
  174  1          //EEP_Read_Status_Before_S3_Monitor();
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 4   

  175  1      }
  176         
  177         /***********************************************************************
  178         * FUNCTION    : DescMgr_CanDiagDtcDeInit
  179         * DESCRIPTION : 
  180         * INPUTS      : none
  181         * RETURN      : none
  182         ***********************************************************************/
  183         void DescMgr_CanDiagDtcDeInit(void)
  184         {
  185  1              return;
  186  1      }
  187         
  188         /***********************************************************************
  189         * FUNCTION    : can_diag_dtc_eeprom_handle
  190         * DESCRIPTION : Initialize all the dtc eeprom data at one time will lead to other can function delay,
  191         * such as nm or app cycle msg transmition. So we separate the init action of dtc eeprom.
  192         * INPUTS      : none
  193         * RETURN      : none
  194         ***********************************************************************/
  195         DESC_MGR_STAT INT8U write_delay = 0u;
  196         DESC_MGR_STAT void DescMgr_CanDiagDtcEepromHandle(void)
  197         {
  198  1      
  199  1              switch (dtc_eeprom_init_step)
  200  1              {
  201  2                      case DTC_INIT_STEP_START:
  202  2                              dtc_eeprom_init_step = DTC_INIT_STEP_READ_DTC_ST;
  203  2                              break;
  204  2                              
  205  2                      case DTC_INIT_STEP_READ_DTC_ST:
  206  2                              DescMgr_ReadDtcFromEEP();
  207  2                              dtc_eeprom_init_step = DTC_INIT_STEP_CALCULATE_DTC_ST;
  208  2                              break;
  209  2                              
  210  2                      case DTC_INIT_STEP_CALCULATE_DTC_ST:
  211  2                              DescMgr_InitDtcCreateRecoverCounterAndStatus();
  212  2                              dtc_eeprom_init_step = DTC_INIT_STEP_WRITE_EEPROM_ST;
  213  2                              break;
  214  2                              
  215  2                      case DTC_INIT_STEP_WRITE_EEPROM_ST:
  216  2                  dtc_eeprom_init_step = DTC_INIT_STEP_FINISHED;
  217  2                  dtc_record_enable_mask |= DTC_RECORD_ENALBE_BDY; /* enable body diag */                     
  218  2                              break;
  219  2      
  220  2                      case DTC_INIT_STEP_FINISHED:
  221  2                              if (TRUE == bDtcDataNeedSendToEep)
  222  2                              {
  223  3                                      write_delay++;
  224  3                                      if (write_delay >= EEP_WRITE_FRE) /* write eep frequence 1s once */
  225  3                                      {
  226  4                                              write_delay = 0u;
  227  4                                              bDtcDataNeedSendToEep = FALSE; // EED_nDTCRecord;
  228  4      
  229  4                                              DescMgr_WriteAllDtcToEEP();
  230  4                                      }             
  231  3                              }                       
  232  2                              break;
  233  2      
  234  2                      default:
  235  2                              break;
  236  2              }
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 5   

  237  1      }
  238         
  239         /***********************************************************************
  240         * FUNCTION    : DescMgr_ReadDtcFromEEP
  241         * DESCRIPTION : None
  242         * INPUTS      : None
  243         * RETURN      : None
  244         ***********************************************************************/
  245         DESC_MGR_STAT void DescMgr_ReadDtcFromEEP(void)
  246         {
  247  1              INT8U i;
  248  1      
  249  1              for (i=0; i<DTC_CODE_MAX_NUM; i++)
  250  1              {
  251  2                      ReadString_v_g((INT8U *)&dtc_current_status_record[i], DTC_EEPROM_STATUS_BYTE_START_ADDRESS+(i * 16u), s
             -izeof(dtc_current_status_record[i]));
  252  2                      ReadString_v_g((INT8U *)&dtc_snapshot_data_record[i], DTC_EEPROM_SNAPSHOT_DATA_START_ADDRESS+(i * 16u), 
             -sizeof(dtc_snapshot_data_record[i]));
  253  2                      ReadString_v_g((INT8U *)&dtc_extern_data_record[i], DTC_EEPROM_EXTENDED_DATA_START_ADDRESS+(i * 16u), si
             -zeof(dtc_extern_data_record[i]));
  254  2      
  255  2              }
  256  1      }
  257         
  258         /***********************************************************************
  259         * FUNCTION    : DescMgr_WriteAllDtcToEEP
  260         * DESCRIPTION : None
  261         * INPUTS      : None
  262         * RETURN      : None
  263         ***********************************************************************/
  264         DESC_MGR_STAT void DescMgr_WriteAllDtcToEEP(void)
  265         {
  266  1              INT8U i;        
  267  1      
  268  1              for (i=0; i<DTC_CODE_MAX_NUM; i++)
  269  1              {
  270  2                      CopyString_v_g(&dtc_current_status_record[i], DTC_EEPROM_STATUS_BYTE_START_ADDRESS + (i * 16u), sizeof(d
             -tc_current_status_record[i]), 1);
  271  2                      CopyString_v_g(&dtc_snapshot_data_record[i], DTC_EEPROM_SNAPSHOT_DATA_START_ADDRESS + (i * 16u), sizeof(
             -dtc_snapshot_data_record[i]), 1);     
  272  2                      CopyString_v_g(&dtc_extern_data_record[i], DTC_EEPROM_EXTENDED_DATA_START_ADDRESS + (i * 16u), sizeof(dt
             -c_extern_data_record[i]), 1);
  273  2                      
  274  2      
  275  2                      // TODO:Write extend data to EEPROM
  276  2              }       
  277  1      }
  278         
  279         /***********************************************************************
  280         * FUNCTION    : DescMgr_WriteExtendDataToEEP
  281         * DESCRIPTION : None
  282         * INPUTS      : None
  283         * RETURN      : None
  284         ***********************************************************************/
  285         DESC_MGR_STAT void DescMgr_WriteExtendDataToEEP(INT8U dtc_code)
  286         {
  287  1              // TODO:Write extend data to EEPROM
  288  1      }
*** WARNING C47 IN LINE 285 OF src\bsw\desc\desc_mgr.c: 'dtc_code': unreferenced parameter
  289         
  290         /***********************************************************************
  291         * FUNCTION    : DescMgr_WriteSnapshotDataToEEP
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 6   

  292         * DESCRIPTION : None
  293         * INPUTS      : INT8U dtc_code
  294         * RETURN      : None
  295         ***********************************************************************/
  296         DESC_MGR_STAT void DescMgr_WriteSnapshotDataToEEP(INT8U dtc_code)
  297         {
  298  1              INT16U snapshotDataLength = 0;
  299  1              INT32U snapshotDataAddress = 0;
  300  1              
  301  1              snapshotDataLength = sizeof(DTC_SNAPSHOT_DATA_RECORD);
  302  1              snapshotDataAddress = DTC_EEPROM_SNAPSHOT_DATA_START_ADDRESS + (dtc_code * snapshotDataLength);
  303  1              CopyString_v_g(&dtc_snapshot_data_record[dtc_code], snapshotDataAddress, snapshotDataLength, 1);
  304  1      }
  305         
  306         /***********************************************************************
  307         * FUNCTION    : Init_DTC_Creat_Recover_Counter_And_Status
  308         * DESCRIPTION : 
  309         * INPUTS      : none
  310         * RETURN      : none
  311         ***********************************************************************/
  312         DESC_MGR_STAT void DescMgr_InitDtcCreateRecoverCounterAndStatus(void)
  313         {
  314  1          INT8U i = 0u;
  315  1      
  316  1          for (i=0u; i<DTC_CODE_MAX_NUM; i++)
  317  1          {
  318  2              dtc_status_time_record_cnt[i].dtc_create_time_cnt = 0u;
  319  2              dtc_status_time_record_cnt[i].dtc_recover_time_cnt = 0u;
  320  2      
  321  2              DescMgr_DtcStatusDataReport(i, (DTC_TEST_INIT | DTC_TEST_NEW_OPR));
  322  2          }   
  323  1      }
  324         
  325         /***********************************************************************
  326         * FUNCTION    : DescMgr_DtcStatusDataReport
  327         * DESCRIPTION : None
  328         * INPUTS      : None
  329         * RETURN      : None
  330         ***********************************************************************/
  331         BOOLEAN DescMgr_DtcStatusDataReport(INT8U dtc_code, INT8U dtc_test_type)
  332         {
  333  1              BOOLEAN dtc_status_changed = FALSE; 
  334  1                      
  335  1              if ((dtc_code < DTC_CODE_MAX_NUM) && ((TRUE == DescMgr_CanDiagDtcControlSettingCheck()) || (DTC_TEST_CLEA
             -R == dtc_test_type)))
  336  1              {
  337  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT0)               
  338  2                      /* DTC Status Bit0: Test Fail */
  339  2                      if (TRUE == DescMgr_ProcTestFailed(dtc_code, dtc_test_type))
  340  2                      {
  341  3                              dtc_status_changed = TRUE;
  342  3                      }
  343  2      #endif
  344  2      
  345  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT1)       
  346  2                      /* DTC Status Bit1: Test Fail This Operation Cycle */
  347  2                      if (TRUE == DescMgr_ProcTestFailedThisOperationCycle(dtc_code, dtc_test_type))
  348  2                      {
  349  3                              dtc_status_changed = TRUE;
  350  3                      }
  351  2      #endif
  352  2      
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 7   

  353  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT2)       
  354  2                      /* DTC Status Bit2: Not Confirmed DTC */
  355  2                      if (TRUE == DescMgr_ProcPendingDTC(dtc_code, dtc_test_type))
  356  2                      {
  357  3                              dtc_status_changed = TRUE;
  358  3                      }
  359  2      #endif
  360  2      
  361  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT3)       
  362  2                      /* DTC Status Bit3: Confirmed DTC */
  363  2                      if (TRUE == DescMgr_ProcConfirmedDTC(dtc_code, dtc_test_type))
  364  2                      {
  365  3                              dtc_status_changed = TRUE;
  366  3                              bDtcDataNeedSendToEep = TRUE;
  367  3                      }
  368  2      #endif
  369  2      
  370  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT4)       
                              /* DTC Status Bit4: Test Not Completed Since Last Clear */
                              if (TRUE == DescMgr_ProcTestNotCompletedSinceLastClear(dtc_code, dtc_test_type))
                              {
                                      dtc_status_changed = TRUE;
                              }
              #endif
  377  2      
  378  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT5)       
                              /* DTC Status Bit5: Test Fail Since Last Clear */
                              if (TRUE == DescMgr_ProcTestFailedSinceLastClear(dtc_code, dtc_test_type))
                              {
                                      dtc_status_changed = TRUE;
                              }               
              #endif
  385  2      
  386  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT6)       
  387  2                      /* DTC Status Bit6: Test Not Completed This Operation Cycle */
  388  2                      if (TRUE == DescMgr_ProcTestNotCompletedThisOperationCycle(dtc_code, dtc_test_type))
  389  2                      {
  390  3                              dtc_status_changed = TRUE;
  391  3                      }
  392  2      #endif
  393  2      
  394  2      #if defined (DESC_ENABLE_DTC_STATUS_BIT7)       
                              /* DTC Status Bit7: Warning Indicator Requested */
                              if (TRUE == DescMgr_ProcWarningIndicatorRequested(dtc_code, dtc_test_type))
                              {
                                      dtc_status_changed = TRUE;
                              }
              #endif
  401  2              }
  402  1      
  403  1              return dtc_status_changed; // polyspace test by gzz 2020.12.30
  404  1      }
  405         
  406         /***********************************************************************
  407         * FUNCTION    : DescMgr_ProcTestFailed
  408         * DESCRIPTION : None
  409         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  410         * RETURN      : None
  411         ***********************************************************************/
  412         BOOLEAN DescMgr_ProcTestFailed(INT8U dtc_code, INT8U dtc_test_type)
  413         {
  414  1              BOOLEAN dtc_status_changed = FALSE;
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 8   

  415  1      
  416  1              if (dtc_code < DTC_CODE_MAX_NUM)
  417  1              {
  418  2                      /* DTC Status Bit0 Supported Check */
  419  2                      //if (0 != (DTC_STATUS_BIT0_MASK_TF & DTC_STATUS_AVAILABILITY_MASK))  // polyspace test by gzz 2020.12.3
             -0
  420  2                      {
  421  3                              /* Check test initial */
  422  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  423  3                              {
  424  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  425  4                                      {
  426  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
  427  5                                              dtc_status_changed = TRUE;                                              
  428  5                                      }                       
  429  4                              }
  430  3      
  431  3                              /* Check test passed */
  432  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
  433  3                              {
  434  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  435  4                                      {
  436  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
  437  5                                              dtc_status_changed = TRUE;                                              
  438  5                                      }
  439  4                              }
  440  3      
  441  3                              /* Check test failed */
  442  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  443  3                              {
  444  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  445  4                                      {
  446  5                                              dtc_create_record_cnt[dtc_code].dtc_create_cnt++;       /*error count add*/
  447  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = TRUE;
  448  5      
  449  5                                              DescMgr_SnapshotDataReport(dtc_code);
  450  5                                              //DescMgr_WriteSnapshotDataToEEP(dtc_code);
  451  5      
  452  5                                              dtc_status_changed = TRUE;
  453  5                                              #if defined (DTC_AGING_COUNTER)
  454  5                                                      if (dtc_extern_data_record[dtc_code].exOccuranceCnt != 255u)
  455  5                                                      {
  456  6                                                              dtc_extern_data_record[dtc_code].exOccuranceCnt++;
  457  6                                                      }
  458  5      
  459  5                                                      if (DTC_STATUS_AGING_CNT_RESET != dtc_extern_data_record[dtc_code].exAgingCnt)
  460  5                                                      {
  461  6                                                              dtc_extern_data_record[dtc_code].exAgingCnt = DTC_STATUS_AGING_CNT_RESET;
  462  6                                                              bDtcDataNeedSendToEep = TRUE;
  463  6                                                      
  464  6                                                              dtc_status_changed = TRUE;
  465  6                                                      }
  466  5                                              #endif
  467  5                                      }
  468  4                              }
  469  3      
  470  3                              /* Check test clear */
  471  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  472  3                              {
  473  4                                      /* Clear all counter */
  474  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  475  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 9   

  476  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  477  4      
  478  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
  479  4                                      {
  480  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
  481  5                                              dtc_status_changed = TRUE;                                              
  482  5                                      }
  483  4                              }
  484  3      
  485  3                              /* Check test new operation */
  486  3                              if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  487  3                              {
  488  4                                      /* Nothing to do. */
  489  4                              }
  490  3                              
  491  3                      }
  492  2      #if 0 // polyspace test by gzz 2020.12.30       
                              else
                              {
                                      /* DTC Status Bit not supported, set to a default value if needed. 
                                       * Please adapter the default value according to SPEC. */
                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed)
                                      {
                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailed = FALSE;
                                              dtc_status_changed = TRUE;
                                      }
                              }
              #endif
  504  2              }
  505  1      
  506  1              return dtc_status_changed;
  507  1      }
  508         
  509         /***********************************************************************
  510         * FUNCTION    : DescMgr_ProcTestFailedThisOperationCycle
  511         * DESCRIPTION : None
  512         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  513         * RETURN      : None
  514         ***********************************************************************/
  515         BOOLEAN DescMgr_ProcTestFailedThisOperationCycle(INT8U dtc_code, INT8U dtc_test_type)
  516         {
  517  1              BOOLEAN dtc_status_changed = FALSE;
  518  1      
  519  1              if (dtc_code < DTC_CODE_MAX_NUM)
  520  1              {
  521  2                      /* DTC Status Bit1 suppored check */
  522  2                      if (0u != (DTC_STATUS_BIT1_MASK_TFTOC & DTC_STATUS_AVAILABILITY_MASK))
  523  2                      {
  524  3                              /* Check test initial */
  525  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  526  3                              {
  527  4                                      /* Nothing to do. */                    
  528  4                              }
  529  3      
  530  3                              /* Check test passed */
  531  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
  532  3                              {
  533  4                                      /* Nothing to do. */
  534  4                              }
  535  3      
  536  3                              /* Check test failed */
  537  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 10  

  538  3                              {
  539  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  540  4                                      {
  541  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = TRUE;
  542  5                                              dtc_status_changed = TRUE;
  543  5                                      }
  544  4                              }
  545  3      
  546  3                              /* Check test clear */
  547  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  548  3                              {
  549  4                                      /* Clear all counter */
  550  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  551  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  552  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  553  4      
  554  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  555  4                                      {
  556  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = TRUE;
  557  5                                              dtc_status_changed = TRUE;
  558  5                                      }
  559  4                              }       
  560  3      
  561  3                              /* Check test new operation */
  562  3                              if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  563  3                              {
  564  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  565  4                                      {
  566  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = TRUE;
  567  5                                              dtc_status_changed = TRUE;
  568  5                                      }
  569  4                              }
  570  3                      }
  571  2                      else
  572  2                      {
  573  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  574  3                               * Please adapter the default value according to SPEC. */       
  575  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle)
  576  3                               {
  577  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedThisOperationCycle = FALSE;
  578  4                                      dtc_status_changed = TRUE;
  579  4                               }
  580  3                      }
  581  2              }
  582  1      
  583  1              return dtc_status_changed;
  584  1      }
  585         
  586         /***********************************************************************
  587         * FUNCTION    : DescMgr_ProcPendingDTC
  588         * DESCRIPTION : None
  589         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  590         * RETURN      : None
  591         ***********************************************************************/
  592         BOOLEAN DescMgr_ProcPendingDTC(INT8U dtc_code, INT8U dtc_test_type)
  593         {
  594  1              BOOLEAN dtc_status_changed = FALSE;
  595  1      
  596  1              //DESC_MGR_STAT INT32U testDeltaTrip = 0u;
  597  1              //testDeltaTrip = delta_trip_count >> dtc_code & 1u;
  598  1      
  599  1              if (dtc_code < DTC_CODE_MAX_NUM)
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 11  

  600  1              {
  601  2                      /* DTC Status Bit2 suppored check */
  602  2                      if (0u != (DTC_STATUS_BIT1_MASK_TFTOC & DTC_STATUS_AVAILABILITY_MASK))
  603  2                      {
  604  3                              /* Check test initial */
  605  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  606  3                              {
  607  4                                      /* Nothing to do. */                    
  608  4                              }
  609  3      #if 0
                                      if (TRUE == bSetIncreaseHistoryPendingCntFlag[dtc_code])
                                      {
                                              bSetIncreaseHistoryPendingCntFlag[dtc_code] = FALSE;
              #if defined (DTC_AGING_COUNTER)
                                              if (255u != dtc_pending_count[dtc_code])
                                              {
                                                      dtc_pending_count[dtc_code]++;
                                                      bDtcDataNeedSendToEep = TRUE;
                                              }
              #endif
                                      }
              #endif
  622  3      
  623  3                              /* Check test passed */
  624  3                              if (0u != (dtc_test_type & DTC_TEST_PASSED))
  625  3                              {
  626  4      #if 0
              #if defined (DTC_AGING_COUNTER)
                                              if (TRUE == bSetClearHistoryPendingCntFlag[dtc_code])
                                              {
                                                      bSetClearHistoryPendingCntFlag[dtc_code] = FALSE;
              
                                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
                                                      {
                                                              if (testDeltaTrip)
                                                              {
                                                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = FALSE;
                                                                      dtc_pending_count[dtc_code] = 0u;
                                                                      DescMgr_SetDeltaTripCounter(dtc_code, FALSE);
              
                                                                      dtc_status_changed = TRUE;
                                                              }
                                                              else
                                                              {
                                                                      DescMgr_SetDeltaTripCounter(dtc_code, FALSE);
                                                              }
                                                      }
                                              }
              #endif  
              #endif
  650  4                              }
  651  3      
  652  3                              /* Check test failed */
  653  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  654  3                              {
  655  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
  656  4                                      {
  657  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = TRUE;
  658  5      #ifdef DTC_AGING_COUNTER
  659  5                                              //if (255u != dtc_pending_count[dtc_code])
  660  5                                              //{
  661  5                                                      //dtc_pending_count[dtc_code]++;
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 12  

  662  5                                                      //bDtcDataNeedSendToEep = TRUE;
  663  5                                              //}
  664  5      #endif
  665  5                                              dtc_status_changed = TRUE;
  666  5                                      }                               
  667  4                              }
  668  3      
  669  3                              /* Check test clear */
  670  3                  if (0u != (dtc_test_type & DTC_TEST_CLEAR))
  671  3                  {
  672  4                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  673  4                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  674  4      
  675  4                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  676  4      
  677  4      
  678  4                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
  679  4                      {
  680  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = FALSE;
  681  5                          dtc_status_changed = TRUE;
  682  5                      }
  683  4                  }
  684  3      
  685  3                              /* Check test new operation */
  686  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  687  3                  {
  688  4                      /* Nothing to do */
  689  4                  }                   
  690  3                      }
  691  2                      else
  692  2                      {
  693  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  694  3                               * Please adapter the default value according to SPEC. */       
  695  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC)
  696  3                               {
  697  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.pendingDTC = FALSE;
  698  4                                      dtc_status_changed = TRUE;
  699  4                               }                      
  700  3                      }
  701  2              }
  702  1              
  703  1              return dtc_status_changed;
  704  1      }
  705         
  706         /***********************************************************************
  707         * FUNCTION    : DescMgr_ProcConfirmedDTC
  708         * DESCRIPTION : None
  709         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  710         * RETURN      : None
  711         ***********************************************************************/
  712         BOOLEAN DescMgr_ProcConfirmedDTC(INT8U dtc_code, INT8U dtc_test_type)
  713         {
  714  1              BOOLEAN dtc_status_changed = FALSE;
  715  1      
  716  1              if (dtc_code < DTC_CODE_MAX_NUM)
  717  1              {
  718  2                      /* DTC Status Bit3 supported check */
  719  2                      //if (0u != (DTC_STATUS_BIT3_MASK_CDTC & DTC_STATUS_AVAILABILITY_MASK)) // polyspace test by gzz 2020.12
             -.30
  720  2                      {
  721  3                              /* Check test initial */
  722  3                              if (0u != (dtc_test_type & DTC_TEST_INIT))
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 13  

  723  3                  {
  724  4                      /* Nothing to do */
  725  4                  }   
  726  3      
  727  3                              /* Check test passed */
  728  3                  if (0u != (dtc_test_type & DTC_TEST_PASSED))
  729  3                  {                
  730  4      #if defined (DTC_AGING_COUNTER)
  731  4                      if (TRUE == bSetClearHistoryFaultCntFlag[dtc_code])
  732  4                      {
  733  5                                              bSetClearHistoryFaultCntFlag[dtc_code] = FALSE;
  734  5      
  735  5                                              if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
  736  5                          {
  737  6                              if (dtc_extern_data_record[dtc_code].exAgingCnt >= DTC_STATUS_AGING_CNT_MAX)
  738  6                              {
  739  7                                  dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = FALS
             -E;
  740  7                                                              
  741  7                                                              /* DTC aging counter and DTC occurrence counter will be reset to 0 by self healing */
  742  7                                  dtc_extern_data_record[dtc_code].exAgingCnt = DTC_STATUS_AGING_CNT_RESET;
  743  7                                                              dtc_extern_data_record[dtc_code].exOccuranceCnt = 0u;
  744  7                                                              
  745  7                                                              #if 0  // no pending and aged counter requirement
                                          dtc_pending_count[dtc_code] = 0u;
              
                                                                      /* When the aging counter is up to self healing value, DTC will be moved out from current memory */
                                                                      //CanDiagApp_DTC_StatusDataReport(dtc_code, DTC_TEST_CLEAR);
                                                                      
                                                                      if(dtc_aged_count[dtc_code] < 255u)
                                                                      {
                                                                              /* When the DTC's aging counter is up to set-value, Aged counter will be increased by 1. */
                                                                              dtc_aged_count[dtc_code]++;
                                                                      }
                                                                      else
                                                                      {
                                                                              /* If the aged counter is up to 255, it will keep to 255. */
                                                                              dtc_aged_count[dtc_code] = 255u;
                                                                      }
                                                                      #endif
  762  7                                  dtc_status_changed = TRUE;
  763  7                              }
  764  6                              else
  765  6                              {
  766  7                                      /* ECU error never occur during the last whole operation cycle, driving cycle, or
             - warm-up cycle.The DTC aging
  767  7                                                               * counter value shall be increased by 1. */
  768  7                                  dtc_extern_data_record[dtc_code].exAgingCnt++;
  769  7                                  dtc_status_changed = TRUE;
  770  7                              }
  771  6                          }
  772  5                      }
  773  4      #endif
  774  4                  }
  775  3      
  776  3                              /* Check test failed */
  777  3                              if (0u != (dtc_test_type & DTC_TEST_FAILED))
  778  3                  {
  779  4                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
  780  4                      {                   
  781  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = TRUE;
  782  5                          dtc_extern_data_record[dtc_code].exAgingCnt = DTC_STATUS_AGING_CNT_RESET;
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 14  

  783  5                          
  784  5                          dtc_status_changed = TRUE;
  785  5                      }
  786  4                  }
  787  3      
  788  3                              /* Check test clear */
  789  3                  if (0u != (dtc_test_type & DTC_TEST_CLEAR))
  790  3                  {
  791  4                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  792  4                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  793  4                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  794  4      
  795  4                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
  796  4                      {
  797  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = FALSE;
  798  5                          dtc_status_changed = TRUE;
  799  5                      }
  800  4                  }
  801  3      
  802  3                              /* Check test new operation */
  803  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  804  3                  {
  805  4                      /* Nothing to do */
  806  4                  }
  807  3                      }
  808  2      #if 0 // polyspace test by gzz 2020.12.30               
                              else
                              {
                                      /* DTC Status Bit not supported, set to a default value if needed. 
                                       * Please adapter the default value according to SPEC. */
                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC)
                          {
                              dtc_current_status_record[dtc_code].dtc_status.status_bits.confirmedDTC = FALSE;
                              dtc_status_changed = TRUE;
                          }                   
                              }
              #endif
  820  2              }
  821  1              
  822  1              return dtc_status_changed;
  823  1      }
  824         
  825         /***********************************************************************
  826         * FUNCTION    : DescMgr_ProcTestNotCompletedSinceLastClear
  827         * DESCRIPTION : None
  828         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  829         * RETURN      : None
  830         ***********************************************************************/
  831         BOOLEAN DescMgr_ProcTestNotCompletedSinceLastClear(INT8U dtc_code, INT8U dtc_test_type)
  832         {
  833  1              BOOLEAN dtc_status_changed = FALSE;
  834  1      
  835  1              if (dtc_code < DTC_CODE_MAX_NUM)
  836  1              {
  837  2                      /* DTC Status Bit4 supported check */
  838  2                      if (0u != (DTC_STATUS_BIT4_MASK_TNCSLC & DTC_STATUS_AVAILABILITY_MASK))
  839  2                      {
  840  3                              /* Check test initial */
  841  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  842  3                              {
  843  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear
             -)
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 15  

  844  4                                      {
  845  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = TRUE;
  846  5                                              dtc_status_changed = TRUE;
  847  5                                      }
  848  4                              }
  849  3      
  850  3                              /* Check test passed */
  851  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
  852  3                              {
  853  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear)
  854  4                                      {
  855  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = FALSE;
  856  5                                              dtc_status_changed = TRUE;
  857  5                                      }       
  858  4                              }
  859  3      
  860  3                              /* Check test failed */
  861  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  862  3                              {
  863  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear)
  864  4                                      {
  865  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = FALSE;
  866  5                                              dtc_status_changed = TRUE;
  867  5                                      }       
  868  4                              }       
  869  3      
  870  3                              /* Check test clear */
  871  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  872  3                              {
  873  4                                      /* Clear all counter */
  874  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  875  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  876  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  877  4      
  878  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear
             -)
  879  4                                      {
  880  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = TRUE;
  881  5                                              dtc_status_changed = TRUE;
  882  5                                      }
  883  4                              }       
  884  3      
  885  3                              /* Check test new operation */
  886  3                  if (0u != (dtc_test_type&DTC_TEST_NEW_OPR))
  887  3                  {
  888  4                      /* Nothing to do */
  889  4                  }                   
  890  3                      }
  891  2                      else
  892  2                      {
  893  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  894  3                               * Please adapter the default value according to SPEC. */       
  895  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear)
  896  3                               {
  897  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedSinceLastClear = FALSE;
  898  4                                      dtc_status_changed = TRUE;
  899  4                               }                      
  900  3                      }
  901  2              }
  902  1              
  903  1              return dtc_status_changed;
  904  1      }
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 16  

  905         
  906         /***********************************************************************
  907         * FUNCTION    : DescMgr_ProcTestFailedSinceLastClear
  908         * DESCRIPTION : None
  909         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  910         * RETURN      : None
  911         ***********************************************************************/
  912         BOOLEAN DescMgr_ProcTestFailedSinceLastClear(INT8U dtc_code, INT8U dtc_test_type)
  913         {
  914  1              BOOLEAN dtc_status_changed = FALSE;
  915  1      
  916  1              if (dtc_code < DTC_CODE_MAX_NUM)
  917  1              {
  918  2                      /* DTC Status Bit5 supported check */
  919  2                      if (0u != (DTC_STATUS_BIT5_MASK_TFSLC & DTC_STATUS_AVAILABILITY_MASK))
  920  2                      {
  921  3                              /* Check test initial */
  922  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
  923  3                              {
  924  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  925  4                                      {
  926  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = FALSE;
  927  5                                              dtc_status_changed = TRUE;
  928  5                                      }
  929  4                              }
  930  3      
  931  3                              /* Check test passed */
  932  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
  933  3                              {
  934  4                                      /* Nothing to do. */
  935  4                              }
  936  3      
  937  3                              /* Check test failed */
  938  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
  939  3                              {
  940  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  941  4                                      {
  942  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = TRUE;
  943  5                                              dtc_status_changed = TRUE;
  944  5                                      }       
  945  4                              }       
  946  3      
  947  3                              /* Check test clear */
  948  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
  949  3                              {
  950  4                                      /* Clear all counter */
  951  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
  952  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
  953  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
  954  4      
  955  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  956  4                                      {
  957  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = FALSE;
  958  5                                              dtc_status_changed = TRUE;
  959  5                                      }
  960  4                              }       
  961  3      
  962  3                              /* Check test new operation */
  963  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
  964  3                  {
  965  4                      /* Nothing to do */
  966  4                  }                   
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 17  

  967  3                      }
  968  2                      else
  969  2                      {
  970  3                              /* DTC Status Bit not supported, set to a default value if needed. 
  971  3                               * Please adapter the default value according to SPEC. */       
  972  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear)
  973  3                               {
  974  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testFailedSinceLastClear = FALSE;
  975  4                                      dtc_status_changed = TRUE;
  976  4                               }                      
  977  3                      }
  978  2              }
  979  1      
  980  1              return dtc_status_changed;
  981  1      }
  982         
  983         /***********************************************************************
  984         * FUNCTION    : DescMgr_ProcTestNotCompletedThisOperationCycle
  985         * DESCRIPTION : None
  986         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
  987         * RETURN      : None
  988         ***********************************************************************/
  989         BOOLEAN DescMgr_ProcTestNotCompletedThisOperationCycle(INT8U dtc_code, INT8U dtc_test_type)
  990         {
  991  1              BOOLEAN dtc_status_changed = FALSE;
  992  1      
  993  1              if (dtc_code < DTC_CODE_MAX_NUM)
  994  1              {
  995  2                      /* DTC Status Bit6 supported check */
  996  2                      if (0u != (DTC_STATUS_BIT6_MASK_TNCTOC & DTC_STATUS_AVAILABILITY_MASK))
  997  2                      {
  998  3                              /* Check test initial */
  999  3                              if (0 != (dtc_test_type & DTC_TEST_INIT))
 1000  3                              {
 1001  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationC
             -ycle)
 1002  4                                      {
 1003  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = TRUE;
 1004  5                                              dtc_status_changed = TRUE;
 1005  5                                      }
 1006  4                              }
 1007  3      
 1008  3                              /* Check test passed */
 1009  3                              if (0 != (dtc_test_type & DTC_TEST_PASSED))
 1010  3                              {
 1011  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCy
             -cle)
 1012  4                                      {
 1013  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = FALSE
             -;
 1014  5                                              dtc_status_changed = TRUE;
 1015  5                                      }
 1016  4                              }
 1017  3      
 1018  3                              /* Check test failed */
 1019  3                              if (0 != (dtc_test_type & DTC_TEST_FAILED))
 1020  3                              {
 1021  4                                      if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCy
             -cle)
 1022  4                                      {
 1023  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = FALSE
             -;
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 18  

 1024  5                                              dtc_status_changed = TRUE;
 1025  5                                      }       
 1026  4                              }       
 1027  3      
 1028  3                              /* Check test clear */
 1029  3                              if (0 != (dtc_test_type & DTC_TEST_CLEAR))
 1030  3                              {
 1031  4                                      /* Clear all counter */
 1032  4                                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
 1033  4                                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
 1034  4                                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
 1035  4      
 1036  4                                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationC
             -ycle)
 1037  4                                      {
 1038  5                                              dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = TRUE;
 1039  5                                              dtc_status_changed = TRUE;
 1040  5                                      }
 1041  4                              }       
 1042  3      
 1043  3                              /* Check test new operation */
 1044  3                  if (0u != (dtc_test_type&DTC_TEST_NEW_OPR))
 1045  3                  {
 1046  4                      if (FALSE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedTh
             -isOperationCycle)
 1047  4                      {
 1048  5                          dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperati
             -onCycle = TRUE;
 1049  5                          dtc_status_changed = TRUE;
 1050  5                      }
 1051  4                  }                   
 1052  3                      }
 1053  2                      else
 1054  2                      {
 1055  3                              /* DTC Status Bit not supported, set to a default value if needed. 
 1056  3                               * Please adapter the default value according to SPEC. */       
 1057  3                               if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCy
             -cle)
 1058  3                               {
 1059  4                                      dtc_current_status_record[dtc_code].dtc_status.status_bits.testNotCompletedThisOperationCycle = FALSE
             -;
 1060  4                                      dtc_status_changed = TRUE;
 1061  4                               }                      
 1062  3                      }
 1063  2              }
 1064  1      
 1065  1              return dtc_status_changed;
 1066  1      }
 1067         
 1068         /***********************************************************************
 1069         * FUNCTION    : DescMgr_ProcWarningIndicatorRequested
 1070         * DESCRIPTION : None
 1071         * INPUTS      : INT8U dtc_code, INT8U dtc_test_type
 1072         * RETURN      : None
 1073         ***********************************************************************/
 1074         BOOLEAN DescMgr_ProcWarningIndicatorRequested(INT8U dtc_code, INT8U dtc_test_type)
 1075         {
 1076  1              BOOLEAN dtc_status_changed = FALSE;
 1077  1      
 1078  1          if (dtc_code < DTC_CODE_MAX_NUM)
 1079  1          {
 1080  2                      /* DTC Status Bit7 supported check */
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 19  

 1081  2                      if (0u != (DTC_STATUS_BIT7_MASK_WIR & DTC_STATUS_AVAILABILITY_MASK)) 
 1082  2              {
 1083  3                              /* Check test initial */
 1084  3                  if (0u != (dtc_test_type & DTC_TEST_INIT))
 1085  3                  {
 1086  4                                      /* Not implement yet */
 1087  4                  }
 1088  3      
 1089  3                              /* Check test passed */
 1090  3                  if (0u != (dtc_test_type & DTC_TEST_PASSED))
 1091  3                  {
 1092  4                      /* Not implement yet */
 1093  4                  }
 1094  3      
 1095  3                              /* Check test failed */                 
 1096  3                  if (0u != (dtc_test_type & DTC_TEST_FAILED))
 1097  3                  {
 1098  4                      /* Not implement yet */
 1099  4                  }
 1100  3      
 1101  3                              /* Check test clear */                  
 1102  3                  if (0u != (dtc_test_type & DTC_TEST_CLEAR))
 1103  3                  {
 1104  4                      dtc_status_time_record_cnt[dtc_code].dtc_create_time_cnt = 0u;
 1105  4                      dtc_status_time_record_cnt[dtc_code].dtc_recover_time_cnt = 0u;
 1106  4                      dtc_create_record_cnt[dtc_code].dtc_create_cnt = 0u;
 1107  4      
 1108  4                      /* Not implement yet */
 1109  4                  }
 1110  3      
 1111  3                              /* Check test new operation */
 1112  3                  if (0u != (dtc_test_type & DTC_TEST_NEW_OPR))
 1113  3                  {
 1114  4                      /* Not implement yet */
 1115  4                  }    
 1116  3              }
 1117  2              else
 1118  2              {
 1119  3                              /* DTC Status Bit not supported, set to a default value if needed. 
 1120  3                               * Please adapter the default value according to SPEC. */
 1121  3                  if (TRUE == dtc_current_status_record[dtc_code].dtc_status.status_bits.warningIndicatorRequest
             -ed)
 1122  3                  {
 1123  4                      dtc_current_status_record[dtc_code].dtc_status.status_bits.warningIndicatorRequested = FAL
             -SE;
 1124  4                      dtc_status_changed = TRUE;
 1125  4                  }
 1126  3              }
 1127  2          }
 1128  1              
 1129  1              return dtc_status_changed;
 1130  1      }
 1131         
 1132         /*****************************************************************************************
 1133         *  Name        : DescMgr_ExtendDataReport
 1134         *  Description :     
 1135         *  Parameter   : INT8U dtc_code
 1136         *  Returns     : none 
 1137         *****************************************************************************************/
 1138         DESC_MGR_STAT void DescMgr_ExtendDataReport(INT8U dtc_code)
 1139         {
 1140  1              // TODO:
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 20  

 1141  1      }
*** WARNING C47 IN LINE 1138 OF src\bsw\desc\desc_mgr.c: 'dtc_code': unreferenced parameter
 1142         
 1143         /*****************************************************************************************
 1144         *  Name        : DescMgr_SnapshotDataReport
 1145         *  Description :     
 1146         *  Parameter   : INT8U dtc_code
 1147         *  Returns     : none 
 1148         *****************************************************************************************/
 1149         DESC_MGR_STAT void DescMgr_SnapshotDataReport(INT8U dtc_code)
 1150         {
 1151  1              // TODO:Snapshot data need to conversion
 1152  1      
 1153  1              const T_ADC_APP *ptr = AdcApp_SampleData();
 1154  1      
 1155  1              // DF00: power voltage
 1156  1              dtc_snapshot_data_record[dtc_code].snapPowerVoltage = (INT8U)(ptr->vehiclePowerVoltage / 100u);
 1157  1      
 1158  1              // DF01: ECU temperature
 1159  1              dtc_snapshot_data_record[dtc_code].snapTemperature = ptr->environmentTemperature;
 1160  1      
 1161  1              // DF02: Cylinder Travel
 1162  1              dtc_snapshot_data_record[dtc_code].snapCylinderTravel_HB = (INT8U)((ptr->mainCylinderLocation1 & 0xFF00)>
             ->8);
 1163  1              dtc_snapshot_data_record[dtc_code].snapCylinderTravel_LB = (INT8U)(ptr->mainCylinderLocation1 & 0x00FF);
 1164  1      
 1165  1              // DF03: pedal Travel
 1166  1              dtc_snapshot_data_record[dtc_code].snapPedalTravel_HB = (INT8U)((ptr->brakePedalLocation1 & 0xFF00)>>8);
 1167  1              dtc_snapshot_data_record[dtc_code].snapPedalTravel_LB = (INT8U)(ptr->brakePedalLocation1 & 0x00FF);
 1168  1      
 1169  1              // DF04: motor voltage
 1170  1              dtc_snapshot_data_record[dtc_code].snapMotorVoltage = (INT8U)(ptr->brakeMotorVlinkVoltage / 100u);
 1171  1      
 1172  1              // DF05: motor current
 1173  1              dtc_snapshot_data_record[dtc_code].snapMotorCurrent_HB = (INT8U)((ptr->brakeMotorCurrent & 0xFF00)>>8);
 1174  1              dtc_snapshot_data_record[dtc_code].snapMotorCurrent_LB = (INT8U)(ptr->brakeMotorCurrent & 0x00FF);
 1175  1      
 1176  1              // DF06: Vehicle speed
 1177  1              dtc_snapshot_data_record[dtc_code].snapVehicleSpeed = (INT8U)(VCU_VehicleSpeed / 100u);
 1178  1      
 1179  1              // DF07: gear position
 1180  1              dtc_snapshot_data_record[dtc_code].snapGearPosition = 0xFF;
 1181  1      
 1182  1              // DF08: brake mode
 1183  1              dtc_snapshot_data_record[dtc_code].snapBrakeMode = BrakeSysMode;
 1184  1      
 1185  1              // DF09: target pressure
 1186  1              dtc_snapshot_data_record[dtc_code].snapTargetPressure = g_wireControlObjPressure;
 1187  1      
 1188  1              // DF10: actual pressure
 1189  1              dtc_snapshot_data_record[dtc_code].snapActualPressure = g_wireControlActualPressure;
 1190  1      
 1191  1              // DF11: reserved
 1192  1              dtc_snapshot_data_record[dtc_code].snapRelaySwitchStatus = (g_MainRelaySts & 0x01)
 1193  1                                                                                                                                      | ((g_PedalPowerSts & 0x01) << 1)
 1194  1                                                                                                                                      | ((g_CylinderPowerSts & 0x01) << 2);
*** WARNING C192 IN LINE 1194 OF src\bsw\desc\desc_mgr.c: '=': value truncated
 1195  1              dtc_snapshot_data_record[dtc_code].snapPreDriveStatus = (g_PredriverEnableSts & 0x01)
 1196  1                                                                                                                                      | ((g_inPreDriverErrorSts & 0x01) << 1)
 1197  1                                                                                                                                      | ((gRTE_wireControlPressureLoopFlag & 0x01) << 2)
 1198  1                                                                                                                                      | ((g_PressureSensorFaultFlag & 0x01) << 3);
*** WARNING C192 IN LINE 1198 OF src\bsw\desc\desc_mgr.c: '=': value truncated
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 21  

 1199  1      
 1200  1              return;
 1201  1      }
 1202         
 1203         /******************************************************************************
 1204         * Name         :  DescMgr_SetDeltaTripCounter 
 1205         * Called by    :   
 1206         * Preconditions:  None
 1207         * Parameters   :  None
 1208         * Description  :  uidq2008
 1209         ******************************************************************************/
 1210         DESC_MGR_STAT void DescMgr_SetDeltaTripCounter(INT8U dtc_code, BOOLEAN delta_Trip_flag)
 1211         {
 1212  1         if (TRUE == delta_Trip_flag)
 1213  1         {
 1214  2              delta_trip_count |= (1u << dtc_code);
 1215  2         }
 1216  1         else
 1217  1         {
 1218  2              delta_trip_count &= ~(1u << dtc_code);
 1219  2         }
 1220  1      }
 1221         
 1222         /***********************************************************************
 1223         * FUNCTION    : DescMgr_CanDiagDtcRecordBodyEnableCheck
 1224         * DESCRIPTION : 
 1225         * INPUTS      : none
 1226         * RETURN      : none
 1227         ***********************************************************************/
 1228         BOOLEAN DescMgr_CanDiagDtcRecordBodyEnableCheck(void)
 1229         {
 1230  1          return (((dtc_record_enable_mask & DTC_RECORD_ENALBE_BDY) != 0u) ? 1u : 0u);
 1231  1      }
 1232         
 1233         
 1234         /***********************************************************************
 1235         * FUNCTION    : DescMgr_CanDiagDtcRecordNmEnableCheck
 1236         * DESCRIPTION : 
 1237         * INPUTS      : none
 1238         * RETURN      : none
 1239         ***********************************************************************/
 1240         BOOLEAN DescMgr_CanDiagDtcRecordNmEnableCheck(void)
 1241         {
 1242  1          return (((dtc_record_enable_mask & DTC_RECORD_ENABLE_NM) != 0u) ? 1u : 0u);
 1243  1      }
 1244         
 1245         
 1246         /***********************************************************************
 1247         * FUNCTION    : DescMgr_CanDiagDtcRecordOpVoltEnableCheck
 1248         * DESCRIPTION : 
 1249         * INPUTS      : none
 1250         * RETURN      : none
 1251         ***********************************************************************/
 1252         BOOLEAN DescMgr_CanDiagDtcRecordOpVoltEnableCheck(void)
 1253         {
 1254  1          return (((dtc_record_enable_mask & DTC_RECORD_ENABLE_OP_VOLT) != 0u) ? 1u : 0u);
 1255  1      }
 1256         
 1257         /**** $85 ****/
 1258         
 1259         /***********************************************************************
 1260         * FUNCTION    : DescMgr_CanDiagDtcControlSettingOn
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 22  

 1261         * DESCRIPTION : TRUE:means control dtc setting is on,
 1262         *               FALSE:means control dtc setting is off.
 1263         * INPUTS      : none
 1264         * RETURN      : none
 1265         ***********************************************************************/
 1266         void DescMgr_CanDiagDtcControlSettingOn(void)
 1267         {
 1268  1          dtc_control_setting_on_off = TRUE;
 1269  1      }
 1270         
 1271         /***********************************************************************
 1272         * FUNCTION    : DescMgr_CanDiagDtcControlSettingOff
 1273         * DESCRIPTION : TRUE:means control dtc setting is on,
 1274         *               FALSE:means control dtc setting is off.
 1275         * INPUTS      : none
 1276         * RETURN      : none
 1277         ***********************************************************************/
 1278         void DescMgr_CanDiagDtcControlSettingOff(void)
 1279         {
 1280  1          dtc_control_setting_on_off = FALSE;
 1281  1      }
 1282         
 1283         /***********************************************************************
 1284         * FUNCTION    : DescMgr_CanDiagDtcControlSettingCheck
 1285         * DESCRIPTION : TRUE:means control dtc setting is on,
 1286         *               FALSE:means control dtc setting is off.
 1287         * INPUTS      : none
 1288         * RETURN      : none
 1289         ***********************************************************************/
 1290         BOOLEAN DescMgr_CanDiagDtcControlSettingCheck(void)
 1291         {
 1292  1          return dtc_control_setting_on_off;
 1293  1      }
 1294         
 1295         /**** $14 ****/
 1296         /***********************************************************************
 1297         * FUNCTION    : DescMgr_CanDiagClearDtcDataStart
 1298         * DESCRIPTION : none
 1299         * INPUTS      : none
 1300         * RETURN      : none
 1301         ***********************************************************************/
 1302         void DescMgr_CanDiagClearDtcDataStart(void)
 1303         {
 1304  1          /* do not care about last time, just reset the whole clear things */
 1305  1          dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_START; /* clear begin */
 1306  1          
 1307  1          /* Adjust dtc record enable mask */
 1308  1          DescMgr_CanDigDtcRecordEnableAdjust();
 1309  1      }
 1310         
 1311         /***********************************************************************
 1312         * FUNCTION    : DescMgr_CanDiagDtcStatusServiceClearAll
 1313         * DESCRIPTION : Do not clear all the dtc status at the same time, it would cost worse CPU/thread load,
 1314         *               So just separate the clear action, Called by desc_delay_service_task to do this job.
 1315         * INPUTS      : none
 1316         * RETURN      : none
 1317         ***********************************************************************/
 1318         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearAll(void)
 1319         {
 1320  1          BOOLEAN clear_finished = FALSE;
 1321  1      
 1322  1          if (dtc_status_svc14_clear_counter < DTC_CODE_MAX_NUM)
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 23  

 1323  1          {
 1324  2                      DescMgr_DtcStatusDataReport(dtc_status_svc14_clear_counter, DTC_TEST_CLEAR);
 1325  2      
 1326  2      #ifdef DTC_AGING_COUNTER
 1327  2                      memset(dtc_extern_data_record, 0u, sizeof(dtc_extern_data_record));
 1328  2                      //memset(dtc_aging_count, DTC_STATUS_AGING_CNT_RESET, DTC_CODE_MAX_NUM);
 1329  2                      //memset(dtc_pending_count, DTC_STATUS_AGING_CNT_RESET, DTC_CODE_MAX_NUM);      
 1330  2                      //memset(dtc_occurance_count, DTC_STATUS_AGING_CNT_RESET, DTC_CODE_MAX_NUM);
 1331  2      #endif
 1332  2              dtc_status_svc14_clear_counter++;
 1333  2                      clear_finished = FALSE;
 1334  2          }
 1335  1          else
 1336  1          {
 1337  2                      /* Adjust dtc record enable mask */
 1338  2              DescMgr_CanDigDtcRecordEnableAdjust();    
 1339  2              dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_FINISHED;  
 1340  2              clear_finished = TRUE;
 1341  2          }
 1342  1          
 1343  1          return clear_finished;
 1344  1      }
 1345         
 1346         /***********************************************************************
 1347         * FUNCTION    : DescMgr_CanDiagDtcStatusServiceClearFinished
 1348         * DESCRIPTION : none                        
 1349         * INPUTS      : none
 1350         * RETURN      : none
 1351         ***********************************************************************/
 1352         DESC_MGR_STAT BOOLEAN DescMgr_CanDiagDtcStatusServiceClearFinished(void)
 1353         {
 1354  1          return ((DTC_STATUS_SVC14_CLEAR_FINISHED == dtc_status_svc14_clear_counter) ? 1u : 0u);
 1355  1      }
 1356         
 1357         /***********************************************************************
 1358         * FUNCTION    : DescMgr_CanDigDtcRecordEnableAdjust
 1359         * DESCRIPTION : none
 1360         * INPUTS      : none
 1361         * RETURN      : none
 1362         ***********************************************************************/
 1363         DESC_MGR_STAT void DescMgr_CanDigDtcRecordEnableAdjust(void)
 1364         {
 1365  1      #if 0 // polyspace test by gzz 2020.12.30
                      /* diagnosis function start-up init delay according to vehicle manufacturer */
                  if (CAN_DIAG_INIT_DELAY_TIMEOUT != can_diag_init_delay_timer)
                  {
                      /* all dtc record disable */
                      dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;   
                      return;
                  }
                  else
                  {
                      /* Disable here, because we do not know the other situations, so let other judgement following to 
             -do this job. */
                      dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
                              return; 
                  }
              
                  /* dtc eeprom init delay */
                  if (DTC_INIT_STEP_FINISHED != dtc_eeprom_init_step)
                  {
                      /* all dtc record disable */
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 24  

                      dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
                      return;    
                  }
                  else
                  {
                      /* Disable here, because we do not know the other situations, so let other judgement following to 
             -do this job. */
                      dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE; 
                              return; 
                  }
              
                  /* service $14 clear dtc eeprom init delay */
                  if (DTC_STATUS_SVC14_CLEAR_FINISHED != dtc_status_svc14_clear_counter)
                  {
                      /* all dtc record disable */
                      dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;
                              return;    
                  }
                  else
                  {
                      /* Disable here, because we do not know the other situations, so let other judgement following to 
             -do this job. */
                      dtc_record_enable_mask = DTC_RECORD_ENABLE_NONE;        
                  }
              #endif
 1407  1          /* other delay according to vehicle manufacturer */
 1408  1              // TODO:System power voltage status 9-16V.      
 1409  1      #if 0 // polyspace test by gzz 2020.12.30
                  if (1)  /*if power out range of [9-16v],stop candiag*/
                  {
                      dtc_record_enable_mask = (dtc_record_enable_mask | DTC_RECORD_ENALBE_BDY);//DTC_RECORD_ENABLE_OP_V
             -OLT
              
                      if (CAN_DIAG_BAT_VOLT_RECOVER_DELAY_TIMEOUT != can_diag_bat_volt_recover_delay_timer)
                      {
                          dtc_record_enable_mask = (dtc_record_enable_mask & (~DTC_RECORD_ENABLE_NM));
                          dtc_record_enable_mask = (dtc_record_enable_mask & (~DTC_RECORD_ENALBE_BDY));
              
                          return;
                      }
                      else
                      {
                          dtc_record_enable_mask = (dtc_record_enable_mask | DTC_RECORD_ENALBE_BDY);
              
                          if (CAN_DIAG_NM_INIT_DELAY_TIMEOUT == can_diag_init_nm_delay_timer)
                          {
                              dtc_record_enable_mask = (dtc_record_enable_mask | DTC_RECORD_ENABLE_NM);
                          }
                          else
                          {
                              dtc_record_enable_mask = (dtc_record_enable_mask & (~DTC_RECORD_ENABLE_NM));
                          }
                      }
                  }
                  else
                  {
                      dtc_record_enable_mask = (dtc_record_enable_mask|DTC_RECORD_ENALBE_BDY);//DTC_RECORD_ENABLE_OP_VOL
             -T
                  }
              #endif
 1440  1      }
 1441         
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 25  

 1442         /**** $19 ****/
 1443         
 1444         /***********************************************************************
 1445         * FUNCTION    : DescMgr_CanDiagGetDtcCount
 1446         * DESCRIPTION : none
 1447         * INPUTS      : INT8U status_mask
 1448         * RETURN      : none
 1449         ***********************************************************************/
 1450         INT16U DescMgr_CanDiagGetDtcCount(INT8U status_mask)
 1451         {
 1452  1          INT16U dtc_count = 0u;
 1453  1          INT8U record_count = 0u;
 1454  1      
 1455  1          for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
 1456  1          {
 1457  2              if ((dtc_current_status_record[record_count].dtc_status.status_byte & status_mask) != 0u)
 1458  2              {
 1459  3                  dtc_count++;
 1460  3              }
 1461  2          }
 1462  1          
 1463  1          return dtc_count;
 1464  1      }
 1465         
 1466         /***********************************************************************
 1467         * FUNCTION    : DescMgr_CanDiagGetDtcStatusByStatusMask
 1468         * DESCRIPTION : none
 1469         * INPUTS      : INT8U *p_dtc, INT8U status_mask
 1470         * RETURN      : none
 1471         ***********************************************************************/
 1472         INT16U DescMgr_CanDiagGetDtcStatusByStatusMask(INT8U *p_dtc, INT8U status_mask)
 1473         {
 1474  1          INT16U dtc_count = 0u;
 1475  1          INT8U record_count = 0u;
 1476  1      
 1477  1          for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
 1478  1          {
 1479  2              if ((dtc_current_status_record[record_count].dtc_status.status_byte & status_mask) != 0u)
 1480  2              {
 1481  3                  *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_high_byte;
 1482  3                  *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_middle_byte;
 1483  3                  *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_low_byte;
 1484  3                  *p_dtc++ = dtc_current_status_record[record_count].dtc_status.status_byte;
 1485  3                  
 1486  3                  dtc_count++;
 1487  3              }
 1488  2          }
 1489  1          
 1490  1          return dtc_count;
 1491  1      }
 1492         
 1493         /***********************************************************************
 1494         * FUNCTION    : DescMgr_CanDiagGetSupportedDtc
 1495         * DESCRIPTION : none
 1496         * INPUTS      : *p_dtc
 1497         * RETURN      : none
 1498         ***********************************************************************/
 1499         INT16U DescMgr_CanDiagGetSupportedDtc(INT8U *p_dtc)
 1500         {
 1501  1          INT16U dtc_count = 0u;
 1502  1          INT8U record_count = 0u;
 1503  1      
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 26  

 1504  1          for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
 1505  1          {
 1506  2              *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_high_byte;
 1507  2              *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_middle_byte;
 1508  2              *p_dtc++ = dtc_code_data[record_count].dtc_bytes.dtc_low_byte;
 1509  2              *p_dtc++ = dtc_current_status_record[record_count].dtc_status.status_byte;
 1510  2              
 1511  2              dtc_count++;
 1512  2          }
 1513  1              
 1514  1          return dtc_count;
 1515  1      }
 1516         
 1517         /***********************************************************************
 1518         * FUNCTION    : DescMgr_CanDiagGetSnapshotData
 1519         * DESCRIPTION : none
 1520         * INPUTS      : INT8U *res_data, INT8U *req_dtc
 1521         * RETURN      : none
 1522         ***********************************************************************/
 1523         void DescMgr_CanDiagGetSnapshotData(INT8U *res_data, INT8U *req_dtc)
 1524         {
 1525  1          INT8U record_count;
 1526  1              
 1527  1              for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)   
 1528  1          {
 1529  2              if ((dtc_code_data[record_count].dtc_bytes.dtc_high_byte == req_dtc[2]) 
 1530  2                       && (dtc_code_data[record_count].dtc_bytes.dtc_middle_byte == req_dtc[3])
 1531  2                       && (dtc_code_data[record_count].dtc_bytes.dtc_low_byte == req_dtc[4]))
 1532  2              {
 1533  3                      if ((dtc_current_status_record[record_count].dtc_status.status_byte & DTC_STATUS_AVAILABILITY_MAS
             -K) != 0)
 1534  3                      {
 1535  4                              DescMgr_ReturnSnapshotData(res_data, record_count);
 1536  4                              }
 1537  3                  else
 1538  3                  {
 1539  4                      DescMgr_ReturnSnapshotDataDefault(res_data, record_count);
 1540  4                  }
 1541  3              }
 1542  2          }
 1543  1      }
 1544         
 1545         /***********************************************************************
 1546         * FUNCTION    : DescMgr_ReturnSnapshotData
 1547         * DESCRIPTION : none
 1548         * INPUTS      : INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number
 1549         * RETURN      : none
 1550         ***********************************************************************/
 1551         DESC_MGR_STAT void DescMgr_ReturnSnapshotData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number)
 1552         {
 1553  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1554  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;          /* DTCMiddleByte */
 1555  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1556  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */     
 1557  1          *(res_data+4) = 0x01; /* DTC Snapshot Record Number */   
 1558  1          *(res_data+5) = 0x0C; /* DTC Snapshot Record Number Of Identifiers */
 1559  1      
 1560  1          *(res_data+6) = 0xDF;
 1561  1          *(res_data+7) = 0x00;
 1562  1          *(res_data+8) = dtc_snapshot_data_record[dtc_number].snapPowerVoltage;
 1563  1      
 1564  1              *(res_data+9) = 0xDF;
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 27  

 1565  1          *(res_data+10) = 0x01;
 1566  1          *(res_data+11) = dtc_snapshot_data_record[dtc_number].snapTemperature;
 1567  1      
 1568  1              *(res_data+12) = 0xDF;
 1569  1          *(res_data+13) = 0x02;
 1570  1          *(res_data+14) = dtc_snapshot_data_record[dtc_number].snapCylinderTravel_HB;
 1571  1              *(res_data+15) = dtc_snapshot_data_record[dtc_number].snapCylinderTravel_LB;
 1572  1      
 1573  1              *(res_data+16) = 0xDF;
 1574  1          *(res_data+17) = 0x03;
 1575  1          *(res_data+18) = dtc_snapshot_data_record[dtc_number].snapPedalTravel_HB;
 1576  1              *(res_data+19) = dtc_snapshot_data_record[dtc_number].snapPedalTravel_LB;
 1577  1      
 1578  1              *(res_data+20) = 0xDF;
 1579  1          *(res_data+21) = 0x04;
 1580  1          *(res_data+22) = dtc_snapshot_data_record[dtc_number].snapMotorVoltage;
 1581  1      
 1582  1              *(res_data+23) = 0xDF;
 1583  1          *(res_data+24) = 0x05;
 1584  1          *(res_data+25) = dtc_snapshot_data_record[dtc_number].snapMotorCurrent_HB;
 1585  1              *(res_data+26) = dtc_snapshot_data_record[dtc_number].snapMotorCurrent_LB;
 1586  1      
 1587  1              *(res_data+27) = 0xDF;
 1588  1          *(res_data+28) = 0x06;
 1589  1          *(res_data+29) = dtc_snapshot_data_record[dtc_number].snapVehicleSpeed;
 1590  1      
 1591  1              *(res_data+30) = 0xDF;
 1592  1          *(res_data+31) = 0x07;
 1593  1          *(res_data+32) = dtc_snapshot_data_record[dtc_number].snapGearPosition;
 1594  1      
 1595  1              *(res_data+33) = 0xDF;
 1596  1          *(res_data+34) = 0x08;
 1597  1          *(res_data+35) = dtc_snapshot_data_record[dtc_number].snapBrakeMode;
 1598  1      
 1599  1              *(res_data+36) = 0xDF;
 1600  1          *(res_data+37) = 0x09;
 1601  1          *(res_data+38) = dtc_snapshot_data_record[dtc_number].snapTargetPressure;
 1602  1              
 1603  1          *(res_data+39) = 0xDF;
 1604  1          *(res_data+40) = 0x0A;
 1605  1          *(res_data+41) = dtc_snapshot_data_record[dtc_number].snapActualPressure;
 1606  1      
 1607  1              *(res_data+42) = 0xDF;
 1608  1          *(res_data+43) = 0x0B;
 1609  1          *(res_data+44) = dtc_snapshot_data_record[dtc_number].snapRelaySwitchStatus;
 1610  1              *(res_data+45) = dtc_snapshot_data_record[dtc_number].snapPreDriveStatus;
 1611  1      
 1612  1      }
 1613         
 1614         /***********************************************************************
 1615         * FUNCTION    : DescMgr_ReturnSnapshotDataDefault
 1616         * DESCRIPTION : none
 1617         * INPUTS      : INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number
 1618         * RETURN      : none
 1619         ***********************************************************************/
 1620         DESC_MGR_STAT void DescMgr_ReturnSnapshotDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number)
 1621         {
 1622  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1623  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;          /* DTCMiddleByte */
 1624  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1625  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */     
 1626  1          *(res_data+4) = 0x01; /* DTC Snapshot Record Number */   
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 28  

 1627  1          *(res_data+5) = 0x0C; /* DTC Snapshot Record Number Of Identifiers */
 1628  1      
 1629  1          *(res_data+6) = 0xDF;
 1630  1          *(res_data+7) = 0x00;
 1631  1          *(res_data+8) = 0xFF;
 1632  1      
 1633  1              *(res_data+9) = 0xDF;
 1634  1          *(res_data+10) = 0x01;
 1635  1          *(res_data+11) = 0xFF;
 1636  1      
 1637  1              *(res_data+12) = 0xDF;
 1638  1          *(res_data+13) = 0x02;
 1639  1          *(res_data+14) = 0xFF;
 1640  1              *(res_data+15) = 0xFF;
 1641  1      
 1642  1              *(res_data+16) = 0xDF;
 1643  1          *(res_data+17) = 0x03;
 1644  1          *(res_data+18) = 0xFF;
 1645  1              *(res_data+19) = 0xFF;
 1646  1      
 1647  1              *(res_data+20) = 0xDF;
 1648  1          *(res_data+21) = 0x04;
 1649  1          *(res_data+22) = 0xFF;
 1650  1      
 1651  1              *(res_data+23) = 0xDF;
 1652  1          *(res_data+24) = 0x05;
 1653  1          *(res_data+25) = 0xFF;
 1654  1              *(res_data+26) = 0xFF;
 1655  1      
 1656  1              *(res_data+27) = 0xDF;
 1657  1          *(res_data+28) = 0x06;
 1658  1          *(res_data+29) = 0xFF;
 1659  1      
 1660  1              *(res_data+30) = 0xDF;
 1661  1          *(res_data+31) = 0x07;
 1662  1          *(res_data+32) = 0xFF;
 1663  1      
 1664  1              *(res_data+33) = 0xDF;
 1665  1          *(res_data+34) = 0x08;
 1666  1          *(res_data+35) = 0xFF;
 1667  1      
 1668  1              *(res_data+36) = 0xDF;
 1669  1          *(res_data+37) = 0x09;
 1670  1          *(res_data+38) = 0xFF;
 1671  1              
 1672  1          *(res_data+39) = 0xDF;
 1673  1          *(res_data+40) = 0x0A;
 1674  1          *(res_data+41) = 0xFF;
 1675  1      
 1676  1              *(res_data+42) = 0xDF;
 1677  1          *(res_data+43) = 0x0B;
 1678  1          *(res_data+44) = 0xFF;
 1679  1              *(res_data+45) = 0xFF;
 1680  1      }
 1681         
 1682         /***********************************************************************
 1683         * FUNCTION    : DescMgr_CanDiagGetExtendData
 1684         * DESCRIPTION : none
 1685         * INPUTS      : *p_dtc
 1686         * RETURN      : none
 1687         ***********************************************************************/
 1688         void DescMgr_CanDiagGetExtendData(INT8U *res_data, INT8U *req_dtc)
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 29  

 1689         {
 1690  1          INT8U record_count;
 1691  1              
 1692  1              for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)   //added by uidq2008
 1693  1          {
 1694  2              if ((dtc_code_data[record_count].dtc_bytes.dtc_high_byte == req_dtc[2]) 
 1695  2                      &&  (dtc_code_data[record_count].dtc_bytes.dtc_middle_byte == req_dtc[3])
 1696  2                      &&  (dtc_code_data[record_count].dtc_bytes.dtc_low_byte == req_dtc[4]))
 1697  2              {
 1698  3                      if ((dtc_current_status_record[record_count].dtc_status.status_byte & DTC_STATUS_AVAILABILITY_MAS
             -K) != 0)
 1699  3                      {
 1700  4                              DescMgr_ReturnExtendData(res_data, record_count, req_dtc[5]);
 1701  4                              }
 1702  3                  else
 1703  3                  {
 1704  4                      DescMgr_ReturnExtendDataDefault(res_data, record_count, req_dtc[5]);
 1705  4                  }
 1706  3              }
 1707  2          }
 1708  1      }
 1709         
 1710         /***********************************************************************
 1711         * FUNCTION    : DescMgr_ReturnExtendData
 1712         * DESCRIPTION : none
 1713         * INPUTS      : *p_dtc
 1714         * RETURN      : none
 1715         ***********************************************************************/
 1716         DESC_MGR_STAT void DescMgr_ReturnExtendData(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U RecordNum
             -)
 1717         {
 1718  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1719  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;              /* DTCMiddleByte */
 1720  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1721  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */
 1722  1              
 1723  1          switch (RecordNum)    
 1724  1          {
 1725  2              case 0x01: /*Fault occurrence counter */
 1726  2                  *(res_data+4) = 0x01;
 1727  2                  *(res_data+5) = dtc_extern_data_record[dtc_number].exOccuranceCnt; 
 1728  2                  break;
 1729  2                              
 1730  2                      #if 0   
                      case 0x02: /*Fault pending counter  */
                          *(res_data+4) = 0x02;
                          *(res_data+5) = dtc_pending_count[dtc_number];      
                          break;
                              #endif
 1736  2                              
 1737  2              case 0x02: /* DTC Aging counter */
 1738  2                  *(res_data+4) = 0x02;
 1739  2                  *(res_data+5) = dtc_extern_data_record[dtc_number].exAgingCnt;      
 1740  2                  break;
 1741  2      
 1742  2                      #if 0
                      case 0x04: /* DTC Aged counter */
                          *(res_data+4) = 0x04;
                          *(res_data+5) = dtc_aged_count[dtc_number]; 
                          break;
                              #endif
 1748  2                              
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 30  

 1749  2              case 0xFF:
 1750  2                              *(res_data+4) = 0x01;
 1751  2                              *(res_data+5) = dtc_extern_data_record[dtc_number].exOccuranceCnt;      
 1752  2                              *(res_data+6) = 0x02;
 1753  2                              *(res_data+7) = dtc_extern_data_record[dtc_number].exAgingCnt;  
 1754  2                              #if 0
                                      *(res_data+8) = 0x03;
                                      *(res_data+9) = dtc_aging_count[dtc_number];    
                                      *(res_data+10) = 0x04;
                                      *(res_data+11) = dtc_aged_count[dtc_number];    
                                      #endif
 1760  2                  break;
 1761  2                              
 1762  2              default:
 1763  2                  break;
 1764  2          }
 1765  1      }
 1766         
 1767         /***********************************************************************
 1768         * FUNCTION    : DescMgr_ReturnExtendDataDefault
 1769         * DESCRIPTION : none
 1770         * INPUTS      : *p_dtc
 1771         * RETURN      : none
 1772         ***********************************************************************/
 1773         DESC_MGR_STAT void DescMgr_ReturnExtendDataDefault(INT8U *res_data, DTC_CODE_NUM_TYPE dtc_number, INT8U Re
             -cordNum)
 1774         {
 1775  1          *(res_data+0) = dtc_code_data[dtc_number].dtc_bytes.dtc_high_byte;            /* DTCHighByte */
 1776  1          *(res_data+1) = dtc_code_data[dtc_number].dtc_bytes.dtc_middle_byte;              /* DTCMiddleByte */
 1777  1          *(res_data+2) = dtc_code_data[dtc_number].dtc_bytes.dtc_low_byte;             /* DTCLowByte */
 1778  1          *(res_data+3) = dtc_current_status_record[dtc_number].dtc_status.status_byte; /* statusOfDTC */
 1779  1              
 1780  1          switch (RecordNum)    
 1781  1          {
 1782  2              case 0x01: /* Fault occurrence counter */
 1783  2                  *(res_data+4) = 0x01;
 1784  2                  *(res_data+5) = 0x00;       
 1785  2                  break;
 1786  2                              
 1787  2              case 0x02: /* Fault pending counter  */
 1788  2                  *(res_data+4) = 0x02;
 1789  2                  *(res_data+5) = 0x00;       
 1790  2                  break;
 1791  2      
 1792  2                      #if 0
                      case 0x03: /* DTC Aging counter */
                          *(res_data+4) = 0x03;
                          *(res_data+5) = 0x00;       
                          break;
                                      
                      case 0x04: /* DTC Aged counter */
                          *(res_data+4) = 0x04;
                          *(res_data+5) = 0x00;       
                          break;
                              #endif
 1803  2                              
 1804  2              case 0xFF:
 1805  2                              *(res_data+4) = 0x01;
 1806  2                              *(res_data+5) = 0x00;   
 1807  2                              *(res_data+6) = 0x02;
 1808  2                              *(res_data+7) = 0x00;
 1809  2                              #if 0
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 31  

                                      *(res_data+8) = 0x03;
                                      *(res_data+9) = 0x00;
                                      *(res_data+10) = 0x04;
                                      *(res_data+11) = 0x00;  
                                      #endif
 1815  2                  break;
 1816  2                              
 1817  2              default:
 1818  2                  break;
 1819  2          }
 1820  1      }
 1821         
 1822         
 1823         #if 0
              static INT8U uVoltageLowTimeoutCnt = 0u;
              static INT8U uVoltageLowRecoverCnt = 0u;
              static BOOLEAN bVehiclePowerVoltageLow = FALSE;
              /*****************************************************************************************
              *  Name        : CanDiagApp_DTC_VehiclePowerVoltageLow
              *  Description : vehicle power voltage low
                               operate condition: 1)ECU power on 2)KL30 node: battery connect 3)KL15 node: IGN ON
                               DTC set condition: power voltage lower than 9V continue 1s
                               DTC resume condition: power voltage higher than 9.5V continue 1s
              *  Parameter   : none
              *  Returns     : none 
              *****************************************************************************************/
              void CanDiagApp_DTC_VehiclePowerVoltageLow(void)
              {
                      static INT16U uVehicleVoltage = 0u;
                      const T_ADC_APP *ptr = AdcApp_SampleData();
              
                      if (FALSE == bVehiclePowerVoltageLow)
                      {
                              if (ptr->vehiclePowerVoltage < POWER_9V_VOLTAGE)
                              {
                                      uVoltageLowRecoverCnt = 0u;
              
                                      uVoltageLowTimeoutCnt++;
                                      if (uVoltageLowTimeoutCnt >= DELAY_1s)          
                                      {
                                              uVoltageLowTimeoutCnt = DELAY_1s;
                                              bVehiclePowerVoltageLow = TRUE;
              
                                              if (TRUE == DescMgr_CanDiagDtcRecordBodyEnableCheck())
                                  {
                                                      DescMgr_DtcStatusDataReport(DTC_VEHICLE_POWER_VOLTAGE_LOW, DTC_TEST_FAILED);
                                              }               
                                      }                       
                              }
                              else
                              {
                                      uVoltageLowTimeoutCnt = 0u;
                                      uVoltageLowRecoverCnt = 0u;
                                      bVehiclePowerVoltageLow = FALSE;
                              }
                      }
                      else
                      {
                              if (ptr->vehiclePowerVoltage >= POWER_9_5V_VOLTAGE)
                              {               
                                      uVoltageLowTimeoutCnt = 0u;
              
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 32  

                                      uVoltageLowRecoverCnt++;
                                      if (uVoltageLowRecoverCnt >= DELAY_1s)
                              {
                                              uVoltageLowRecoverCnt = DELAY_1s;
                                              bVehiclePowerVoltageLow = FALSE;
              
                                              if (TRUE == DescMgr_CanDiagDtcRecordBodyEnableCheck())
                                  {
                                                      DescMgr_DtcStatusDataReport(DTC_VEHICLE_POWER_VOLTAGE_LOW, DTC_TEST_PASSED);
                                  }
                              }                       
                              }
                              else
                              {
                                      uVoltageLowTimeoutCnt = 0u;
                                      uVoltageLowRecoverCnt = 0u;
                                      bVehiclePowerVoltageLow = TRUE;
                              }
                      }
              }
              #endif
 1893         
 1894         /***********************************************************************
 1895         * FUNCTION    : void DescMgr_PowModeSupervise_Init(void)
 1896         * DESCRIPTION : ignition position monitor. Called by can_diag_init only.
 1897         * INPUTS      : none
 1898         * RETURN      : none
 1899         ***********************************************************************/
 1900         DESC_MGR_STAT void DescMgr_PowModeSupervise_Init(void)
 1901         {
 1902  1          can_diag_init_nm_delay_timer = CAN_DIAG_NM_INIT_DELAY_TIME;
 1903  1      }
 1904         
 1905         /***********************************************************************
 1906         * FUNCTION    : void DescMgr_PowModeSupervision(void)
 1907         * DESCRIPTION : ignition position monitor. Called by can_diag_task only. cycle call:10ms
 1908         * INPUTS      : none
 1909         * RETURN      : none
 1910         ***********************************************************************/
 1911         DESC_MGR_STAT void DescMgr_PowModeSupervision(void)
 1912         {
 1913  1          if(can_diag_init_nm_delay_timer > CAN_DIAG_NM_INIT_DELAY_TIMEOUT)
 1914  1          {
 1915  2              can_diag_init_nm_delay_timer--;
 1916  2          }
 1917  1      
 1918  1          /* Adjust dtc record enable mask */
 1919  1          DescMgr_CanDigDtcRecordEnableAdjust();
 1920  1      }
 1921         
 1922         /***********************************************************************
 1923         * FUNCTION    : void DescMgr_DelaySetSig(U16 sig)
 1924         * DESCRIPTION : 
 1925         * INPUTS      : none
 1926         * RETURN      : none
 1927         ***********************************************************************/
 1928         void DescMgr_DelaySetSig(INT16U sig)
 1929         {
 1930  1          desc_delay_sig |= sig;
 1931  1      }
 1932         
 1933         /***********************************************************************
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 33  

 1934         * FUNCTION    : void DescMgr_DelayClearSig(U16 sig)
 1935         * DESCRIPTION : 
 1936         * INPUTS      : none
 1937         * RETURN      : none
 1938         ***********************************************************************/
 1939         void DescMgr_DelayClearSig(INT16U sig)
 1940         {
 1941  1          desc_delay_sig &= ~sig;
 1942  1      }
 1943         
 1944         /***********************************************************************
 1945         * FUNCTION    : BOOL DescMgr_DelayGetSig(U16 sig)
 1946         * DESCRIPTION : 
 1947         * INPUTS      : none
 1948         * RETURN      : none
 1949         ***********************************************************************/
 1950         BOOLEAN DescMgr_DelayGetSig(INT16U sig)
 1951         {
 1952  1          return((desc_delay_sig & sig) != 0);
 1953  1      }
 1954         
 1955         /***********************************************************************
 1956         * FUNCTION    : void DescMgr_DelayServiceMonitor(void)
 1957         * DESCRIPTION : 
 1958         * INPUTS      : none
 1959         * RETURN      : none
 1960         ***********************************************************************/
 1961         DESC_MGR_STAT void DescMgr_DelayServiceMonitor(void)
 1962         {
 1963  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_1))
 1964  1          {
 1965  2              if(DescMgr_CanDiagDtcStatusServiceClearAll())
 1966  2              {
 1967  3                  DescMgr_DelayClearSig(DESC_DELAY_SIG_1);
 1968  3              }
 1969  2          }
 1970  1      
 1971  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_2))
 1972  1          {
 1973  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_2);
 1974  2          }
 1975  1      
 1976  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_3))
 1977  1          {
 1978  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_3);
 1979  2          }
 1980  1      
 1981  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_4))
 1982  1          {
 1983  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_4);
 1984  2          }
 1985  1      
 1986  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_5))
 1987  1          {
 1988  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_5);
 1989  2          }
 1990  1      
 1991  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_6))
 1992  1          {
 1993  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_6);
 1994  2          }
 1995  1      
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 34  

 1996  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_7))
 1997  1          {
 1998  2         //    if(can_diag_check_os_version())
 1999  2              {
 2000  3                  DescMgr_DelayClearSig(DESC_DELAY_SIG_7);
 2001  3              }
 2002  2          }
 2003  1      
 2004  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_8))
 2005  1          {
 2006  2          //    if(can_diag_set_machine_id())
 2007  2              {
 2008  3                  DescMgr_DelayClearSig(DESC_DELAY_SIG_8);
 2009  3              }
 2010  2          }
 2011  1      
 2012  1          if(DescMgr_DelayGetSig(DESC_DELAY_SIG_9))
 2013  1          {
 2014  2              DescMgr_DelayClearSig(DESC_DELAY_SIG_9);
 2015  2          }
 2016  1      }
 2017         
 2018         
 2019         /***********************************************************************
 2020         * FUNCTION    : void DescMgr_Sv14ClearStart(void)
 2021         * DESCRIPTION : 
 2022         * INPUTS      : 
 2023         * RETURN      : 
 2024         ***********************************************************************/
 2025         void DescMgr_Sv14ClearStart(void)
 2026         {
 2027  1      #if 1
 2028  1          /* do not care about last time, just reset the whole clear things */
 2029  1          dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_START; /* clear begin */
 2030  1      #else
              
                  _memset(dtc_status_occurrence_cnt,DTC_STATUS_OCCURRENCE_CNT_RESET,DTC_CODE_MAX_NUM);
                  _memset(dtc_status_aging_cnt,DTC_STATUS_AGING_CNT_RESET,DTC_CODE_MAX_NUM);
                      _memset(dtc_status_aged_cnt,DTC_STATUS_AGED_CNT_RESET,DTC_CODE_MAX_NUM);
                      _memset(&dtc_snapshot_record,0,sizeof(DTC_SNAPSHOT_RECORD_IDENTIFIERS)*DTC_CODE_MAX_NUM);
                      /* last time clearing has not finished yet, just ignore request */
                  if(DTC_STATUS_SVC14_CLEAR_FINISHED == dtc_status_svc14_clear_counter)
                  {
                      dtc_status_svc14_clear_counter = DTC_STATUS_SVC14_CLEAR_START; /* clear begin */
                  }
              #endif
 2042  1      
 2043  1          /* Adjust dtc record enable mask */
 2044  1          DescMgr_CanDigDtcRecordEnableAdjust();
 2045  1      }
 2046         
 2047         
 2048         void CanDescDtc_TaskEntry(void)
 2049         { 
 2050  1          /* Diagnosis init, dtc record enable delay */
 2051  1          if(can_diag_init_delay_timer > CAN_DIAG_INIT_DELAY_TIMEOUT)
 2052  1          {
 2053  2              can_diag_init_delay_timer--;
 2054  2      
 2055  2              if(can_diag_init_delay_timer == CAN_DIAG_INIT_DELAY_TIMEOUT)
 2056  2              {
 2057  3                  /* Adjust dtc record enable mask */
C166 COMPILER V7.57.0, DESC_MGR                                                            01/20/2021 09:50:56 PAGE 35  

 2058  3                  DescMgr_CanDigDtcRecordEnableAdjust();
 2059  3              }
 2060  2          }
 2061  1              
 2062  1          DescMgr_CanDiagDtcEepromHandle();
 2063  1              DescMgr_PowModeSupervision();
 2064  1      
 2065  1          DescMgr_DelayServiceMonitor();
 2066  1      #if 0   
                  Get_Software_Version_Status();
                  EEP_Write_Status_Monitor();
                  EEP_Status_Monitor();
              #endif
 2071  1              CanDiag_DTC_NmCheckTask();
 2072  1              //CanDiagApp_DTC_VehiclePowerVoltageLow();
 2073  1      }
 2074         
 2075         /* _END_OF_DESC_DTC_MGR_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        4386     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          21     --------
  FAR-DATA SIZE    =         896     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =        1018     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
