C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE DESC_SER
OBJECT MODULE PLACED IN .\Obj\desc_ser.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\bsw\desc\desc_ser.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\sr
                    -c\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\
                    -mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measur
                    -e;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\desc_ser.lst) OBJECT(.\Obj\desc_ser.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : DescService.c
    9         * Instance      : 
   10         * Description   : DTC service
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "desc.h"
   26         #include "desc_ser.h"
   27         #include "desc_mgr.h"
   28         #include "adc_sample.h"
   29         #include "eepRom.h"
   30         #include "can_com.h"
   31         #include "rte.h"
   32         #include "wireControl_Cfg.h"
   33         #include "booster_Cfg.h"
   34         
   35         
   36         #define DESC_SERVICE_GLOBALS
   37         
   38         DESC_MORE_FRAMES descMoreFramesFlag = {FALSE};
   39         
   40         
   41         /**** Definition of variables ****/
   42         INT8U descReqData[64] = {0u};
   43         INT8U descResData[256] = {0u};
   44         
   45         INT8U descResSnapshotData[46] = {0u};
   46         INT8U descResExtendedData[8] = {0u};
   47         
   48         BOOLEAN descNmFrameRxEnable = TRUE;
   49         BOOLEAN descNmFrameTxEnable = TRUE;
   50         BOOLEAN descApplFrameRxEnable = TRUE;
   51         BOOLEAN descApplFrameTxEnable = TRUE;
   52         
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 2   

   53         static BOOLEAN ser11_reset = FALSE;
   54         
   55         DescMsgContext descMsgContext = {0u};
   56         DescDataIdentifier descDataIdentifier = {0u};
   57         
   58         DESC_SERVICE_STAT INT32U descSecurityRandSeedLevel1 = 0u;
   59         DESC_SERVICE_STAT INT32U descSecurityRandSeedLevel2 = 0u;
   60         
   61         DESC_SERVICE_STAT INT32U descSendSecurityKeyLevel1 = 0u;
   62         DESC_SERVICE_STAT INT32U descSendSecurityKeyLevel2 = 0u;
   63         
   64         DESC_SERVICE_STAT INT16U descOemProcessTesterPresentTimeoutCnt = 0u;
   65         
   66         DESC_SERVICE_STAT BOOLEAN descOemProcessTesterPresentFlag = FALSE;
   67         DESC_SERVICE_STAT BOOLEAN descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
   68         DESC_SERVICE_STAT BOOLEAN descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
   69         
   70         /* $22 F187:Vehicle Manufacturer Spare Part Number Data Identifier */ 
   71         const INT8U VehicleManufacturerSparePartNumberDataIdentifier[11] = "XAA1234567"; // polyspace test by gzz 
             -2020.12.30
   72         
   73         /* $22 F18A:System Supplier Identifier Data Identifier */
   74         const INT8U SystemSupplierIdentifierDataIdentifier[11] = "0000000000"; // polyspace test by gzz 2020.12.30
   75         
   76         /* $22 F18C:ECU Serial Number Data Identifier */
   77         const INT8U SystemSerialNumberDataIdentifier[17] = "XXXXXXXXXXXXXXXX"; // polyspace test by gzz 2020.12.30
   78         
   79         /* $22 F190:VIN Data Identifier */
   80         const INT8U OEM_VIN_DataIdentifier[18] = "ABCDEFG0123456789"; // polyspace test by gzz 2020.12.30
   81         
   82         /* $22 F193:System Supplier ECU Hardware Version Number Data Identifier */
   83         const INT8U SystemHardwareVersionDataIdentifier[5] = "HW05"; // polyspace test by gzz 2020.12.30
   84         
   85         /* $22 F195:System Supplier ECU Software Version Number Data Identifier */
   86         const INT8U SystemSoftwareVersionDataIdentifier[19] = "MuYuan20210120V1.4"; // polyspace test by gzz 2020.
             -12.30
   87         
   88         /* $22 F197:System Name Data Identifier */
   89         const INT8U SystemNameDataIdentifier[14] = "iCAS-BRAKE4.1"; // polyspace test by gzz 2020.12.30
   90         
   91         /* $27 01:Security Access Seed Level 1 */
   92         const INT8U SecurityAccessSeedLevel_1[4] = {0x08, 0x27, 0x11, 0xF0};
   93         
   94         /* $27 02:Security Access Seed Level 1 */
   95         const INT8U SecurityAccessKeyLevel_1[4] = {0xF0, 0x11, 0x27, 0x08};
   96         
   97         /* $27 09:Security Access Seed Level 1 */
   98         const INT8U SecurityAccessSeedLevel_2[4] = {0x08, 0x27, 0x11, 0xF0};
   99         
  100         /* $27 0A:Security Access Seed Level 1 */
  101         const INT8U SecurityAccessKeyLevel_2[4] = {0xF0, 0x11, 0x27, 0x08};
  102         
  103         /* $27 level 1 security alogrithem mask */
  104         const INT32U SecurityAccessMaskLevel_1 = 0x21156136;
  105         
  106         /* $27 level 2 security alogrithem mask */
  107         const INT32U SecurityAccessMaskLevel_2 = 0x21156138;
  108         
  109         
  110         /**** Declaration of functions ****/
  111         DESC_SERVICE_STAT INT32U seedToKey(INT32U seed, INT32U mask);
  112         
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 3   

  113         /* Table of service (instance) relevant information. */
  114         /* $11:ECU Reset */
  115         DESC_SERVICE_STAT void ApplDescEcuHardwareResetHard(DescMsgContext* pMsgContext);
  116         DESC_SERVICE_STAT void ApplDescEcuResetKeyOffOn(DescMsgContext* pMsgContext);
  117         DESC_SERVICE_STAT void ApplDescEcuSoftwareResetHard(DescMsgContext* pMsgContext);
  118         
  119         /* $14:Fault Memory */
  120         DESC_SERVICE_STAT void ApplDescClearDiagInfo(DescMsgContext* pMsgContext);
  121         
  122         /* $19:Fault Memory*/
  123         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask(DescMsgContext* pMsgContext);
  124         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcByStatusMask(DescMsgContext* pMsgContext);
  125         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber(DescMsgContext* pMsgContext)
             -;
  126         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber(DescMsgContext* pMsgCont
             -ext);
  127         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportSupportedDtc(DescMsgContext* pMsgContext);
  128         
  129         /* $22:Read By Data Identifier */
  130         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_SparePartNumber(DescMsgContext* pMsgContext);
  131         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SupplierInformation(DescMsgContext* pMsgContext);
  132         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SerialNumber(DescMsgContext* pMsgContext);
  133         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_VIN(DescMsgContext* pMsgContext);       
  134         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber(DescMsgContext* pMsgContext)
             -;
  135         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber(DescMsgContext* pMsgContext)
             -;
  136         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SystemNameDataNumber(DescMsgContext* pMsgContext);
  137         DESC_SERVICE_STAT void ApplDescSimulateAdcData(DescMsgContext* pMsgContext);
  138         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_EepromData(DescMsgContext* pMsgContext);
  139         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_Pedal_Cylinder_Data(DescMsgContext* pMsgContext);
  140         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_LongTimeBrake_Times(DescMsgContext* pMsgContext);
  141         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data1(DescMsgContext* pMsgContext);
  142         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data2(DescMsgContext* pMsgContext);
  143         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data3(DescMsgContext* pMsgContext);
  144         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data4(DescMsgContext* pMsgContext);
  145         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data5(DescMsgContext* pMsgContext);
  146         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data6(DescMsgContext* pMsgContext);
  147         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data7(DescMsgContext* pMsgContext);
  148         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data8(DescMsgContext* pMsgContext);
  149         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data9(DescMsgContext* pMsgContext);
  150         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data10(DescMsgContext* pMsgContext);
  151         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data11(DescMsgContext* pMsgContext);
  152         
  153         /* $23:Read Memory By Address */
  154         DESC_SERVICE_STAT void ApplDescReadMemoryByAddress(DescMsgContext* pMsgContext);
  155         
  156         /* $27:Security Access */
  157         DESC_SERVICE_STAT void ApplDescOemGetLevel_1_RequestSeed(DescMsgContext* pMsgContext);
  158         DESC_SERVICE_STAT void ApplDescOemSendLevel_1_SendKey(DescMsgContext* pMsgContext);
  159         DESC_SERVICE_STAT void ApplDescOemGetLevel_2_RequestSeed(DescMsgContext* pMsgContext);
  160         DESC_SERVICE_STAT void ApplDescOemSendLevel_2_SendKey(DescMsgContext* pMsgContext);
  161         
  162         /* $28:Communication Control  */
  163         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxEnableTx(DescMsgContext* pMsgContext);
  164         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxDisableTx(DescMsgContext* pMsgContext);
  165         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxEnableTx(DescMsgContext* pMsgContext);
  166         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxDisableTx(DescMsgContext* pMsgContext);
  167         
  168         /* $2A:Read Data By Periodic Indentifier */
  169         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate(DescMsgContext* pMsgContext);
  170         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate(DescMsgContext* pMsgContext);
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 4   

  171         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtFastRate(DescMsgContext* pMsgContext);
  172         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_StopSending(DescMsgContext* pMsgContext);
  173         
  174         /* $2C:Dynamically Define Data Indentifier */
  175         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier(DescMsgContext* pMsgCont
             -ext);
  176         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier(DescMs
             -gContext* pMsgContext);
  177         
  178         /* $2E:Write By Data Identifier */
  179         DESC_SERVICE_STAT void ApplDescWriteByDataIdentifier_ECU_SerialNumber(DescMsgContext* pMsgContext);
  180         DESC_SERVICE_STAT void ApplDescWriteByDataIdentifierOEM_VIN(DescMsgContext* pMsgContext);
  181         DESC_SERVICE_STAT void ApplDescWriteEepromDataById_6668(DescMsgContext* pMsgContext);
  182         DESC_SERVICE_STAT void ApplDescWritePedalCylinderDataById_2201(DescMsgContext* pMsgContext);
  183         DESC_SERVICE_STAT void ApplDescWriteLongTimeBrakeTimesDataById_2202(DescMsgContext* pMsgContext);
  184         DESC_SERVICE_STAT void ApplDescWritePvTestFlagById_2E02(DescMsgContext* pMsgContext);
  185         DESC_SERVICE_STAT void ApplDescWriteClearCalibrationDataById_2203(DescMsgContext* pMsgContext);
  186         
  187         
  188         /* $2F:Input Output Control By Identifier */
  189         
  190         /* $31:Service Routine Control*/
  191         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity(DescMsgContext* pMsgCo
             -ntext);
  192         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition(DescMsgContext* pMs
             -gContext);
  193         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_EraseMemory(DescMsgContext* pMsgContext);
  194         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingDependency(DescMsgContext* pMsgC
             -ontext);
  195         
  196         /* $34:Request Download */ 
  197         DESC_SERVICE_STAT void ApplDescRequestDownload(DescMsgContext* pMsgContext);
  198         
  199         /* $36:Transfer Data */ 
  200         DESC_SERVICE_STAT void ApplDescTransferData(DescMsgContext* pMsgContext);
  201         
  202         /* $37:Request Transfer Exit */ 
  203         DESC_SERVICE_STAT void ApplDescRequestTransferExit(DescMsgContext* pMsgContext);        
  204         
  205         /* $3D:Write Memory By Address */ 
  206         DESC_SERVICE_STAT void ApplDescWriteMemoryByAddress(DescMsgContext* pMsgContext);
  207         
  208         /* $3E:Tester Present */ 
  209         DESC_SERVICE_STAT void ApplDescOemProcessTesterPresent(DescMsgContext* pMsgContext);    
  210         
  211         /* $85:Control DTC Setting */
  212         DESC_SERVICE_STAT void ApplDescControlDtcSettingEnable(DescMsgContext* pMsgContext);
  213         DESC_SERVICE_STAT void ApplDescControlDtcSettingDisable(DescMsgContext* pMsgContext);
  214         
  215         
  216         DESC_SERVICE_STAT DiagHandler CanDiagHandler[DESC_MAX_TYPE]=
  217         {
  218                 /* $10:Diagnostic Session Control. Had been handle by "CANdesc" component. */
  219             NULL,//DESC_10_01_DEFAULT_SESSION,
  220             NULL,//DESC_10_01_DEFAULT_SESSION,
  221             NULL,//DESC_10_03_EXTENDED_SESSION,
  222         
  223                 /* $11:ECU Reset */
  224             ApplDescEcuHardwareResetHard, /* $11 01 */
  225             ApplDescEcuResetKeyOffOn,     /* $11 02 */
  226             ApplDescEcuSoftwareResetHard, /* $11 03 */    
  227         
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 5   

  228                 /* $14:Clear Diagnostic Information */
  229             ApplDescClearDiagInfo, 
  230         
  231                 /* $19:Read DTC Information */
  232             ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask,          /* $19 01 */    
  233             ApplDescReadDtcInfo_ReportDtcByStatusMask,                  /* $19 02 */
  234                 ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber,     /* $19 04 */        
  235             ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber, /* $19 06 */
  236             ApplDescReadDtcInfo_ReportSupportedDtc,                         /* $19 0A */
  237         
  238             /* $22:Read By Data Identifier */
  239                 ApplDescReadByDataIdentifier_OEM_SparePartNumber,       /* $22 F187 */  
  240                 ApplDescReadByDataIdentifier_SupplierInformation,       /* $22 F18A */
  241                 ApplDescReadByDataIdentifier_ECU_SerialNumber,          /* $22 F18C */
  242                 ApplDescReadByDataIdentifier_OEM_VIN,                   /* $22 F190 */
  243                 ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber, /* $22 F193 */
  244                 ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber, /* $22 F195 */
  245                 ApplDescReadByDataIdentifier_SystemNameDataNumber,          /* $22 F197 */
  246                 ApplDescSimulateAdcData,                                                                /* $22 6666 */
  247                 ApplDescReadByDataIdentifier_EepromData,                                /* $22 6667 */
  248                 ApplDescReadDataByIdentifier_Pedal_Cylinder_Data,               /* $22 2201 */
  249                 ApplDescReadDataByIdentifier_LongTimeBrake_Times,               /* $22 2202 */
  250                 ApplDescReadDataByIdentifier_SettingParameter_Data1,    /* $22 DEF0 */
  251                 ApplDescReadDataByIdentifier_SettingParameter_Data2,    /* $22 DEF1 */
  252                 ApplDescReadDataByIdentifier_SettingParameter_Data3,    /* $22 DEF2 */
  253                 ApplDescReadDataByIdentifier_SettingParameter_Data4,    /* $22 DEF3 */
  254                 ApplDescReadDataByIdentifier_SettingParameter_Data5,    /* $22 DEF4 */
  255                 ApplDescReadDataByIdentifier_SettingParameter_Data6,    /* $22 DEF5 */
  256                 ApplDescReadDataByIdentifier_SettingParameter_Data7,    /* $22 DEF6 */
  257                 ApplDescReadDataByIdentifier_SettingParameter_Data8,    /* $22 DEF7 */
  258                 ApplDescReadDataByIdentifier_SettingParameter_Data9,    /* $22 DEF8 */
  259                 ApplDescReadDataByIdentifier_SettingParameter_Data10,   /* $22 DEF9 */
  260                 ApplDescReadDataByIdentifier_SettingParameter_Data11,   /* $22 DEFA */
  261         
  262                 /* $23:Read Memory By Address */
  263                 ApplDescReadMemoryByAddress, /* $23 24 */
  264         
  265                 /* $27:Security Access */
  266                 ApplDescOemGetLevel_1_RequestSeed, /* $27 01 */
  267                 ApplDescOemSendLevel_1_SendKey,    /* $27 02 */
  268                 ApplDescOemGetLevel_2_RequestSeed, /* $27 09 */
  269                 ApplDescOemSendLevel_2_SendKey,    /* $27 0A */
  270         
  271                 /* $28:Communication Control */
  272                 ApplDescOemCommCtrlEnableRxEnableTx,   /* $28 00 */
  273                 ApplDescOemCommCtrlEnableRxDisableTx,  /* $28 01 */
  274                 ApplDescOemCommCtrlDisableRxEnableTx,  /* $28 02 */
  275                 ApplDescOemCommCtrlDisableRxDisableTx, /* $28 03 */ 
  276         
  277                 /* $2A:Read Data By Periodic Indentifier */        
  278                 ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate,   /* $2A 01 */
  279                 ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate, /* $2A 02 */
  280                 ApplDesReadDataByPeriodicIndentifier_SendAtFastRate,   /* $2A 03 */
  281                 ApplDesReadDataByPeriodicIndentifier_StopSending,      /* $2A 04 */
  282         
  283                 /* $2C:Dynamically Define Data Indentifier */
  284                 ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier,                   /* $2C 01 */
  285                 ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier, /* $2C 03 */
  286                 
  287                 /* $2E:Write By Data Identifier */
  288                 ApplDescWriteByDataIdentifier_ECU_SerialNumber, /* $2E F18C */
  289                 ApplDescWriteByDataIdentifierOEM_VIN, /* $2E F190 */
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 6   

  290                 ApplDescWriteEepromDataById_6668,         /* $2E 6668 */
  291                 ApplDescWritePedalCylinderDataById_2201,/* $2E 2201 */
  292                 ApplDescWriteLongTimeBrakeTimesDataById_2202,/* $2E 2202 */
  293                 ApplDescWritePvTestFlagById_2E02,               /* $2E 2E02 */
  294                 ApplDescWriteClearCalibrationDataById_2203,             /* $2E 2203 */
  295         
  296                 /* $2F:Input Output Control By Identifier */    
  297                 
  298             /* $31:Routine Control */   
  299             ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity,    /* $31 01 F0 01 */ 
  300             ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition, /* $31 01 FF 02 */    
  301             ApplDescRoutineControlByIdentifier_EraseMemory,                  /* $31 01 FF 00 */
  302             ApplDescRoutineControlByIdentifier_CheckProgrammingDependency,       /* $31 01 FF 01 */
  303             
  304                 /* $34:Request Download */ 
  305             ApplDescRequestDownload,    
  306         
  307                 /* $36:Transfer Data */ 
  308             ApplDescTransferData,
  309         
  310                 /* $37:Request Transfer Exit */ 
  311             ApplDescRequestTransferExit,
  312         
  313                 /* $3D:Write Memory By Address */ 
  314                 ApplDescWriteMemoryByAddress,   
  315         
  316                 /* $3E:Tester Present */ 
  317             ApplDescOemProcessTesterPresent,            
  318         
  319                 /* $85:Control DTC Setting */
  320                 ApplDescControlDtcSettingEnable,  /* $85 01 */
  321                 ApplDescControlDtcSettingDisable, /* $85 02 */
  322         };
  323         
  324         
  325         /*****************************************************************************************
  326         *  Name        : CanDesc_TaskEntry
  327         *  Description : none       
  328         *  Parameter   : none
  329         *  Returns     : none 
  330         *****************************************************************************************/
  331         DESC_STAT INT8U uFCTimeoutCnt = 0;
  332         void CanDesc_TaskEntry(void)
  333         {
  334  1              static INT8U ResetCnt = 0;
  335  1      
  336  1              descMsgContext.reqData = descReqData;
  337  1              descMsgContext.resData = descResData;
  338  1      
  339  1              if(ser11_reset)
  340  1              {
  341  2                      ResetCnt++;
  342  2                      if(ResetCnt >= 10)
  343  2                      {
  344  3                              ResetCnt = 0;
  345  3                              DESC_vSWRST();
  346  3                      }
  347  2              }
  348  1      
  349  1              if((descMoreFramesFlag.bFFSended == TRUE)&&(descMoreFramesFlag.bFCReceived == FALSE))
  350  1              {
  351  2                      if(descMsgContext.reqDataLen == 0x30)
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 7   

  352  2                      {
  353  3                              descMoreFramesFlag.bFCReceived = TRUE;
  354  3                              descMoreFramesFlag.bFFSended = FALSE;
  355  3                              g_descReqMsgRxFlag = FALSE;
  356  3                              uFCTimeoutCnt = 0u;
  357  3                      }
  358  2                      else
  359  2                      {
  360  3                              uFCTimeoutCnt++;
  361  3                      }
  362  2                      if(uFCTimeoutCnt >= 10u)  //50ms timeout
  363  2                      {
  364  3                              descMoreFramesFlag.bFFSended = FALSE;
  365  3                              descMoreFramesFlag.bFCReceived = FALSE;
  366  3                              uFCTimeoutCnt = 0u;
  367  3                              g_descReqMsgRxFlag = FALSE;
  368  3                              DescSetNegResponse(&descMsgContext, kDescNrcNoResponseFromSubnetComponent);
  369  3                      }
  370  2                      return;
  371  2              }
  372  1              
  373  1              if (TRUE == g_descReqMsgRxFlag)
  374  1              {
  375  2                      g_descReqMsgRxFlag = FALSE;
  376  2                      DescServiceClassifier(&descMsgContext); 
  377  2      
  378  2                      /* Check OBD tester present status, if long time not receive
  379  2                       * $3E service, meaning the OBD at present timeout, ECU should
  380  2                       * switch session mode to default session state. */
  381  2                      descOemProcessTesterPresentTimeoutCnt++;
  382  2                      if (descOemProcessTesterPresentTimeoutCnt >= 65535u)
  383  2                      {
  384  3                              descOemProcessTesterPresentFlag = FALSE;
  385  3                              DescSetStateSession(kDescStateSessionDefault);
  386  3                      }
  387  2              }
  388  1              
  389  1              return;
  390  1      }
  391         
  392         /*  ********************************************************************************
  393          * Function name:ApplDescEcuHardwareResetHard (Service request header:$11 $1 )
  394          * Description: not available 
  395          * Returns:  nothing
  396          * Parameter(s):
  397          *   - pMsgContext->reqData:
  398          *       - Points to the first service request data byte.
  399          *       - Access type: read
  400          *   - pMsgContext->resData:
  401          *       - Points to the first writeable byte for the service response data.
  402          *       - Access type: read/write
  403          *   - pMsgContext->reqDataLen:
  404          *       - Contains the count of the service request data bytes (Sid is excluded).
  405          *       - Access type: read
  406          *   - pMsgContext->resDataLen:
  407          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  408          *       - Access type: read/write
  409          *   - pMsgContext->msgAddInfo.reqType:
  410          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  411          *       - Access type: read
  412          *   - pMsgContext->msgAddInfo.resOnReq:
  413          *       - Indicates if there will be response. Allowed only to write only 0 !!!
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 8   

  414          *       - Access type: read/write
  415          *   - pMsgContext->msgAddInfo.suppPosRes:
  416          *       - UDS only!If set no positive response will be sent on this request.
  417          *       - Access type: read
  418          * Particularitie(s) and limitation(s):
  419          *   - The function "DescProcessingDone" must be called from now on (within this
  420          * main-handler or later).
  421          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  422          * but before calling "DescProcessingDone".
  423          ********************************************************************************  */
  424         DESC_SERVICE_STAT void ApplDescEcuHardwareResetHard(DescMsgContext* pMsgContext)
  425         {
  426  1      #if (kDescEnableService11_HardwareReset == 1)
  427  1      
  428  1              if (0x02 == pMsgContext->reqDataLen)
  429  1              {
  430  2                      if (0u == VCU_VehicleSpeed)
  431  2                      {
  432  3      #if 0
                                      pMsgContext->resDataLen = 0x02;
                                      DescSetPosResponse(pMsgContext);
              
                                      /* Hardware Reset */
                          // TODO:Hardware reset
              #else
  439  3                              DescSetNegResponse(pMsgContext, kDescNrcSubfunctionNotSupported);
  440  3      #endif
  441  3                      }
  442  2                      else
  443  2                      {
  444  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
  445  3                      }               
  446  2              }
  447  1              else
  448  1              {
  449  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  450  2              }
  451  1      #else
                      DescProcessingDone();
              #endif
  454  1      }
  455         
  456         /*  ********************************************************************************
  457          * Function name:ApplDescEcuResetKeyOffOn (Service request header:$11 $2 )
  458          * Description: not available 
  459          * Returns:  nothing
  460          * Parameter(s):
  461          *   - pMsgContext->reqData:
  462          *       - Points to the first service request data byte.
  463          *       - Access type: read
  464          *   - pMsgContext->resData:
  465          *       - Points to the first writeable byte for the service response data.
  466          *       - Access type: read/write
  467          *   - pMsgContext->reqDataLen:
  468          *       - Contains the count of the service request data bytes (Sid is excluded).
  469          *       - Access type: read
  470          *   - pMsgContext->resDataLen:
  471          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  472          *       - Access type: read/write
  473          *   - pMsgContext->msgAddInfo.reqType:
  474          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  475          *       - Access type: read
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 9   

  476          *   - pMsgContext->msgAddInfo.resOnReq:
  477          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  478          *       - Access type: read/write
  479          *   - pMsgContext->msgAddInfo.suppPosRes:
  480          *       - UDS only!If set no positive response will be sent on this request.
  481          *       - Access type: read
  482          * Particularitie(s) and limitation(s):
  483          *   - The function "DescProcessingDone" must be called from now on (within this
  484          * main-handler or later).
  485          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  486          * but before calling "DescProcessingDone".
  487          ********************************************************************************  */
  488         DESC_SERVICE_STAT void ApplDescEcuResetKeyOffOn(DescMsgContext* pMsgContext)
  489         {
  490  1      #if (kDescEnableService11_KeyOffOnReset == 1)
  491  1      
  492  1              if (0x02 == pMsgContext->reqDataLen)
  493  1              {
  494  2                      if (0u == VCU_VehicleSpeed)
  495  2                      {
  496  3      #if 0   
                                      pMsgContext->resDataLen = 0x02;
                                      DescSetPosResponse(pMsgContext);
                                      
                                      // TODO:Key Off On Reset                
              #else
  502  3                              DescSetNegResponse(pMsgContext, kDescNrcSubfunctionNotSupported);
  503  3      #endif                  
  504  3                      }
  505  2                      else
  506  2                      {
  507  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
  508  3                      }               
  509  2              }
  510  1              else
  511  1              {
  512  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  513  2              }
  514  1      #else
                      DescProcessingDone();
              #endif
  517  1      }
  518         
  519         /*  ********************************************************************************
  520          * Function name:ApplDescEcuSoftwareResetHard (Service request header:$11 $3 )
  521          * Description: not available 
  522          * Returns:  nothing
  523          * Parameter(s):
  524          *   - pMsgContext->reqData:
  525          *       - Points to the first service request data byte.
  526          *       - Access type: read
  527          *   - pMsgContext->resData:
  528          *       - Points to the first writeable byte for the service response data.
  529          *       - Access type: read/write
  530          *   - pMsgContext->reqDataLen:
  531          *       - Contains the count of the service request data bytes (Sid is excluded).
  532          *       - Access type: read
  533          *   - pMsgContext->resDataLen:
  534          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  535          *       - Access type: read/write
  536          *   - pMsgContext->msgAddInfo.reqType:
  537          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 10  

  538          *       - Access type: read
  539          *   - pMsgContext->msgAddInfo.resOnReq:
  540          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  541          *       - Access type: read/write
  542          *   - pMsgContext->msgAddInfo.suppPosRes:
  543          *       - UDS only!If set no positive response will be sent on this request.
  544          *       - Access type: read
  545          * Particularitie(s) and limitation(s):
  546          *   - The function "DescProcessingDone" must be called from now on (within this
  547          * main-handler or later).
  548          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  549          * but before calling "DescProcessingDone".
  550          ********************************************************************************  */
  551         DESC_SERVICE_STAT void ApplDescEcuSoftwareResetHard(DescMsgContext* pMsgContext)
  552         {
  553  1              static INT16U temp = 0u;
  554  1              
  555  1      #if (kDescEnableService11_SoftwareReset == 1)
  556  1      
  557  1              if (0x02 == pMsgContext->reqDataLen)
  558  1              {
  559  2                      if (0u == VCU_VehicleSpeed)
  560  2                      {
  561  3                              pMsgContext->resDataLen = 0x02;
  562  3                              DescSetPosResponse(pMsgContext);
  563  3      
  564  3                              //DESC_vSWRST();
  565  3                              ser11_reset = TRUE;
  566  3                      }
  567  2                      else
  568  2                      {
  569  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
  570  3                      }               
  571  2              }
  572  1              else
  573  1              {
  574  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
  575  2              }
  576  1      #else
                      DescProcessingDone();
              #endif
  579  1      }
  580         
  581         
  582         /*  ********************************************************************************
  583          * Function name:ApplDescClearDiagInfo (Service request header:$14 )
  584         * Description: not available 
  585          * Returns:  nothing
  586          * Parameter(s):
  587          *   - pMsgContext->reqData:
  588          *       - Points to the first service request byte after the Sid.
  589          *       - Access type: read
  590          *   - pMsgContext->resData:
  591          *       - Points to the first writeable byte for the service response after the Sid.
  592          *       - Access type: read/write
  593          *   - pMsgContext->reqDataLen:
  594          *       - Contains the service request length, excluding Sid byte only.
  595          *       - Access type: read
  596          *   - pMsgContext->resDataLen:
  597          *       - Must be initialized with the total service response length, excluding the Sid only.
  598          *       - Access type: read/write
  599          *   - pMsgContext->msgAddInfo.reqType:
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 11  

  600          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  601          *       - Access type: read
  602          *   - pMsgContext->msgAddInfo.resOnReq:
  603          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  604          *       - Access type: read/write
  605          *   - pMsgContext->msgAddInfo.suppPosRes:
  606          *       - UDS only!If set no positive response will be sent on this request.
  607          *       - Access type: read
  608          * Particularitie(s) and limitation(s):
  609          *   - The function "DescProcessingDone" must be called from now on (within this
  610          * main-handler or later).
  611          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  612          * but before calling "DescProcessingDone".
  613          ********************************************************************************  */
  614         DESC_SERVICE_STAT void ApplDescClearDiagInfo(DescMsgContext* pMsgContext)
  615         {
  616  1              INT32U dtc_group_type = 0;      
  617  1      
  618  1          dtc_group_type = (((INT32U)pMsgContext->reqData[1]) << 16u) & 0x00FF0000; /* High byte */
  619  1          dtc_group_type |= (((INT32U)pMsgContext->reqData[2]) << 8u) & 0x0000FF00; /* Middle byte */
  620  1          dtc_group_type |= (((INT32U)pMsgContext->reqData[3])) & 0x000000FF;       /* low byte */
  621  1      
  622  1              if (4u == pMsgContext->reqDataLen)
  623  1              {
  624  2                      if (DTC_GRP_ALL == dtc_group_type)
  625  2                      {
  626  3                              if (0u == EepRom_Check())
  627  3                              {
  628  4                                      /* Clear Diagnostic Information */
  629  4                                      DescMgr_DelaySetSig(DESC_DELAY_SIG_1);
  630  4                                      DescMgr_Sv14ClearStart();
  631  4                                      //EarsePageEeprom_v_g();
  632  4      
  633  4                                      pMsgContext->resDataLen = 1u;
  634  4                                      pMsgContext->reqData[1] = 0x00;
  635  4                                      pMsgContext->reqData[2] = 0x00;
  636  4      
  637  4                                      DescSetPosResponse(pMsgContext);                                        
  638  4                              }
  639  3                              else
  640  3                              {
  641  4                                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
  642  4                              }
  643  3                      }
  644  2                      else
  645  2                      {
  646  3                      DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                     
  647  3                      }
  648  2              }
  649  1              else
  650  1              {
  651  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  652  2              }
  653  1      }
  654         
  655         /*  ********************************************************************************
  656          * Function name:ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask (Service request header:$19 $1 )
  657          * Description: not available 
  658          * Returns:  nothing
  659          * Parameter(s):
  660          *   - pMsgContext->reqData:
  661          *       - Points to the first service request data byte.
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 12  

  662          *       - Access type: read
  663          *   - pMsgContext->resData:
  664          *       - Points to the first writeable byte for the service response data.
  665          *       - Access type: read/write
  666          *   - pMsgContext->reqDataLen:
  667          *       - Contains the count of the service request data bytes (Sid is excluded).
  668          *       - Access type: read
  669          *   - pMsgContext->resDataLen:
  670          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  671          *       - Access type: read/write
  672          *   - pMsgContext->msgAddInfo.reqType:
  673          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  674          *       - Access type: read
  675          *   - pMsgContext->msgAddInfo.resOnReq:
  676          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  677          *       - Access type: read/write
  678          *   - pMsgContext->msgAddInfo.suppPosRes:
  679          *       - UDS only!If set no positive response will be sent on this request.
  680          *       - Access type: read
  681          * Particularitie(s) and limitation(s):
  682          *   - The function "DescProcessingDone" must be called from now on (within this
  683          * main-handler or later).
  684          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  685          * but before calling "DescProcessingDone".
  686          ********************************************************************************  */
  687         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask(DescMsgContext* pMsgContext)
  688         {
  689  1              INT16U dtc_num = 0; 
  690  1              
  691  1              if (3u == pMsgContext->reqDataLen)
  692  1              {
  693  2                      if (0 != (pMsgContext->reqData[2] & DTC_STATUS_AVAILABILITY_MASK))
  694  2                      {
  695  3                              dtc_num = DescMgr_CanDiagGetDtcCount(pMsgContext->reqData[2]);          /*get stc number through dtc status*
             -/
  696  3      
  697  3                              pMsgContext->resDataLen = 6u;
  698  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  699  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
  700  3                              pMsgContext->resData[2] = DTC_STATUS_AVAILABILITY_MASK;
  701  3                          pMsgContext->resData[3] = DTC_FORMAT_INDENTIFIER_1;
  702  3                          pMsgContext->resData[4] = (INT8U)(dtc_num >> 8u);/*High byte*/
  703  3                          pMsgContext->resData[5] = (INT8U)(dtc_num & 0xff);/*Low byte*/
  704  3      
  705  3                              CanTx_descResMsgSendEnable();                           
  706  3                      }
  707  2                      else
  708  2                      {
  709  3                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                             
  710  3                      }       
  711  2              }
  712  1              else
  713  1              {
  714  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  715  2              }
  716  1      }
  717         
  718         /*  ********************************************************************************
  719          * Function name:ApplDescReadDtcInfo_ReportDtcByStatusMask (Service request header:$19 $2 )
  720          * Description: not available 
  721          * Returns:  nothing
  722          * Parameter(s):
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 13  

  723          *   - pMsgContext->reqData:
  724          *       - Points to the first service request data byte.
  725          *       - Access type: read
  726          *   - pMsgContext->resData:
  727          *       - Points to the first writeable byte for the service response data.
  728          *       - Access type: read/write
  729          *   - pMsgContext->reqDataLen:
  730          *       - Contains the count of the service request data bytes (Sid is excluded).
  731          *       - Access type: read
  732          *   - pMsgContext->resDataLen:
  733          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  734          *       - Access type: read/write
  735          *   - pMsgContext->msgAddInfo.reqType:
  736          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  737          *       - Access type: read
  738          *   - pMsgContext->msgAddInfo.resOnReq:
  739          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  740          *       - Access type: read/write
  741          *   - pMsgContext->msgAddInfo.suppPosRes:
  742          *       - UDS only!If set no positive response will be sent on this request.
  743          *       - Access type: read
  744          * Particularitie(s) and limitation(s):
  745          *   - The function "DescProcessingDone" must be called from now on (within this
  746          * main-handler or later).
  747          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  748          * but before calling "DescProcessingDone".
  749          ********************************************************************************  */
  750         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcByStatusMask(DescMsgContext* pMsgContext)
  751         {
  752  1              INT8U i;
  753  1              INT16U dtc_num = 0u; 
  754  1      
  755  1              DESC_SERVICE_STAT INT8U descResDtcByStatusMask[DTC_CODE_MAX_NUM*4] = {0u};
  756  1      
  757  1              if (3u == pMsgContext->reqDataLen)
  758  1              {
  759  2                      if (0 != (pMsgContext->reqData[2] & DTC_STATUS_AVAILABILITY_MASK))
  760  2                      {
  761  3                              dtc_num = DescMgr_CanDiagGetDtcStatusByStatusMask(descResDtcByStatusMask, pMsgContext->reqData[2]);
  762  3                              pMsgContext->resDataLen = (INT8U)(3u + dtc_num * 4u);
  763  3      
  764  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  765  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
  766  3                              pMsgContext->resData[2] = DTC_STATUS_AVAILABILITY_MASK;
  767  3      
  768  3                              for (i = 0u; i < (4 * dtc_num); i++)
  769  3                              {
  770  4                                      pMsgContext->resData[i+3] = descResDtcByStatusMask[i];
  771  4                              }
  772  3      
  773  3                              CanTx_descResMsgSendEnable();
  774  3                      }
  775  2                      else
  776  2                      {
  777  3                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                             
  778  3                      }
  779  2              }
  780  1              else
  781  1              {
  782  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  783  2              }  
  784  1      }
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 14  

  785         
  786         /*****************************************************************************************
  787         *  Name        : ApplDesc_CompareDtcNumber
  788         *  Description : none    
  789         *  Parameter   : pMsgContext
  790         *  Returns     : none 
  791         *****************************************************************************************/
  792         DESC_SERVICE_STAT BOOLEAN ApplDesc_CompareDtcNumber(DescMsgContext* pMsgContext)
  793         {
  794  1              INT8U record_count;
  795  1          BOOLEAN NRC_occured = TRUE;
  796  1      
  797  1              for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
  798  1          {
  799  2              if ((dtc_code_data[record_count].dtc_bytes.dtc_high_byte == pMsgContext->reqData[2]) 
  800  2                   && (dtc_code_data[record_count].dtc_bytes.dtc_middle_byte == pMsgContext->reqData[3])
  801  2                   && (dtc_code_data[record_count].dtc_bytes.dtc_low_byte == pMsgContext->reqData[4]))
  802  2              {
  803  3                  NRC_occured = FALSE;
  804  3              }
  805  2                      
  806  2              if(!NRC_occured)
  807  2              {
  808  3                  return TRUE;
  809  3              }
  810  2          }
  811  1              
  812  1          return FALSE;  
  813  1      }
  814         
  815         /*  ********************************************************************************
  816          * Function name:ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber (Service request header:$19 $4 )
  817          * Description: not available 
  818          * Returns:  nothing
  819          * Parameter(s):
  820          *   - pMsgContext->reqData:
  821          *       - Points to the first service request data byte.
  822          *       - Access type: read
  823          *   - pMsgContext->resData:
  824          *       - Points to the first writeable byte for the service response data.
  825          *       - Access type: read/write
  826          *   - pMsgContext->reqDataLen:
  827          *       - Contains the count of the service request data bytes (Sid is excluded).
  828          *       - Access type: read
  829          *   - pMsgContext->resDataLen:
  830          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  831          *       - Access type: read/write
  832          *   - pMsgContext->msgAddInfo.reqType:
  833          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  834          *       - Access type: read
  835          *   - pMsgContext->msgAddInfo.resOnReq:
  836          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  837          *       - Access type: read/write
  838          *   - pMsgContext->msgAddInfo.suppPosRes:
  839          *       - UDS only!If set no positive response will be sent on this request.
  840          *       - Access type: read
  841          * Particularitie(s) and limitation(s):
  842          *   - The function "DescProcessingDone" must be called from now on (within this
  843          * main-handler or later).
  844          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  845          * but before calling "DescProcessingDone".
  846          ********************************************************************************  */
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 15  

  847         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber(DescMsgContext* pMsgContext)
  848         {
  849  1              INT8U i;
  850  1      
  851  1              if (6u == pMsgContext->reqDataLen)
  852  1              {
  853  2                      if (TRUE == ApplDesc_CompareDtcNumber(pMsgContext))
  854  2                      {
  855  3                              switch (pMsgContext->reqData[5])  
  856  3                              {
  857  4                                      case 0x01:
  858  4                                      case 0xFF:
  859  4                                              DescMgr_CanDiagGetSnapshotData(descResSnapshotData, &(pMsgContext->reqData[0]));
  860  4                                      
  861  4                                          pMsgContext->resDataLen = sizeof(descResSnapshotData) + 2u;
  862  4      
  863  4                                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  864  4                                              pMsgContext->resData[1] = pMsgContext->reqData[1];
  865  4      
  866  4                                              for (i=0u; i<sizeof(descResSnapshotData); i++)
  867  4                                              {
  868  5                                                      pMsgContext->resData[i+2] = descResSnapshotData[i];
  869  5                                              }
  870  4                                              CanTx_descResMsgSendEnable();
  871  4              
  872  4                                              break;
  873  4                                      default:
  874  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);
  875  4                                              break;
  876  4                              }               
  877  3                      }
  878  2                      else
  879  2                      {
  880  3                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                     
  881  3                      }
  882  2              }
  883  1              else
  884  1              {
  885  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  886  2              } 
  887  1      }
  888         
  889         /*  ********************************************************************************
  890          * Function name:ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber (Service request header:$19 $6
             - )
  891          * Description: not available 
  892          * Returns:  nothing
  893          * Parameter(s):
  894          *   - pMsgContext->reqData:
  895          *       - Points to the first service request data byte.
  896          *       - Access type: read
  897          *   - pMsgContext->resData:
  898          *       - Points to the first writeable byte for the service response data.
  899          *       - Access type: read/write
  900          *   - pMsgContext->reqDataLen:
  901          *       - Contains the count of the service request data bytes (Sid is excluded).
  902          *       - Access type: read
  903          *   - pMsgContext->resDataLen:
  904          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  905          *       - Access type: read/write
  906          *   - pMsgContext->msgAddInfo.reqType:
  907          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 16  

  908          *       - Access type: read
  909          *   - pMsgContext->msgAddInfo.resOnReq:
  910          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  911          *       - Access type: read/write
  912          *   - pMsgContext->msgAddInfo.suppPosRes:
  913          *       - UDS only!If set no positive response will be sent on this request.
  914          *       - Access type: read
  915          * Particularitie(s) and limitation(s):
  916          *   - The function "DescProcessingDone" must be called from now on (within this
  917          * main-handler or later).
  918          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  919          * but before calling "DescProcessingDone".
  920          ********************************************************************************  */
  921         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber(DescMsgContext* pMsgCont
             -ext)
  922         {
  923  1              INT8U i;
  924  1      
  925  1          /**
  926  1           *  pMsgContext->reqData[0]-----> DTC Number High byte
  927  1           *  pMsgContext->reqData[1]-----> DTC Number Middle byte
  928  1           *  pMsgContext->reqData[2]-----> DTC Number Low byte
  929  1           *  pMsgContext->reqData[3]-----> Request extend data type
  930  1           *  All can be config in canoe or vspy
  931  1           */
  932  1              if (TRUE == ApplDesc_CompareDtcNumber(pMsgContext))
  933  1              {
  934  2                      switch (pMsgContext->reqData[5]) 
  935  2                      {
  936  3                              case 0x01:
  937  3                              case 0x02:
  938  3                              case 0x03:
  939  3                              case 0x04:
  940  3                                      DescMgr_CanDiagGetExtendData(descResExtendedData, &(pMsgContext->reqData[0])); 
  941  3      
  942  3                                      pMsgContext->resDataLen = 8u;                           
  943  3                                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  944  3                                      pMsgContext->resData[1] = pMsgContext->reqData[1];
  945  3      
  946  3                                      for (i = 0u; i < 6u; i++)
  947  3                                      {
  948  4                                              pMsgContext->resData[i+2] = descResExtendedData[i];
  949  4                                      }
  950  3      
  951  3                                      CanTx_descResMsgSendEnable();
  952  3                                      
  953  3                                  break;
  954  3                                      
  955  3                              case 0xFF:
  956  3                                  DescMgr_CanDiagGetExtendData(descResExtendedData, &(pMsgContext->reqData[0]));    
  957  3      
  958  3                                      pMsgContext->resDataLen = sizeof(descResExtendedData) + 2u;                             
  959  3                                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  960  3                                      pMsgContext->resData[1] = pMsgContext->reqData[1];
  961  3      
  962  3                                      for (i = 0u; i < sizeof(descResExtendedData); i++)
  963  3                                      {
  964  4                                              pMsgContext->resData[i+2] = descResExtendedData[i];
  965  4                                      }
  966  3                                      CanTx_descResMsgSendEnable();
  967  3                              
  968  3                                      break;
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 17  

  969  3                              
  970  3                              default:
  971  3                                      DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);
  972  3                                      break;
  973  3                      }               
  974  2              }
  975  1              else
  976  1              {
  977  2                      DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);             
  978  2              }
  979  1      }
  980         
  981         /*  ********************************************************************************
  982          * Function name:ApplDescReadDtcInfo_ReportSupportedDtc (Service request header:$19 $A )
  983          * Description: not available 
  984          * Returns:  nothing
  985          * Parameter(s):
  986          *   - pMsgContext->reqData:
  987          *       - Points to the first service request data byte.
  988          *       - Access type: read
  989          *   - pMsgContext->resData:
  990          *       - Points to the first writeable byte for the service response data.
  991          *       - Access type: read/write
  992          *   - pMsgContext->reqDataLen:
  993          *       - Contains the count of the service request data bytes (Sid is excluded).
  994          *       - Access type: read
  995          *   - pMsgContext->resDataLen:
  996          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  997          *       - Access type: read/write
  998          *   - pMsgContext->msgAddInfo.reqType:
  999          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1000          *       - Access type: read
 1001          *   - pMsgContext->msgAddInfo.resOnReq:
 1002          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1003          *       - Access type: read/write
 1004          *   - pMsgContext->msgAddInfo.suppPosRes:
 1005          *       - UDS only!If set no positive response will be sent on this request.
 1006          *       - Access type: read
 1007          * Particularitie(s) and limitation(s):
 1008          *   - The function "DescProcessingDone" must be called from now on (within this
 1009          * main-handler or later).
 1010          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1011          * but before calling "DescProcessingDone".
 1012          ********************************************************************************  */
 1013         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportSupportedDtc(DescMsgContext* pMsgContext)
 1014         {
 1015  1              INT8U i;
 1016  1              INT16U dtc_num = 0u;
 1017  1              DESC_SERVICE_STAT INT8U descResDtcReportStatus[DTC_CODE_MAX_NUM*4] = {0u};
 1018  1      
 1019  1              if (2u == pMsgContext->reqDataLen)
 1020  1              {
 1021  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1022  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1023  2                      pMsgContext->resData[2] = DTC_STATUS_AVAILABILITY_MASK; 
 1024  2      
 1025  2                  dtc_num = DescMgr_CanDiagGetSupportedDtc(descResDtcReportStatus);
 1026  2                  pMsgContext->resDataLen = (INT8U)(3u + dtc_num * 4u);
 1027  2      
 1028  2                      for (i = 0u; i < (dtc_num * 4u); i++)
 1029  2                      {
 1030  3                              pMsgContext->resData[i+3] = descResDtcReportStatus[i];
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 18  

 1031  3                      }
 1032  2                      CanTx_descResMsgSendEnable();           
 1033  2              }
 1034  1              else
 1035  1              {
 1036  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1037  2              }       
 1038  1      }
 1039         
 1040         /*  ********************************************************************************
 1041          * Function name:ApplDescReadByDataIdentifier_OEM_SparePartNumber (Service request header:$22 $F1 $87 )
 1042          * Description: not available 
 1043          * Returns:  nothing
 1044          * Parameter(s):
 1045          *   - pMsgContext->reqData:
 1046          *       - Points to the first service request data byte.
 1047          *       - Access type: read
 1048          *   - pMsgContext->resData:
 1049          *       - Points to the first writeable byte for the service response data.
 1050          *       - Access type: read/write
 1051          *   - pMsgContext->reqDataLen:
 1052          *       - Contains the count of the service request data bytes (Sid is excluded).
 1053          *       - Access type: read
 1054          *   - pMsgContext->resDataLen:
 1055          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1056          *       - Access type: read/write
 1057          *   - pMsgContext->msgAddInfo.reqType:
 1058          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1059          *       - Access type: read
 1060          *   - pMsgContext->msgAddInfo.resOnReq:
 1061          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1062          *       - Access type: read/write
 1063          *   - pMsgContext->msgAddInfo.suppPosRes:
 1064          *       - UDS only!If set no positive response will be sent on this request.
 1065          *       - Access type: read
 1066          * Particularitie(s) and limitation(s):
 1067          *   - The function "DescProcessingDone" must be called from now on (within this
 1068          * main-handler or later).
 1069          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1070          * but before calling "DescProcessingDone".
 1071          ********************************************************************************  */
 1072         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_SparePartNumber(DescMsgContext* pMsgContext)
 1073         {
 1074  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1075  1              /* Contains no request data */
 1076  1              /* Dummy example of how to write the response data. */
 1077  1      
 1078  1              INT8U i; 
 1079  1      
 1080  1              if (0x03 == pMsgContext->reqDataLen)
 1081  1              {
 1082  2                      if (0u == VCU_VehicleSpeed)
 1083  2                      {
 1084  3                              pMsgContext->resDataLen = sizeof(VehicleManufacturerSparePartNumberDataIdentifier) + 3u;
 1085  3      
 1086  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1087  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1088  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];      
 1089  3                              
 1090  3                              for (i = 0u; i < sizeof(VehicleManufacturerSparePartNumberDataIdentifier); i++)
 1091  3                              {
 1092  4                                      pMsgContext->resData[i+3] = VehicleManufacturerSparePartNumberDataIdentifier[i];
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 19  

 1093  4                              }               
 1094  3                              CanTx_descResMsgSendEnable();
 1095  3                      }
 1096  2                      else
 1097  2                      {
 1098  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 1099  3                      } 
 1100  2              }
 1101  1              else
 1102  1              {
 1103  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1104  2              }
 1105  1      }
 1106         
 1107         /*  ********************************************************************************
 1108          * Function name:ApplDescReadByDataIdentifier_SupplierInformation (Service request header:$22 $F1 $8A )
 1109          * Description: not available 
 1110          * Returns:  nothing
 1111          * Parameter(s):
 1112          *   - pMsgContext->reqData:
 1113          *       - Points to the first service request data byte.
 1114          *       - Access type: read
 1115          *   - pMsgContext->resData:
 1116          *       - Points to the first writeable byte for the service response data.
 1117          *       - Access type: read/write
 1118          *   - pMsgContext->reqDataLen:
 1119          *       - Contains the count of the service request data bytes (Sid is excluded).
 1120          *       - Access type: read
 1121          *   - pMsgContext->resDataLen:
 1122          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1123          *       - Access type: read/write
 1124          *   - pMsgContext->msgAddInfo.reqType:
 1125          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1126          *       - Access type: read
 1127          *   - pMsgContext->msgAddInfo.resOnReq:
 1128          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1129          *       - Access type: read/write
 1130          *   - pMsgContext->msgAddInfo.suppPosRes:
 1131          *       - UDS only!If set no positive response will be sent on this request.
 1132          *       - Access type: read
 1133          * Particularitie(s) and limitation(s):
 1134          *   - The function "DescProcessingDone" must be called from now on (within this
 1135          * main-handler or later).
 1136          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1137          * but before calling "DescProcessingDone".
 1138          ********************************************************************************  */
 1139         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SupplierInformation(DescMsgContext* pMsgContext)
 1140         {
 1141  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1142  1              /* Contains no request data */
 1143  1              /* Dummy example of how to write the response data. */
 1144  1      
 1145  1              INT8U i; 
 1146  1      
 1147  1              if (0x03 == pMsgContext->reqDataLen) 
 1148  1              { 
 1149  2                      if (0u == VCU_VehicleSpeed)
 1150  2                      {
 1151  3                              pMsgContext->resDataLen = sizeof(SystemSupplierIdentifierDataIdentifier) + 3u;
 1152  3      
 1153  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1154  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 20  

 1155  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1156  3                              
 1157  3                              for (i = 0u; i < sizeof(SystemSupplierIdentifierDataIdentifier); i++)
 1158  3                              {
 1159  4                                      pMsgContext->resData[i+3] = SystemSupplierIdentifierDataIdentifier[i];
 1160  4                              }
 1161  3                              CanTx_descResMsgSendEnable();
 1162  3                      }
 1163  2                      else
 1164  2                      {
 1165  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 1166  3                      } 
 1167  2              }
 1168  1              else
 1169  1              {
 1170  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1171  2              }
 1172  1      }
 1173         
 1174         /*  ********************************************************************************
 1175          * Function name:ApplDescReadByDataIdentifier_ECU_SerialNumber (Service request header:$22 $F1 $8C )
 1176          * Description: not available 
 1177          * Returns:  nothing
 1178          * Parameter(s):
 1179          *   - pMsgContext->reqData:
 1180          *       - Points to the first service request data byte.
 1181          *       - Access type: read
 1182          *   - pMsgContext->resData:
 1183          *       - Points to the first writeable byte for the service response data.
 1184          *       - Access type: read/write
 1185          *   - pMsgContext->reqDataLen:
 1186          *       - Contains the count of the service request data bytes (Sid is excluded).
 1187          *       - Access type: read
 1188          *   - pMsgContext->resDataLen:
 1189          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1190          *       - Access type: read/write
 1191          *   - pMsgContext->msgAddInfo.reqType:
 1192          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1193          *       - Access type: read
 1194          *   - pMsgContext->msgAddInfo.resOnReq:
 1195          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1196          *       - Access type: read/write
 1197          *   - pMsgContext->msgAddInfo.suppPosRes:
 1198          *       - UDS only!If set no positive response will be sent on this request.
 1199          *       - Access type: read
 1200          * Particularitie(s) and limitation(s):
 1201          *   - The function "DescProcessingDone" must be called from now on (within this
 1202          * main-handler or later).
 1203          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1204          * but before calling "DescProcessingDone".
 1205          ********************************************************************************  */
 1206         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SerialNumber(DescMsgContext* pMsgContext)
 1207         {
 1208  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1209  1              /* Contains no request data */
 1210  1              /* Dummy example of how to write the response data. */
 1211  1      
 1212  1              INT8U i; 
 1213  1      
 1214  1              if (0x03 == pMsgContext->reqDataLen) 
 1215  1              {
 1216  2                      if (0u == VCU_VehicleSpeed)
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 21  

 1217  2                      {
 1218  3                              ReadString_v_g(descDataIdentifier.systemSerialNumber, ECU_SERIAL_NUM_ADDRESS, ECU_SERIAL_NUM_LENGTH);
 1219  3      
 1220  3                              pMsgContext->resDataLen = ECU_SERIAL_NUM_LENGTH + 3u;
 1221  3      
 1222  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1223  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1224  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1225  3                              
 1226  3                              for (i = 0u; i<ECU_SERIAL_NUM_LENGTH; i++)
 1227  3                              {
 1228  4                                      pMsgContext->resData[i+3] = descDataIdentifier.systemSerialNumber[i];
 1229  4                              }
 1230  3                              CanTx_descResMsgSendEnable();
 1231  3                      }
 1232  2                      else
 1233  2                      {
 1234  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1235  3                      } 
 1236  2              }
 1237  1              else
 1238  1              {
 1239  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1240  2              }
 1241  1      }
 1242         
 1243         /*  ********************************************************************************
 1244          * Function name:ApplDescReadByDataIdentifier_OEM_VIN (Service request header:$22 $F1 $90 )
 1245          * Description: not available 
 1246          * Returns:  nothing
 1247          * Parameter(s):
 1248          *   - pMsgContext->reqData:
 1249          *       - Points to the first service request data byte.
 1250          *       - Access type: read
 1251          *   - pMsgContext->resData:
 1252          *       - Points to the first writeable byte for the service response data.
 1253          *       - Access type: read/write
 1254          *   - pMsgContext->reqDataLen:
 1255          *       - Contains the count of the service request data bytes (Sid is excluded).
 1256          *       - Access type: read
 1257          *   - pMsgContext->resDataLen:
 1258          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1259          *       - Access type: read/write
 1260          *   - pMsgContext->msgAddInfo.reqType:
 1261          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1262          *       - Access type: read
 1263          *   - pMsgContext->msgAddInfo.resOnReq:
 1264          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1265          *       - Access type: read/write
 1266          *   - pMsgContext->msgAddInfo.suppPosRes:
 1267          *       - UDS only!If set no positive response will be sent on this request.
 1268          *       - Access type: read
 1269          * Particularitie(s) and limitation(s):
 1270          *   - The function "DescProcessingDone" must be called from now on (within this
 1271          * main-handler or later).
 1272          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1273          * but before calling "DescProcessingDone".
 1274          ********************************************************************************  */
 1275         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_VIN(DescMsgContext* pMsgContext)
 1276         {
 1277  1              INT8U i; 
 1278  1      
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 22  

 1279  1              if (0x03 == pMsgContext->reqDataLen) 
 1280  1              { 
 1281  2                      if (0u == VCU_VehicleSpeed)
 1282  2                      {
 1283  3                              ReadString_v_g(descDataIdentifier.OEM_VIN, VIN_VALUE_ADDRESS, VIN_VALUE_LENGTH);        
 1284  3      
 1285  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1286  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1287  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1288  3                              
 1289  3                              if(0x01 == descDataIdentifier.OEM_VIN[VIN_VALUE_LENGTH - 1])
 1290  3                              {
 1291  4                                      for (i = 0u; i < (VIN_VALUE_LENGTH - 1); i++)
 1292  4                                      {
 1293  5                                              pMsgContext->resData[i + 3] = descDataIdentifier.OEM_VIN[i];
 1294  5                                      }
 1295  4                              }
 1296  3                              else
 1297  3                              {
 1298  4                                      for (i = 0u; i < (VIN_VALUE_LENGTH - 1); i++)
 1299  4                                      {
 1300  5                                              pMsgContext->resData[i + 3] = 0xFF;
 1301  5                                      }
 1302  4                              }
 1303  3                              
 1304  3                              pMsgContext->resDataLen = (VIN_VALUE_LENGTH - 1) + 3u;
 1305  3                              CanTx_descResMsgSendEnable();
 1306  3                      }
 1307  2                      else
 1308  2                      {
 1309  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1310  3                      } 
 1311  2              }
 1312  1              else
 1313  1              {
 1314  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1315  2              }
 1316  1      }
 1317                 
 1318         /*  ********************************************************************************
 1319          * Function name:ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber (Service request header:$22 $F1 $9
             -3 )
 1320          * Description: not available 
 1321          * Returns:  nothing
 1322          * Parameter(s):
 1323          *   - pMsgContext->reqData:
 1324          *       - Points to the first service request data byte.
 1325          *       - Access type: read
 1326          *   - pMsgContext->resData:
 1327          *       - Points to the first writeable byte for the service response data.
 1328          *       - Access type: read/write
 1329          *   - pMsgContext->reqDataLen:
 1330          *       - Contains the count of the service request data bytes (Sid is excluded).
 1331          *       - Access type: read
 1332          *   - pMsgContext->resDataLen:
 1333          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1334          *       - Access type: read/write
 1335          *   - pMsgContext->msgAddInfo.reqType:
 1336          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1337          *       - Access type: read
 1338          *   - pMsgContext->msgAddInfo.resOnReq:
 1339          *       - Indicates if there will be response. Allowed only to write only 0 !!!
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 23  

 1340          *       - Access type: read/write
 1341          *   - pMsgContext->msgAddInfo.suppPosRes:
 1342          *       - UDS only!If set no positive response will be sent on this request.
 1343          *       - Access type: read
 1344          * Particularitie(s) and limitation(s):
 1345          *   - The function "DescProcessingDone" must be called from now on (within this
 1346          * main-handler or later).
 1347          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1348          * but before calling "DescProcessingDone".
 1349          ********************************************************************************  */
 1350         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber(DescMsgContext* pMsgContext)
 1351         {
 1352  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1353  1              /* Contains no request data */
 1354  1              /* Dummy example of how to write the response data. */
 1355  1      
 1356  1              INT8U i; 
 1357  1      
 1358  1              if (0x03 == pMsgContext->reqDataLen)
 1359  1              {
 1360  2                      if (0u == VCU_VehicleSpeed)
 1361  2                      {
 1362  3                              pMsgContext->resDataLen = sizeof(SystemHardwareVersionDataIdentifier) + 3u;     
 1363  3      
 1364  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1365  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1366  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1367  3                              
 1368  3                              for (i=0u; i<sizeof(SystemHardwareVersionDataIdentifier); i++)
 1369  3                              {
 1370  4                                      pMsgContext->resData[i+3] = SystemHardwareVersionDataIdentifier[i];                                     
 1371  4                              }
 1372  3                              CanTx_descResMsgSendEnable();                           
 1373  3                      }
 1374  2                      else
 1375  2                      {
 1376  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 1377  3                      } 
 1378  2              }
 1379  1              else
 1380  1              {
 1381  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1382  2              }
 1383  1      }
 1384         
 1385         /*  ********************************************************************************
 1386          * Function name:ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber (Service request header:$22 $F1 $9
             -5 )
 1387          * Description: not available 
 1388          * Returns:  nothing
 1389          * Parameter(s):
 1390          *   - pMsgContext->reqData:
 1391          *       - Points to the first service request data byte.
 1392          *       - Access type: read
 1393          *   - pMsgContext->resData:
 1394          *       - Points to the first writeable byte for the service response data.
 1395          *       - Access type: read/write
 1396          *   - pMsgContext->reqDataLen:
 1397          *       - Contains the count of the service request data bytes (Sid is excluded).
 1398          *       - Access type: read
 1399          *   - pMsgContext->resDataLen:
 1400          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 24  

 1401          *       - Access type: read/write
 1402          *   - pMsgContext->msgAddInfo.reqType:
 1403          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1404          *       - Access type: read
 1405          *   - pMsgContext->msgAddInfo.resOnReq:
 1406          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1407          *       - Access type: read/write
 1408          *   - pMsgContext->msgAddInfo.suppPosRes:
 1409          *       - UDS only!If set no positive response will be sent on this request.
 1410          *       - Access type: read
 1411          * Particularitie(s) and limitation(s):
 1412          *   - The function "DescProcessingDone" must be called from now on (within this
 1413          * main-handler or later).
 1414          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1415          * but before calling "DescProcessingDone".
 1416          ********************************************************************************  */
 1417         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber(DescMsgContext* pMsgContext)
 1418         {
 1419  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1420  1              /* Contains no request data */
 1421  1              /* Dummy example of how to write the response data. */
 1422  1      
 1423  1              INT8U i; 
 1424  1              
 1425  1              if (0x03 == pMsgContext->reqDataLen) 
 1426  1              { 
 1427  2                      if (0u == VCU_VehicleSpeed)
 1428  2                      {
 1429  3                              pMsgContext->resDataLen = sizeof(SystemSoftwareVersionDataIdentifier) + 3u;     
 1430  3      
 1431  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1432  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1433  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1434  3                              
 1435  3                              for (i = 0u; i < sizeof(SystemSoftwareVersionDataIdentifier); i++)
 1436  3                              {
 1437  4                                      pMsgContext->resData[i+3] = SystemSoftwareVersionDataIdentifier[i];
 1438  4                              }
 1439  3                              CanTx_descResMsgSendEnable();
 1440  3                      }
 1441  2                      else
 1442  2                      {
 1443  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1444  3                      } 
 1445  2              }
 1446  1              else
 1447  1              {
 1448  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1449  2              }
 1450  1      }
 1451         
 1452         /*  ********************************************************************************
 1453          * Function name:ApplDescReadByDataIdentifier_SystemNameDataNumber (Service request header:$22 $F1 $97 )
 1454          * Description: not available 
 1455          * Returns:  nothing
 1456          * Parameter(s):
 1457          *   - pMsgContext->reqData:
 1458          *       - Points to the first service request data byte.
 1459          *       - Access type: read
 1460          *   - pMsgContext->resData:
 1461          *       - Points to the first writeable byte for the service response data.
 1462          *       - Access type: read/write
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 25  

 1463          *   - pMsgContext->reqDataLen:
 1464          *       - Contains the count of the service request data bytes (Sid is excluded).
 1465          *       - Access type: read
 1466          *   - pMsgContext->resDataLen:
 1467          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1468          *       - Access type: read/write
 1469          *   - pMsgContext->msgAddInfo.reqType:
 1470          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1471          *       - Access type: read
 1472          *   - pMsgContext->msgAddInfo.resOnReq:
 1473          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1474          *       - Access type: read/write
 1475          *   - pMsgContext->msgAddInfo.suppPosRes:
 1476          *       - UDS only!If set no positive response will be sent on this request.
 1477          *       - Access type: read
 1478          * Particularitie(s) and limitation(s):
 1479          *   - The function "DescProcessingDone" must be called from now on (within this
 1480          * main-handler or later).
 1481          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1482          * but before calling "DescProcessingDone".
 1483          ********************************************************************************  */
 1484         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SystemNameDataNumber(DescMsgContext* pMsgContext)
 1485         {
 1486  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1487  1              /* Contains no request data */
 1488  1              /* Dummy example of how to write the response data. */
 1489  1      
 1490  1              INT8U i; 
 1491  1      
 1492  1              if (0x03 == pMsgContext->reqDataLen) 
 1493  1              { 
 1494  2                      if (0u == VCU_VehicleSpeed)
 1495  2                      {
 1496  3                              pMsgContext->resDataLen = sizeof(SystemNameDataIdentifier) + 3u;
 1497  3      
 1498  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1499  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1500  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1501  3                              
 1502  3                              /* First data frame */
 1503  3                              for (i=0u; i<sizeof(SystemNameDataIdentifier); i++)
 1504  3                              {
 1505  4                                      pMsgContext->resData[i+3] = SystemNameDataIdentifier[i];
 1506  4                              }
 1507  3                              CanTx_descResMsgSendEnable();
 1508  3                      }
 1509  2                      else
 1510  2                      {
 1511  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1512  3                      } 
 1513  2              }
 1514  1              else
 1515  1              {
 1516  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1517  2              }
 1518  1      }
 1519         
 1520         
 1521         /*  ********************************************************************************
 1522          * Function name:ApplDescSimulateAdcData (Service request header:$22 $66 $66 )
 1523          * Description: not available 
 1524          * Returns:  nothing
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 26  

 1525          * Parameter(s):
 1526          *   - pMsgContext->reqData:
 1527          *       - Points to the first service request data byte.
 1528          *       - Access type: read
 1529          *   - pMsgContext->resData:
 1530          *       - Points to the first writeable byte for the service response data.
 1531          *       - Access type: read/write
 1532          *   - pMsgContext->reqDataLen:
 1533          *       - Contains the count of the service request data bytes (Sid is excluded).
 1534          *       - Access type: read
 1535          *   - pMsgContext->resDataLen:
 1536          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1537          *       - Access type: read/write
 1538          *   - pMsgContext->msgAddInfo.reqType:
 1539          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1540          *       - Access type: read
 1541          *   - pMsgContext->msgAddInfo.resOnReq:
 1542          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1543          *       - Access type: read/write
 1544          *   - pMsgContext->msgAddInfo.suppPosRes:
 1545          *       - UDS only!If set no positive response will be sent on this request.
 1546          *       - Access type: read
 1547          * Particularitie(s) and limitation(s):
 1548          *   - The function "DescProcessingDone" must be called from now on (within this
 1549          * main-handler or later).
 1550          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1551          * but before calling "DescProcessingDone".
 1552          ********************************************************************************  */
 1553         DESC_SERVICE_STAT void ApplDescSimulateAdcData(DescMsgContext* pMsgContext)
 1554         {
 1555  1      
 1556  1              if ((7 == pMsgContext->reqDataLen)
 1557  1                      && (pMsgContext->reqData[4] < 15))
 1558  1              {
 1559  2                      if (0x01 == pMsgContext->reqData[3])
 1560  2                      {
 1561  3                              g_adcSimulateDataFlag = TRUE;
 1562  3                              
 1563  3                              g_adcSimulateDataIndex = pMsgContext->reqData[4];// adc channel index
 1564  3                              g_adcSimulateData = (pMsgContext->reqData[5] << 8) | pMsgContext->reqData[6];// adc channel data
 1565  3                      }
 1566  2                      else
 1567  2                      {
 1568  3                              g_adcSimulateDataFlag = FALSE;
 1569  3                              g_adcSimulateDataIndex = 0;
 1570  3                              g_adcSimulateData = 0;
 1571  3                      }
 1572  2                      pMsgContext->resDataLen = 0x03;         
 1573  2                      DescSetPosResponse(pMsgContext);
 1574  2              }
 1575  1              else
 1576  1              {
 1577  2              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1578  2              }
 1579  1      }
 1580         
 1581         
 1582         /*  ********************************************************************************
 1583          * Function name:ApplDescReadByDataIdentifier_EepromData (Service request header:$22 $66 $67 )
 1584          * Description: not available 
 1585          * Returns:  nothing
 1586          * Parameter(s):
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 27  

 1587          *   - pMsgContext->reqData:
 1588          *       - Points to the first service request data byte.
 1589          *       - Access type: read
 1590          *   - pMsgContext->resData:
 1591          *       - Points to the first writeable byte for the service response data.
 1592          *       - Access type: read/write
 1593          *   - pMsgContext->reqDataLen:
 1594          *       - Contains the count of the service request data bytes (Sid is excluded).
 1595          *       - Access type: read
 1596          *   - pMsgContext->resDataLen:
 1597          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1598          *       - Access type: read/write
 1599          *   - pMsgContext->msgAddInfo.reqType:
 1600          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1601          *       - Access type: read
 1602          *   - pMsgContext->msgAddInfo.resOnReq:
 1603          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1604          *       - Access type: read/write
 1605          *   - pMsgContext->msgAddInfo.suppPosRes:
 1606          *       - UDS only!If set no positive response will be sent on this request.
 1607          *       - Access type: read
 1608          * Particularitie(s) and limitation(s):
 1609          *   - The function "DescProcessingDone" must be called from now on (within this
 1610          * main-handler or later).
 1611          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1612          * but before calling "DescProcessingDone".
 1613          ********************************************************************************  */
 1614         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_EepromData(DescMsgContext* pMsgContext)
 1615         {
 1616  1              INT8U i;
 1617  1              INT16U eepromDataLength = 0;
 1618  1              INT32U eepromDataAddress = 0;
 1619  1              INT8U dataBuffer[256] = {0};
 1620  1              
 1621  1              if (6 == pMsgContext->reqDataLen)
 1622  1              {
 1623  2                      eepromDataAddress = ((INT32U)0xC40000) | ((INT32U)pMsgContext->reqData[3] << 8) | ((INT32U)pMsgContext->
             -reqData[4]);
 1624  2                      eepromDataLength = pMsgContext->reqData[5];
 1625  2                      ReadString_v_g(dataBuffer, eepromDataAddress, eepromDataLength);
 1626  2      
 1627  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1628  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1629  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1630  2                      pMsgContext->resDataLen = eepromDataLength + 3u;
 1631  2                      
 1632  2                      for (i = 0u; i < eepromDataLength; i++)
 1633  2                      {
 1634  3                              pMsgContext->resData[i + 3] = dataBuffer[i];
 1635  3                      }
 1636  2                      CanTx_descResMsgSendEnable();
 1637  2              }
 1638  1              else
 1639  1              {
 1640  2              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1641  2              }
 1642  1      }
 1643         
 1644         /*  ********************************************************************************
 1645          * Function name:ApplDescReadDataByIdentifier_Pedal_Cylinder_Data (Service request header:$22 $22 $01 )
 1646          * Description: not available 
 1647          * Returns:  nothing
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 28  

 1648          * Parameter(s):
 1649          *   - pMsgContext->reqData:
 1650          *       - Points to the first service request data byte.
 1651          *       - Access type: read
 1652          *   - pMsgContext->resData:
 1653          *       - Points to the first writeable byte for the service response data.
 1654          *       - Access type: read/write
 1655          *   - pMsgContext->reqDataLen:
 1656          *       - Contains the count of the service request data bytes (Sid is excluded).
 1657          *       - Access type: read
 1658          *   - pMsgContext->resDataLen:
 1659          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1660          *       - Access type: read/write
 1661          *   - pMsgContext->msgAddInfo.reqType:
 1662          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1663          *       - Access type: read
 1664          *   - pMsgContext->msgAddInfo.resOnReq:
 1665          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1666          *       - Access type: read/write
 1667          *   - pMsgContext->msgAddInfo.suppPosRes:
 1668          *       - UDS only!If set no positive response will be sent on this request.
 1669          *       - Access type: read
 1670          * Particularitie(s) and limitation(s):
 1671          *   - The function "DescProcessingDone" must be called from now on (within this
 1672          * main-handler or later).
 1673          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1674          * but before calling "DescProcessingDone".
 1675          ********************************************************************************  */
 1676         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_Pedal_Cylinder_Data(DescMsgContext* pMsgContext)
 1677         {
 1678  1              const T_ADC *ptr_adc = Adc_SampleData();
 1679  1              
 1680  1              if (3 == pMsgContext->reqDataLen)
 1681  1              {
 1682  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1683  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1684  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1685  2      
 1686  2                      pMsgContext->resData[3] = (INT8U)(gRTE_pedalInitValue[0] >> 8);
 1687  2                      pMsgContext->resData[4] = (INT8U)(gRTE_pedalInitValue[0]);
 1688  2                      pMsgContext->resData[5] = (INT8U)(gRTE_pedalInitValue[1] >> 8);
 1689  2                      pMsgContext->resData[6] = (INT8U)(gRTE_pedalInitValue[1]);
 1690  2                      pMsgContext->resData[7] = (INT8U)(ptr_adc->brakePedalTrip_Adc[0] >> 8);
 1691  2                      pMsgContext->resData[8] = (INT8U)(ptr_adc->brakePedalTrip_Adc[0]);
 1692  2                      pMsgContext->resData[9] = (INT8U)(ptr_adc->brakePedalTrip_Adc[1] >> 8);
 1693  2                      pMsgContext->resData[10] = (INT8U)(ptr_adc->brakePedalTrip_Adc[1]);
 1694  2                      
 1695  2                      pMsgContext->resData[11] = (INT8U)(gRTE_cylinderInitValue[0] >> 8);
 1696  2                      pMsgContext->resData[12] = (INT8U)(gRTE_cylinderInitValue[0]);
 1697  2                      pMsgContext->resData[13] = (INT8U)(gRTE_cylinderInitValue[1] >> 8);
 1698  2                      pMsgContext->resData[14] = (INT8U)(gRTE_cylinderInitValue[1]);
 1699  2                      pMsgContext->resData[15] = (INT8U)(ptr_adc->mainCylinderTrip_Adc[0] >> 8);
 1700  2                      pMsgContext->resData[16] = (INT8U)(ptr_adc->mainCylinderTrip_Adc[0]);
 1701  2                      pMsgContext->resData[17] = (INT8U)(ptr_adc->mainCylinderTrip_Adc[1] >> 8);
 1702  2                      pMsgContext->resData[18] = (INT8U)(ptr_adc->mainCylinderTrip_Adc[1]);
 1703  2      
 1704  2                      pMsgContext->resDataLen = 16u + 3u;
 1705  2                      
 1706  2                      CanTx_descResMsgSendEnable();
 1707  2              }
 1708  1              else
 1709  1              {
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 29  

 1710  2              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1711  2              }
 1712  1      }
 1713         
 1714         
 1715         /*  ********************************************************************************
 1716          * Function name:ApplDescReadDataByIdentifier_LongTimeBrake_Times(Service request header:$22 $22 $02 )
 1717          * Description: not available 
 1718          * Returns:  nothing
 1719          * Parameter(s):
 1720          *   - pMsgContext->reqData:
 1721          *       - Points to the first service request data byte.
 1722          *       - Access type: read
 1723          *   - pMsgContext->resData:
 1724          *       - Points to the first writeable byte for the service response data.
 1725          *       - Access type: read/write
 1726          *   - pMsgContext->reqDataLen:
 1727          *       - Contains the count of the service request data bytes (Sid is excluded).
 1728          *       - Access type: read
 1729          *   - pMsgContext->resDataLen:
 1730          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1731          *       - Access type: read/write
 1732          *   - pMsgContext->msgAddInfo.reqType:
 1733          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1734          *       - Access type: read
 1735          *   - pMsgContext->msgAddInfo.resOnReq:
 1736          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1737          *       - Access type: read/write
 1738          *   - pMsgContext->msgAddInfo.suppPosRes:
 1739          *       - UDS only!If set no positive response will be sent on this request.
 1740          *       - Access type: read
 1741          * Particularitie(s) and limitation(s):
 1742          *   - The function "DescProcessingDone" must be called from now on (within this
 1743          * main-handler or later).
 1744          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1745          * but before calling "DescProcessingDone".
 1746          ********************************************************************************  */
 1747         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_LongTimeBrake_Times(DescMsgContext* pMsgContext)
 1748         {       
 1749  1              if (3 == pMsgContext->reqDataLen)
 1750  1              {
 1751  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1752  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1753  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1754  2      
 1755  2                      pMsgContext->resData[3] = (INT8U)((g_longTimeBrakeCnt>>24) & 0xFF);
 1756  2                      pMsgContext->resData[4] = (INT8U)((g_longTimeBrakeCnt>>16) & 0xFF);
 1757  2                      pMsgContext->resData[5] = (INT8U)((g_longTimeBrakeCnt>>8)  & 0xFF);
 1758  2                      pMsgContext->resData[6] = (INT8U)( g_longTimeBrakeCnt      & 0xFF);
 1759  2      
 1760  2                      pMsgContext->resDataLen = 7u;
 1761  2                      
 1762  2                      CanTx_descResMsgSendEnable();
 1763  2              }
 1764  1              else
 1765  1              {
 1766  2              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1767  2              }
 1768  1      }
 1769         
 1770         
 1771         /*  ********************************************************************************
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 30  

 1772          * Function name:ApplDescReadDataByIdentifier_SettingParameter_Data1(Service request header:$22 $DE $F0 )
 1773          * Description: not available 
 1774          * Returns:  nothing
 1775          * Parameter(s):
 1776          *   - pMsgContext->reqData:
 1777          *       - Points to the first service request data byte.
 1778          *       - Access type: read
 1779          *   - pMsgContext->resData:
 1780          *       - Points to the first writeable byte for the service response data.
 1781          *       - Access type: read/write
 1782          *   - pMsgContext->reqDataLen:
 1783          *       - Contains the count of the service request data bytes (Sid is excluded).
 1784          *       - Access type: read
 1785          *   - pMsgContext->resDataLen:
 1786          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1787          *       - Access type: read/write
 1788          *   - pMsgContext->msgAddInfo.reqType:
 1789          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1790          *       - Access type: read
 1791          *   - pMsgContext->msgAddInfo.resOnReq:
 1792          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1793          *       - Access type: read/write
 1794          *   - pMsgContext->msgAddInfo.suppPosRes:
 1795          *       - UDS only!If set no positive response will be sent on this request.
 1796          *       - Access type: read
 1797          * Particularitie(s) and limitation(s):
 1798          *   - The function "DescProcessingDone" must be called from now on (within this
 1799          * main-handler or later).
 1800          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1801          * but before calling "DescProcessingDone".
 1802          ********************************************************************************  */
 1803         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data1(DescMsgContext* pMsgContext)
 1804         {       
 1805  1              if (3 == pMsgContext->reqDataLen)
 1806  1              {
 1807  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1808  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1809  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1810  2      
 1811  2                      Std_DataCopy(pressure_To_cylinder, &pMsgContext->resData[3], sizeof(pressure_To_cylinder));     
 1812  2                      pMsgContext->resDataLen = 3u + sizeof(pressure_To_cylinder);
 1813  2                              
 1814  2                      CanTx_descResMsgSendEnable();
 1815  2              }
 1816  1              else
 1817  1              {
 1818  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1819  2              }
 1820  1      }
 1821         
 1822         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data2(DescMsgContext* pMsgContext)
 1823         {       
 1824  1              if (3 == pMsgContext->reqDataLen)
 1825  1              {
 1826  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1827  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1828  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1829  2      
 1830  2                      Std_DataCopy(cylinder_To_pressure, &pMsgContext->resData[3], sizeof(cylinder_To_pressure));             
 1831  2                      pMsgContext->resDataLen = 3u + sizeof(cylinder_To_pressure);
 1832  2                              
 1833  2                      CanTx_descResMsgSendEnable();
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 31  

 1834  2              }
 1835  1              else
 1836  1              {
 1837  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1838  2              }
 1839  1      }
 1840         
 1841         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data3(DescMsgContext* pMsgContext)
 1842         {       
 1843  1              if (3 == pMsgContext->reqDataLen)
 1844  1              {
 1845  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1846  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1847  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1848  2      
 1849  2                      Std_DataCopy(current_To_pressure, &pMsgContext->resData[3], sizeof(current_To_pressure));       
 1850  2                      pMsgContext->resDataLen = 3u + sizeof(current_To_pressure);
 1851  2                              
 1852  2                      CanTx_descResMsgSendEnable();
 1853  2              }
 1854  1              else
 1855  1              {
 1856  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1857  2              }
 1858  1      }
 1859         
 1860         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data4(DescMsgContext* pMsgContext)
 1861         {       
 1862  1              if (3 == pMsgContext->reqDataLen)
 1863  1              {
 1864  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1865  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1866  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1867  2      
 1868  2                      Std_DataCopy(pressure_To_current, &pMsgContext->resData[3], sizeof(pressure_To_current));
 1869  2                      pMsgContext->resDataLen = 3u + sizeof(pressure_To_current);
 1870  2                              
 1871  2                      CanTx_descResMsgSendEnable();
 1872  2              }
 1873  1              else
 1874  1              {
 1875  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1876  2              }
 1877  1      }
 1878         
 1879         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data5(DescMsgContext* pMsgContext)
 1880         {       
 1881  1              if (3 == pMsgContext->reqDataLen)
 1882  1              {
 1883  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1884  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1885  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1886  2      
 1887  2                      Std_DataCopy(pedal_To_cylinder, &pMsgContext->resData[3], sizeof(pedal_To_cylinder));
 1888  2                      pMsgContext->resDataLen = 3u + sizeof(pedal_To_cylinder);
 1889  2                              
 1890  2                      CanTx_descResMsgSendEnable();
 1891  2              }
 1892  1              else
 1893  1              {
 1894  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1895  2              }
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 32  

 1896  1      }
 1897         
 1898         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data6(DescMsgContext* pMsgContext)
 1899         {       
 1900  1              if (3 == pMsgContext->reqDataLen)
 1901  1              {
 1902  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1903  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1904  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1905  2      
 1906  2                      Std_DataCopy(cylinder_To_current, &pMsgContext->resData[3], sizeof(cylinder_To_current));
 1907  2                      pMsgContext->resDataLen = 3u + sizeof(cylinder_To_current);
 1908  2                              
 1909  2                      CanTx_descResMsgSendEnable();
 1910  2              }
 1911  1              else
 1912  1              {
 1913  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1914  2              }
 1915  1      }
 1916         
 1917         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data7(DescMsgContext* pMsgContext)
 1918         {       
 1919  1              if (3 == pMsgContext->reqDataLen)
 1920  1              {
 1921  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1922  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1923  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1924  2      
 1925  2                      Std_DataCopy(current_To_pwm, &pMsgContext->resData[3], sizeof(current_To_pwm));
 1926  2                      pMsgContext->resDataLen = 3u + sizeof(current_To_pwm);
 1927  2                              
 1928  2                      CanTx_descResMsgSendEnable();
 1929  2              }
 1930  1              else
 1931  1              {
 1932  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1933  2              }
 1934  1      }
 1935         
 1936         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data8(DescMsgContext* pMsgContext)
 1937         {       
 1938  1              if (3 == pMsgContext->reqDataLen)
 1939  1              {
 1940  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1941  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1942  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1943  2      
 1944  2                      Std_DataCopy(pedal_To_current, &pMsgContext->resData[3], sizeof(pedal_To_current));
 1945  2                      pMsgContext->resDataLen = 3u + sizeof(pedal_To_current);
 1946  2                              
 1947  2                      CanTx_descResMsgSendEnable();
 1948  2              }
 1949  1              else
 1950  1              {
 1951  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1952  2              }
 1953  1      }
 1954         
 1955         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data9(DescMsgContext* pMsgContext)
 1956         {       
 1957  1              if (3 == pMsgContext->reqDataLen)
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 33  

 1958  1              {
 1959  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1960  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1961  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1962  2                      
 1963  2                      
 1964  2                      //Position loop PID, KP, KI, KD term parameters
 1965  2                      pMsgContext->resData[3] = (INT8U)(gRTE_locationKp >> 8);
 1966  2                      pMsgContext->resData[4] = (INT8U)(gRTE_locationKp);
 1967  2                      pMsgContext->resData[5] = (INT8U)(gRTE_locationKi >> 8);
 1968  2                      pMsgContext->resData[6] = (INT8U)(gRTE_locationKi);
 1969  2                      pMsgContext->resData[7] = (INT8U)(gRTE_locationKd >> 8);
 1970  2                      pMsgContext->resData[8] = (INT8U)(gRTE_locationKd);
 1971  2      
 1972  2                      //Current loop PID, KP, KI, KD term parameters
 1973  2                      pMsgContext->resData[9] = (INT8U)(gRTE_currentKp >> 8);
 1974  2                      pMsgContext->resData[10] = (INT8U)(gRTE_currentKp);
 1975  2                      pMsgContext->resData[11] = (INT8U)(gRTE_currentKi >> 8);
 1976  2                      pMsgContext->resData[12] = (INT8U)(gRTE_currentKi);
 1977  2                      pMsgContext->resData[13] = (INT8U)(gRTE_currentKd >> 8);
 1978  2                      pMsgContext->resData[14] = (INT8U)(gRTE_currentKd);
 1979  2      
 1980  2                      //only position loop PID, KP, KI, KD term parameters
 1981  2                      pMsgContext->resData[15] = (INT8U)(gRTE_onlyPositionKp >> 8);
 1982  2                      pMsgContext->resData[16] = (INT8U)(gRTE_onlyPositionKp);
 1983  2                      pMsgContext->resData[17] = (INT8U)(gRTE_onlyPositionKi >> 8);
 1984  2                      pMsgContext->resData[18] = (INT8U)(gRTE_onlyPositionKi);
 1985  2                      pMsgContext->resData[19] = (INT8U)(gRTE_onlyPositionKd >> 8);
 1986  2                      pMsgContext->resData[20] = (INT8U)(gRTE_onlyPositionKd);
 1987  2      
 1988  2                      //pressure loop PID, KP, KI, KD term parameters
 1989  2                      pMsgContext->resData[21] = (INT8U)(gRTE_pressureKp >> 8);
 1990  2                      pMsgContext->resData[22] = (INT8U)(gRTE_pressureKp);
 1991  2                      pMsgContext->resData[23] = (INT8U)(gRTE_pressureKi >> 8);
 1992  2                      pMsgContext->resData[24] = (INT8U)(gRTE_pressureKi);
 1993  2                      pMsgContext->resData[25] = (INT8U)(gRTE_pressureKd >> 8);
 1994  2                      pMsgContext->resData[26] = (INT8U)(gRTE_pressureKd);
 1995  2      
 1996  2                      pMsgContext->resDataLen = 3u + 24;
 1997  2                              
 1998  2                      CanTx_descResMsgSendEnable();
 1999  2              }
 2000  1              else
 2001  1              {
 2002  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 2003  2              }
 2004  1      }
 2005         
 2006         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data10(DescMsgContext* pMsgContext)
 2007         {       
 2008  1              if (3 == pMsgContext->reqDataLen)
 2009  1              {
 2010  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 2011  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 2012  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 2013  2                      
 2014  2                      pMsgContext->resData[3] = (INT8U)(gRTE_pwmProtectThreshold >> 8);
 2015  2                      pMsgContext->resData[4] = (INT8U)(gRTE_pwmProtectThreshold);
 2016  2                      pMsgContext->resData[5] = (INT8U)(gRTE_controlMaxCurrent >> 8);
 2017  2                      pMsgContext->resData[6] = (INT8U)(gRTE_controlMaxCurrent);
 2018  2                      pMsgContext->resData[7] = (INT8U)(gRTE_dampMinPressure >> 8);
 2019  2                      pMsgContext->resData[8] = (INT8U)(gRTE_dampMinPressure);
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 34  

 2020  2                      pMsgContext->resData[9] = (INT8U)(gRTE_dampMinCylinder >> 8);
 2021  2                      pMsgContext->resData[10] = (INT8U)(gRTE_dampMinCylinder);
 2022  2                      pMsgContext->resData[11] = (INT8U)(gRTE_dampMinCurrent >> 8);
 2023  2                      pMsgContext->resData[12] = (INT8U)(gRTE_dampMinCurrent);
 2024  2      
 2025  2                      pMsgContext->resDataLen = 3u + 10;
 2026  2                              
 2027  2                      CanTx_descResMsgSendEnable();
 2028  2              }
 2029  1              else
 2030  1              {
 2031  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 2032  2              }
 2033  1      }
 2034         
 2035         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_SettingParameter_Data11(DescMsgContext* pMsgContext)
 2036         {       
 2037  1              if (3 == pMsgContext->reqDataLen)
 2038  1              {
 2039  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 2040  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 2041  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 2042  2      
 2043  2                      pMsgContext->resData[3] = BrakeSysMode;
 2044  2                      pMsgContext->resData[4] = gRTE_pidTypeSts;
 2045  2                      pMsgContext->resData[5] = gRTE_wireControlPressureLoopFlag;
 2046  2                      pMsgContext->resData[6] = g_inBrakeSwValidSts;
 2047  2                      pMsgContext->resData[7] = g_inIGNSts;
 2048  2                      pMsgContext->resData[8] = g_inPreDriverErrorSts;
 2049  2                      pMsgContext->resData[9] = g_PedalPowerSts;
 2050  2                      pMsgContext->resData[10] = g_CylinderPowerSts;
 2051  2                      pMsgContext->resData[11] = g_MainRelaySts;
 2052  2                      pMsgContext->resData[12] = g_PredriverEnableSts;
 2053  2                      
 2054  2                      pMsgContext->resData[13] = (INT8U)(g_calibrationParaChangeMask);
 2055  2                      pMsgContext->resData[14] = (INT8U)(g_calibrationParaChangeMask >> 8);
 2056  2                      pMsgContext->resData[15] = (INT8U)(g_calibrationParaChangeMask >> 16);
 2057  2                      pMsgContext->resData[16] = (INT8U)(g_calibrationParaChangeMask >> 24);
 2058  2                      
 2059  2                      pMsgContext->resDataLen = 3u + 14;
 2060  2                              
 2061  2                      CanTx_descResMsgSendEnable();
 2062  2              }
 2063  1              else
 2064  1              {
 2065  2                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 2066  2              }
 2067  1      }
 2068         
 2069         
 2070         /*  ********************************************************************************
 2071          * Function name:ApplDescReadMemoryByAddress (Service request header:$23 $24 )
 2072          * Description: not available 
 2073          * Returns:  nothing
 2074          * Parameter(s):
 2075          *   - pMsgContext->reqData:
 2076          *       - Points to the first service request data byte.
 2077          *       - Access type: read
 2078          *   - pMsgContext->resData:
 2079          *       - Points to the first writeable byte for the service response data.
 2080          *       - Access type: read/write
 2081          *   - pMsgContext->reqDataLen:
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 35  

 2082          *       - Contains the count of the service request data bytes (Sid is excluded).
 2083          *       - Access type: read
 2084          *   - pMsgContext->resDataLen:
 2085          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2086          *       - Access type: read/write
 2087          *   - pMsgContext->msgAddInfo.reqType:
 2088          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2089          *       - Access type: read
 2090          *   - pMsgContext->msgAddInfo.resOnReq:
 2091          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2092          *       - Access type: read/write
 2093          *   - pMsgContext->msgAddInfo.suppPosRes:
 2094          *       - UDS only!If set no positive response will be sent on this request.
 2095          *       - Access type: read
 2096          * Particularitie(s) and limitation(s):
 2097          *   - The function "DescProcessingDone" must be called from now on (within this
 2098          * main-handler or later).
 2099          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2100          * but before calling "DescProcessingDone".
 2101          ********************************************************************************  */
 2102         DESC_SERVICE_STAT void ApplDescReadMemoryByAddress(DescMsgContext* pMsgContext)
 2103         {
 2104  1      #if (kDescEnableService23_ReadMemoryByAddress == 1)
 2105  1      
 2106  1              if (0x08 == pMsgContext->reqDataLen)
 2107  1              {
 2108  2                      if (0u == VCU_VehicleSpeed)
 2109  2                      {
 2110  3      #if 0 // polyspace test by gzz 2020.12.30
                                      if (1) // TODO: Check request out of range
                                      {
                                              /* Check address invalid, request memory size invalid 
                                               * and addressAndLengthFormatIdentifier invalid. */
                                      }
                                      else
                                      {
                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                             
                                      }
              #endif
 2121  3                      }
 2122  2                      else
 2123  2                      {
 2124  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);          
 2125  3                      }
 2126  2              }
 2127  1              else
 2128  1              {
 2129  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2130  2              }
 2131  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);     
              
                      DescProcessingDone();
              #endif
 2136  1      }
 2137         
 2138         /*  ********************************************************************************
 2139          * Function name:ApplDescOemGetLevel_1_RequestSeed (Service request header:$27 $01 )
 2140          * Description:Manages the security get seed function.
 2141          * Returns:  nothing
 2142          * Parameter(s):
 2143          *   - pMsgContext:
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 36  

 2144          *       - Contains all request properties.
 2145          *       - Access type: read/write
 2146          * Particularitie(s) and limitation(s): none
 2147          ********************************************************************************  */
 2148         DESC_SERVICE_STAT void ApplDescOemGetLevel_1_RequestSeed(DescMsgContext* pMsgContext)
 2149         {
 2150  1      #if (kDescEnableService27_Level1 == 1)
 2151  1      
 2152  1              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);     
 2153  1      
 2154  1              if (0x02 == pMsgContext->reqDataLen) 
 2155  1              {
 2156  2                      if (0u == VCU_VehicleSpeed)
 2157  2                      {
 2158  3                              /* When dalay timer active receive the request, send NRC */
 2159  3                              descSecurityRandSeedLevel1 = rand();
 2160  3      #if 0 // polyspace test by gzz 2020.12.30               
                                      if (1) // TODO:Delay timer arrive
                                      {
                                              pMsgContext->resDataLen = 6u;
                                              pMsgContext->reqData[2] = (INT8U)((descSecurityRandSeedLevel1 & 0xFF000000) >> 24u);
              
                                              pMsgContext->resData[3] = (INT8U)((descSecurityRandSeedLevel1 & 0x00FF0000) >> 16u);
                                              pMsgContext->resData[4] = (INT8U)((descSecurityRandSeedLevel1 & 0x0000FF00) >> 8u);
                                              pMsgContext->resData[5] = (INT8U)(descSecurityRandSeedLevel1 & 0x000000FF);
              
                                              descSecurityAccessRequestSeedLevelFlag_1 = TRUE;
                                              
                                              DescSetPosResponse(pMsgContext);
                                      }
                                      else
                                      {
                                              descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
              
                                              DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                           
                                      }
              #endif
 2181  3                      }
 2182  2                      else
 2183  2                      {
 2184  3                              descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
 2185  3      
 2186  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                          
 2187  3                      }
 2188  2              }
 2189  1              else
 2190  1              {
 2191  2                      descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
 2192  2      
 2193  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2194  2              }
 2195  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);     
              
                      DescProcessingDone();
              #endif
 2200  1      }
 2201         
 2202         /*  ********************************************************************************
 2203          * Function name:ApplDescOemSendLevel_1_SendKey (Service request header:$27 $02 )
 2204          * Description:Manages the security send key function.
 2205          * Returns:  nothing
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 37  

 2206          * Parameter(s):
 2207          *   - pMsgContext:
 2208          *       - Contains all request properties.
 2209          *       - Access type: read/write
 2210          * Particularitie(s) and limitation(s): none
 2211          ********************************************************************************  */
 2212         DESC_SERVICE_STAT void ApplDescOemSendLevel_1_SendKey(DescMsgContext* pMsgContext)
 2213         {
 2214  1      #if (kDescEnableService27_Level1 == 1)
 2215  1      
 2216  1              if (0x04 == pMsgContext->reqDataLen) 
 2217  1              {
 2218  2                      if (0u == VCU_VehicleSpeed)
 2219  2                      {
 2220  3      #if 0 // polyspace test by gzz 2020.12.30
                                      /* When dalay timer active receive the request, send NRC */
                                      if (1) // TODO:Delay timer arrive
                                      {
                                              if (TRUE == descSecurityAccessRequestSeedLevelFlag_1)
                                              {
                                                      descSendSecurityKeyLevel1 = seedToKey(descSecurityRandSeedLevel1, SecurityAccessMaskLevel_1);
              
                                                      pMsgContext->resDataLen = 6u;
                                                      pMsgContext->reqData[2] = (INT8U)((descSendSecurityKeyLevel1 & 0xFF000000) >> 24u);
                                                      
                                                      pMsgContext->resData[3] = (INT8U)((descSendSecurityKeyLevel1 & 0x00FF0000) >> 16u);
                                                      pMsgContext->resData[4] = (INT8U)((descSendSecurityKeyLevel1 & 0x0000FF00) >> 8u);
                                                      pMsgContext->resData[5] = (INT8U)(descSendSecurityKeyLevel1 & 0x000000FF);
                                                      
                                                      descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
                                                      
                                                      DescSetStateSecurityAccess(kDescStateSecurityAccessLevel_1);
                                                      
                                                      DescSetPosResponse(pMsgContext);                                
                                              }
                                              else
                                              {
                                                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
                                                      
                                                      DescSetNegResponse(pMsgContext, kDescNrcRequestSequenceError);                          
                                              }
                                      }
                                      else
                                      {
                                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
                                              
                                              DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                           
                                      }
              #endif
 2255  3                      }
 2256  2                      else
 2257  2                      {
 2258  3                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 2259  3      
 2260  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                          
 2261  3                      }
 2262  2              }
 2263  1              else
 2264  1              {
 2265  2                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 2266  2      
 2267  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 38  

 2268  2              }
 2269  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
              
                      DescProcessingDone();
              #endif
 2274  1      }
 2275         
 2276         /*  ********************************************************************************
 2277          * Function name:ApplDescOemGetLevel_2_RequestSeed (Service request header:$27 $09 )
 2278          * Description:Manages the security get seed function.
 2279          * Returns:  nothing
 2280          * Parameter(s):
 2281          *   - pMsgContext:
 2282          *       - Contains all request properties.
 2283          *       - Access type: read/write
 2284          * Particularitie(s) and limitation(s): none
 2285          ********************************************************************************  */
 2286         DESC_SERVICE_STAT void ApplDescOemGetLevel_2_RequestSeed(DescMsgContext* pMsgContext)
 2287         {
 2288  1      #if (kDescEnableService27_Level2 == 1)
 2289  1      
 2290  1              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 2291  1      
 2292  1              if (0x02 == pMsgContext->reqDataLen) 
 2293  1              {
 2294  2                      if (0u == VCU_VehicleSpeed)
 2295  2                      {
 2296  3                              /* When dalay timer active receive the request, send NRC */
 2297  3                              descSecurityRandSeedLevel2 = rand();
 2298  3      #if 0 // polyspace test by gzz 2020.12.30                       
                                      if (1) // TODO:Delay timer arrive
                                      {
                                              pMsgContext->resDataLen = 6u;
                                              pMsgContext->reqData[2] = (INT8U)((descSecurityRandSeedLevel2 & 0xFF000000) >> 24u);
              
                                              pMsgContext->resData[3] = (INT8U)((descSecurityRandSeedLevel2 & 0x00FF0000) >> 16u);
                                              pMsgContext->resData[4] = (INT8U)((descSecurityRandSeedLevel2 & 0x0000FF00) >> 8u);
                                              pMsgContext->resData[5] = (INT8U)(descSecurityRandSeedLevel2 & 0x000000FF);
              
                                              descSecurityAccessRequestSeedLevelFlag_2 = TRUE;
                                              
                                              DescSetPosResponse(pMsgContext);
                                      }
                                      else
                                      {
                                              descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
              
                                              DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                                   
                                      }
              #endif
 2319  3                      }
 2320  2                      else
 2321  2                      {
 2322  3                              descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
 2323  3      
 2324  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
 2325  3                      }
 2326  2              }
 2327  1              else
 2328  1              {
 2329  2                      descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 39  

 2330  2      
 2331  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2332  2              }
 2333  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
              
                      DescProcessingDone();
              #endif
 2338  1      }
 2339         
 2340         /*  ********************************************************************************
 2341          * Function name:ApplDescOemSendLevel_2_SendKey (Service request header:$27 $0A )
 2342          * Description:Manages the security send key function.
 2343          * Returns:  nothing
 2344          * Parameter(s):
 2345          *   - pMsgContext:
 2346          *       - Contains all request properties.
 2347          *       - Access type: read/write
 2348          * Particularitie(s) and limitation(s): none
 2349          ********************************************************************************  */
 2350         DESC_SERVICE_STAT void ApplDescOemSendLevel_2_SendKey(DescMsgContext* pMsgContext)
 2351         {
 2352  1      #if (kDescEnableService27_Level2 == 1)
 2353  1      
 2354  1              if (0x04 == pMsgContext->reqDataLen) 
 2355  1              {
 2356  2                      if (0u == VCU_VehicleSpeed)
 2357  2                      {
 2358  3                              /* When dalay timer active receive the request, send NRC */
 2359  3      #if 0 // polyspace test by gzz 2020.12.30                       
                                      if (1) // TODO:Delay timer arrive
                                      {
                                              if (TRUE == descSecurityAccessRequestSeedLevelFlag_2)
                                              {
                                                      descSendSecurityKeyLevel2 = seedToKey(descSecurityRandSeedLevel2, SecurityAccessMaskLevel_2);
              
                                                      pMsgContext->resDataLen = 6u;
                                                      pMsgContext->reqData[2] = (INT8U)((descSendSecurityKeyLevel2 & 0xFF000000) >> 24u);
                                                      
                                                      pMsgContext->resData[3] = (INT8U)((descSendSecurityKeyLevel2 & 0x00FF0000) >> 16u);
                                                      pMsgContext->resData[4] = (INT8U)((descSendSecurityKeyLevel2 & 0x0000FF00) >> 8u);
                                                      pMsgContext->resData[5] = (INT8U)(descSendSecurityKeyLevel2 & 0x000000FF);
                                                      
                                                      descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
                                                      
                                                      DescSetStateSecurityAccess(kDescStateSecurityAccessLevel_1);
                                                      
                                                      DescSetPosResponse(pMsgContext);                                
                                              }
                                              else
                                              {
                                                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
              
                                                      DescSetNegResponse(pMsgContext, kDescNrcRequestSequenceError);                                  
                                              }
              
                                      }
                                      else
                                      {
                                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
                      
                                              DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                           
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 40  

                                      }
              #endif
 2394  3                      }
 2395  2                      else
 2396  2                      {
 2397  3                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 2398  3      
 2399  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
 2400  3                      }
 2401  2              }
 2402  1              else
 2403  1              {
 2404  2                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 2405  2      
 2406  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2407  2              }
 2408  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
              
              #endif
 2412  1      }
 2413         
 2414         /*  ********************************************************************************
 2415          * Function name:ApplDescOemCommCtrlEnableRxEnableTx (Service request header:$28 $00 )
 2416          * Description: not available 
 2417          * Returns:  nothing
 2418          * Parameter(s):
 2419          *   - pMsgContext:
 2420          *       - Contains all request properties.
 2421          *       - Access type: read/write
 2422          * Particularitie(s) and limitation(s): none
 2423          ********************************************************************************  */
 2424         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxEnableTx(DescMsgContext* pMsgContext)
 2425         {
 2426  1      #if (kDescEnableService28_RxTxAllCtrl == 1)
 2427  1      
 2428  1              if (3u == pMsgContext->reqDataLen) 
 2429  1              {
 2430  2                      if (0u == VCU_VehicleSpeed)
 2431  2                      {
 2432  3                              switch (pMsgContext->reqData[2])
 2433  3                              {
 2434  4                                      case 0x01:
 2435  4                                              // normal communication messages
 2436  4                                              descApplFrameRxEnable = TRUE;
 2437  4                                              descApplFrameTxEnable = TRUE;
 2438  4      
 2439  4                                              pMsgContext->resDataLen = 3u;
 2440  4                                              DescSetPosResponse(pMsgContext);
 2441  4                                              break;
 2442  4      
 2443  4                                      case 0x02:
 2444  4                                              // network management communication messages
 2445  4                                              descNmFrameRxEnable = TRUE;
 2446  4                                              descNmFrameTxEnable = TRUE;
 2447  4      
 2448  4                                              pMsgContext->resDataLen = 3u;                                   
 2449  4                                              DescSetPosResponse(pMsgContext);                                
 2450  4                                              break;
 2451  4      
 2452  4                                      case 0x03:
 2453  4                                              // network management communication messages and normal communication messages
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 41  

 2454  4                                              descNmFrameRxEnable = TRUE;
 2455  4                                              descNmFrameTxEnable = TRUE;
 2456  4      
 2457  4                                              descApplFrameRxEnable = TRUE;
 2458  4                                              descApplFrameTxEnable = TRUE;
 2459  4      
 2460  4                                              pMsgContext->resDataLen = 3u;
 2461  4                                              DescSetPosResponse(pMsgContext);                                
 2462  4                                              break;
 2463  4      
 2464  4                                      default:
 2465  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                     
 2466  4                                              break;
 2467  4                              }
 2468  3                      }
 2469  2                      else
 2470  2                      {
 2471  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 2472  3                      }
 2473  2              }
 2474  1              else
 2475  1              {
 2476  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2477  2              }
 2478  1      #else
                      DescProcessingDone();
              #endif
 2481  1      }
 2482         
 2483         /*  ********************************************************************************
 2484          * Function name:ApplDescOemCommCtrlEnableRxDisableTx (Service request header:$28 $01 )
 2485          * Description: not available 
 2486          * Returns:  nothing
 2487          * Parameter(s):
 2488          *   - pMsgContext:
 2489          *       - Contains all request properties.
 2490          *       - Access type: read/write
 2491          * Particularitie(s) and limitation(s): none
 2492          ********************************************************************************  */
 2493         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxDisableTx(DescMsgContext* pMsgContext)
 2494         {
 2495  1      #if (kDescEnableService28_RxTxDivideCtrl == 1)
 2496  1      
 2497  1              if (3u == pMsgContext->reqDataLen) 
 2498  1              {
 2499  2                      if (0u == VCU_VehicleSpeed)
 2500  2                      {
 2501  3                              switch (pMsgContext->reqData[2])
 2502  3                              {
 2503  4                                      case 0x01:
 2504  4                                              // normal communication messages
 2505  4                                              descApplFrameRxEnable = TRUE;
 2506  4                                              descApplFrameTxEnable = FALSE;
 2507  4      
 2508  4                                              pMsgContext->resDataLen = 3u;
 2509  4                                              DescSetPosResponse(pMsgContext);
 2510  4                                              break;
 2511  4      
 2512  4                                      case 0x02:
 2513  4                                              // network management communication messages
 2514  4                                              descNmFrameRxEnable = TRUE;
 2515  4                                              descNmFrameTxEnable = FALSE;                                    
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 42  

 2516  4      
 2517  4                                              pMsgContext->resDataLen = 3u;
 2518  4                                              DescSetPosResponse(pMsgContext);                                
 2519  4                                              break;
 2520  4      
 2521  4                                      case 0x03:
 2522  4                                              // network management communication messages and normal communication messages
 2523  4                                              descNmFrameRxEnable = TRUE;
 2524  4                                              descNmFrameTxEnable = FALSE;                                            
 2525  4                                              
 2526  4                                              descApplFrameRxEnable = TRUE;
 2527  4                                              descApplFrameTxEnable = FALSE;
 2528  4      
 2529  4                                              pMsgContext->resDataLen = 3u;                                   
 2530  4                                              DescSetPosResponse(pMsgContext);                                
 2531  4                                              break;
 2532  4      
 2533  4                                      default:
 2534  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                             
 2535  4                                              break;
 2536  4                              }
 2537  3                      }
 2538  2                      else
 2539  2                      {
 2540  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 2541  3                      }
 2542  2              }
 2543  1              else
 2544  1              {
 2545  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 2546  2              }
 2547  1      #else
                      DescProcessingDone();
              #endif
 2550  1      }
 2551         
 2552         /*  ********************************************************************************
 2553          * Function name:ApplDescOemCommCtrlDisableRxEnableTx (Service request header:$28 $02 )
 2554          * Description: not available 
 2555          * Returns:  nothing
 2556          * Parameter(s):
 2557          *   - pMsgContext:
 2558          *       - Contains all request properties.
 2559          *       - Access type: read/write
 2560          * Particularitie(s) and limitation(s): none
 2561          ********************************************************************************  */
 2562         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxEnableTx(DescMsgContext* pMsgContext)
 2563         {
 2564  1      #if (kDescEnableService28_RxTxDivideCtrl == 1)
 2565  1      
 2566  1              if (3u == pMsgContext->reqDataLen) 
 2567  1              {
 2568  2                      if (0u == VCU_VehicleSpeed)
 2569  2                      {
 2570  3                              switch (pMsgContext->reqData[2])
 2571  3                              {
 2572  4                                      case 0x01:
 2573  4                                              // normal communication messages
 2574  4                                              descApplFrameRxEnable = FALSE;
 2575  4                                              descApplFrameTxEnable = TRUE;
 2576  4      
 2577  4                                              pMsgContext->resDataLen = 3u;
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 43  

 2578  4                                              DescSetPosResponse(pMsgContext);                                        
 2579  4                                              break;
 2580  4      
 2581  4                                      case 0x02:
 2582  4                                              // network management communication messages
 2583  4                                              descNmFrameRxEnable = FALSE;
 2584  4                                              descNmFrameTxEnable = TRUE;
 2585  4      
 2586  4                                              pMsgContext->resDataLen = 3u;                                   
 2587  4                                              DescSetPosResponse(pMsgContext);                                
 2588  4                                              break;
 2589  4      
 2590  4                                      case 0x03:
 2591  4                                              // network management communication messages and normal communication messages
 2592  4                                              descNmFrameRxEnable = FALSE;
 2593  4                                              descNmFrameTxEnable = TRUE;                                     
 2594  4      
 2595  4                                              descApplFrameRxEnable = FALSE;
 2596  4                                              descApplFrameTxEnable = TRUE;
 2597  4      
 2598  4                                              pMsgContext->resDataLen = 3u;
 2599  4                                              DescSetPosResponse(pMsgContext);                                        
 2600  4                                              break;
 2601  4      
 2602  4                                      default:
 2603  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                     
 2604  4                                              break;
 2605  4                              }
 2606  3                      }
 2607  2                      else
 2608  2                      {
 2609  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 2610  3                      }
 2611  2              }
 2612  1              else
 2613  1              {
 2614  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2615  2              }
 2616  1      #else
                      DescProcessingDone();
              #endif
 2619  1      }
 2620         
 2621         /*  ********************************************************************************
 2622          * Function name:ApplDescOemCommCtrlDisableRxDisableTx (Service request header:$28 $03 )
 2623          * Description: not available 
 2624          * Returns:  nothing
 2625          * Parameter(s):
 2626          *   - pMsgContext:
 2627          *       - Contains all request properties.
 2628          *       - Access type: read/write
 2629          * Particularitie(s) and limitation(s): none
 2630          ********************************************************************************  */
 2631         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxDisableTx(DescMsgContext* pMsgContext)
 2632         {
 2633  1      #if (kDescEnableService28_RxTxAllCtrl == 1)
 2634  1      
 2635  1              if (3u == pMsgContext->reqDataLen) 
 2636  1              {
 2637  2                      if (0u == VCU_VehicleSpeed)
 2638  2                      {
 2639  3                              switch (pMsgContext->reqData[2])
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 44  

 2640  3                              {
 2641  4                                      case 0x01:
 2642  4                                              // normal communication messages
 2643  4                                              descApplFrameRxEnable = FALSE;
 2644  4                                              descApplFrameTxEnable = FALSE;
 2645  4      
 2646  4                                              pMsgContext->resDataLen = 3u;
 2647  4                                              DescSetPosResponse(pMsgContext);                                        
 2648  4                                              break;
 2649  4      
 2650  4                                      case 0x02:
 2651  4                                              // network management communication messages
 2652  4                                              descNmFrameRxEnable = FALSE;
 2653  4                                              descNmFrameTxEnable = FALSE;
 2654  4      
 2655  4                                              pMsgContext->resDataLen = 3u;                                   
 2656  4                                              DescSetPosResponse(pMsgContext);                                
 2657  4                                              break;
 2658  4      
 2659  4                                      case 0x03:
 2660  4                                              // network management communication messages and normal communication messages
 2661  4                                              descNmFrameRxEnable = FALSE;
 2662  4                                              descNmFrameTxEnable = FALSE;
 2663  4                                              
 2664  4                                              descApplFrameRxEnable = FALSE;
 2665  4                                              descApplFrameTxEnable = FALSE;
 2666  4      
 2667  4                                              pMsgContext->resDataLen = 3u;
 2668  4                                              DescSetPosResponse(pMsgContext);                                        
 2669  4                                              break;
 2670  4      
 2671  4                                      default:
 2672  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                             
 2673  4                                              break;
 2674  4                              }
 2675  3                      }
 2676  2                      else
 2677  2                      {
 2678  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 2679  3                      }
 2680  2              }
 2681  1              else
 2682  1              {
 2683  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2684  2              }
 2685  1      #else
                      DescProcessingDone();
              #endif
 2688  1      }
 2689         
 2690         /*  ********************************************************************************
 2691          * Function name:ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate (Service request header:$2A $01 )
 2692          * Description: not available 
 2693          * Returns:  nothing
 2694          * Parameter(s):
 2695          *   - pMsgContext:
 2696          *       - Contains all request properties.
 2697          *       - Access type: read/write
 2698          * Particularitie(s) and limitation(s): none
 2699          ********************************************************************************  */
 2700         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate(DescMsgContext* pMsgContext)
 2701         {
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 45  

 2702  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2703  1              /* Dummy example how to access the request data. */
 2704  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2705  1              DescClearResData(pMsgContext);
 2706  1              DescProcessingDone();   
 2707  1      }
 2708         
 2709         /*  ********************************************************************************
 2710          * Function name:ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate (Service request header:$2A $02 )
 2711          * Description: not available 
 2712          * Returns:  nothing
 2713          * Parameter(s):
 2714          *   - pMsgContext:
 2715          *       - Contains all request properties.
 2716          *       - Access type: read/write
 2717          * Particularitie(s) and limitation(s): none
 2718          ********************************************************************************  */
 2719         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate(DescMsgContext* pMsgContext)
 2720         {
 2721  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2722  1              /* Dummy example how to access the request data. */
 2723  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2724  1              DescClearResData(pMsgContext);
 2725  1              DescProcessingDone();   
 2726  1      }
 2727         
 2728         /*  ********************************************************************************
 2729          * Function name:ApplDesReadDataByPeriodicIndentifier_SendAtFastRate (Service request header:$2A $03 )
 2730          * Description: not available 
 2731          * Returns:  nothing
 2732          * Parameter(s):
 2733          *   - pMsgContext:
 2734          *       - Contains all request properties.
 2735          *       - Access type: read/write
 2736          * Particularitie(s) and limitation(s): none
 2737          ********************************************************************************  */
 2738         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtFastRate(DescMsgContext* pMsgContext)
 2739         {
 2740  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2741  1              /* Dummy example how to access the request data. */
 2742  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2743  1              DescClearResData(pMsgContext);
 2744  1              DescProcessingDone();
 2745  1      }
 2746         
 2747         /*  ********************************************************************************
 2748          * Function name:ApplDesReadDataByPeriodicIndentifier_StopSending (Service request header:$2A $04 )
 2749          * Description: not available 
 2750          * Returns:  nothing
 2751          * Parameter(s):
 2752          *   - pMsgContext:
 2753          *       - Contains all request properties.
 2754          *       - Access type: read/write
 2755          * Particularitie(s) and limitation(s): none
 2756          ********************************************************************************  */
 2757         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_StopSending(DescMsgContext* pMsgContext)
 2758         {
 2759  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2760  1              /* Dummy example how to access the request data. */
 2761  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2762  1              DescClearResData(pMsgContext);
 2763  1              DescProcessingDone();
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 46  

 2764  1      }
 2765         
 2766         /*  ********************************************************************************
 2767          * Function name:ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier (Service request header:$2C $0
             -1 )
 2768          * Description: not available 
 2769          * Returns:  nothing
 2770          * Parameter(s):
 2771          *   - pMsgContext:
 2772          *       - Contains all request properties.
 2773          *       - Access type: read/write
 2774          * Particularitie(s) and limitation(s): none
 2775          ********************************************************************************  */
 2776         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier(DescMsgContext* pMsgCont
             -ext)
 2777         {
 2778  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2779  1              /* Dummy example how to access the request data. */
 2780  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2781  1              DescClearResData(pMsgContext);
 2782  1              DescProcessingDone();           
 2783  1      }
 2784         
 2785         /*  ********************************************************************************
 2786          * Function name:ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier (Service req
             -uest header:$2C $03 )
 2787          * Description: not available 
 2788          * Returns:  nothing
 2789          * Parameter(s):
 2790          *   - pMsgContext:
 2791          *       - Contains all request properties.
 2792          *       - Access type: read/write
 2793          * Particularitie(s) and limitation(s): none
 2794          ********************************************************************************  */
 2795         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier(DescMs
             -gContext* pMsgContext)
 2796         {
 2797  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2798  1              /* Dummy example how to access the request data. */
 2799  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2800  1              DescClearResData(pMsgContext);
 2801  1              DescProcessingDone();           
 2802  1      }
 2803         
 2804         
 2805         /*  ********************************************************************************
 2806          * Function name:ApplDescWriteByDataIdentifier_ECU_SerialNumber (Service request header:$2E $F1 $8C )
 2807          * Description: not available 
 2808          * Returns:  nothing
 2809          * Parameter(s):
 2810          *   - pMsgContext->reqData:
 2811          *       - Points to the first service request data byte.
 2812          *       - Access type: read
 2813          *   - pMsgContext->resData:
 2814          *       - Points to the first writeable byte for the service response data.
 2815          *       - Access type: read/write
 2816          *   - pMsgContext->reqDataLen:
 2817          *       - Contains the count of the service request data bytes (Sid is excluded).
 2818          *       - Access type: read
 2819          *   - pMsgContext->resDataLen:
 2820          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2821          *       - Access type: read/write
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 47  

 2822          *   - pMsgContext->msgAddInfo.reqType:
 2823          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2824          *       - Access type: read
 2825          *   - pMsgContext->msgAddInfo.resOnReq:
 2826          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2827          *       - Access type: read/write
 2828          *   - pMsgContext->msgAddInfo.suppPosRes:
 2829          *       - UDS only!If set no positive response will be sent on this request.
 2830          *       - Access type: read
 2831          * Particularitie(s) and limitation(s):
 2832          *   - The function "DescProcessingDone" must be called from now on (within this
 2833          * main-handler or later).
 2834          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2835          * but before calling "DescProcessingDone".
 2836          ********************************************************************************  */
 2837         DESC_SERVICE_STAT void ApplDescWriteByDataIdentifier_ECU_SerialNumber(DescMsgContext* pMsgContext)
 2838         {
 2839  1              INT8U i = 0;
 2840  1              if (19u == pMsgContext->reqDataLen)
 2841  1              {
 2842  2                      if (0u == VCU_VehicleSpeed)
 2843  2                      {
 2844  3                              for(i = 0; i < ECU_SERIAL_NUM_LENGTH; i++)
 2845  3                              {
 2846  4                                      descDataIdentifier.systemSerialNumber[i] = pMsgContext->reqData[i + 3];
 2847  4                              }
 2848  3                              //descDataIdentifier.systemSerialNumber[16] = 0x01; //write flag
 2849  3      
 2850  3                              CopyString_v_g(descDataIdentifier.systemSerialNumber, ECU_SERIAL_NUM_ADDRESS, ECU_SERIAL_NUM_LENGTH, 1)
             -;
 2851  3                              
 2852  3                              pMsgContext->resDataLen = 0x03;
 2853  3                              DescSetPosResponse(pMsgContext);
 2854  3                      }
 2855  2                      else
 2856  2                      {
 2857  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 2858  3                      }
 2859  2              }
 2860  1              else
 2861  1              {
 2862  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 2863  2              }
 2864  1      }
 2865         
 2866         /*  ********************************************************************************
 2867          * Function name:ApplDescWriteByDataIdentifierOEM_VIN (Service request header:$2E $F1 $90 )
 2868          * Description: not available 
 2869          * Returns:  nothing
 2870          * Parameter(s):
 2871          *   - pMsgContext->reqData:
 2872          *       - Points to the first service request data byte.
 2873          *       - Access type: read
 2874          *   - pMsgContext->resData:
 2875          *       - Points to the first writeable byte for the service response data.
 2876          *       - Access type: read/write
 2877          *   - pMsgContext->reqDataLen:
 2878          *       - Contains the count of the service request data bytes (Sid is excluded).
 2879          *       - Access type: read
 2880          *   - pMsgContext->resDataLen:
 2881          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2882          *       - Access type: read/write
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 48  

 2883          *   - pMsgContext->msgAddInfo.reqType:
 2884          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2885          *       - Access type: read
 2886          *   - pMsgContext->msgAddInfo.resOnReq:
 2887          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2888          *       - Access type: read/write
 2889          *   - pMsgContext->msgAddInfo.suppPosRes:
 2890          *       - UDS only!If set no positive response will be sent on this request.
 2891          *       - Access type: read
 2892          * Particularitie(s) and limitation(s):
 2893          *   - The function "DescProcessingDone" must be called from now on (within this
 2894          * main-handler or later).
 2895          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2896          * but before calling "DescProcessingDone".
 2897          ********************************************************************************  */
 2898         DESC_SERVICE_STAT void ApplDescWriteByDataIdentifierOEM_VIN(DescMsgContext* pMsgContext)
 2899         {
 2900  1              INT8U i = 0;
 2901  1              if (20u == pMsgContext->reqDataLen)
 2902  1              {
 2903  2                      if (0u == VCU_VehicleSpeed)
 2904  2                      {
 2905  3                              for(i = 0; i < 17; i++)
 2906  3                              {
 2907  4                                      descDataIdentifier.OEM_VIN[i] = pMsgContext->reqData[i + 3];
 2908  4                              }
 2909  3                              descDataIdentifier.OEM_VIN[17] = 0x01; //write flag
 2910  3      
 2911  3                              CopyString_v_g(descDataIdentifier.OEM_VIN, VIN_VALUE_ADDRESS, VIN_VALUE_LENGTH, 1);
 2912  3                              
 2913  3                              pMsgContext->resDataLen = 0x03;
 2914  3                              DescSetPosResponse(pMsgContext);
 2915  3                      }
 2916  2                      else
 2917  2                      {
 2918  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 2919  3                      }
 2920  2              }
 2921  1              else
 2922  1              {
 2923  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 2924  2              }
 2925  1      }
 2926         
 2927         
 2928         /*  ********************************************************************************
 2929          * Function name:ApplDescWriteEepromDataById_6668 (Service request header:$2E $66 $68 )
 2930          * Description: not available 
 2931          * Returns:  nothing
 2932          * Parameter(s):
 2933          *   - pMsgContext->reqData:
 2934          *       - Points to the first service request data byte.
 2935          *       - Access type: read
 2936          *   - pMsgContext->resData:
 2937          *       - Points to the first writeable byte for the service response data.
 2938          *       - Access type: read/write
 2939          *   - pMsgContext->reqDataLen:
 2940          *       - Contains the count of the service request data bytes (Sid is excluded).
 2941          *       - Access type: read
 2942          *   - pMsgContext->resDataLen:
 2943          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2944          *       - Access type: read/write
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 49  

 2945          *   - pMsgContext->msgAddInfo.reqType:
 2946          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2947          *       - Access type: read
 2948          *   - pMsgContext->msgAddInfo.resOnReq:
 2949          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2950          *       - Access type: read/write
 2951          *   - pMsgContext->msgAddInfo.suppPosRes:
 2952          *       - UDS only!If set no positive response will be sent on this request.
 2953          *       - Access type: read
 2954          * Particularitie(s) and limitation(s):
 2955          *   - The function "DescProcessingDone" must be called from now on (within this
 2956          * main-handler or later).
 2957          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2958          * but before calling "DescProcessingDone".
 2959          ********************************************************************************  */
 2960         DESC_SERVICE_STAT void ApplDescWriteEepromDataById_6668(DescMsgContext* pMsgContext)
 2961         {
 2962  1              INT8U i = 0;
 2963  1              INT32U writeDataAddress = 0;
 2964  1              INT16U writeDataLength = 0;
 2965  1              INT8U writeDataBuffer[50] = 0;
 2966  1              
 2967  1              if (7u == pMsgContext->reqDataLen)
 2968  1              {
 2969  2                      writeDataAddress = (INT32U)0xC40000 | ((INT32U)pMsgContext->reqData[3]) << 8 | (INT32U)pMsgContext->reqD
             -ata[4];
 2970  2                      writeDataLength = pMsgContext->reqData[5];
 2971  2                      for(i = 0; i < sizeof(writeDataBuffer); i++)
 2972  2                      {
 2973  3                              writeDataBuffer[i] = pMsgContext->reqData[6];
 2974  3                      }
 2975  2      
 2976  2                      CopyString_v_g(writeDataBuffer, writeDataAddress, writeDataLength, 1);
 2977  2                      pMsgContext->resDataLen = 3u;
 2978  2                      DescSetPosResponse(pMsgContext);
 2979  2              }
 2980  1              else
 2981  1              {
 2982  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 2983  2              }
 2984  1      }
 2985         
 2986         
 2987         DESC_SERVICE_STAT void ApplDescWritePedalCylinderDataById_2201(DescMsgContext* pMsgContext)
 2988         {
 2989  1              if (19u == pMsgContext->reqDataLen)
 2990  1              {
 2991  2                      gRTE_pedalInitValue[0] = ((INT16U)pMsgContext->reqData[3]) << 8 | (INT16U)pMsgContext->reqData[4];
 2992  2                      gRTE_pedalInitValue[1] = ((INT16U)pMsgContext->reqData[5]) << 8 | (INT16U)pMsgContext->reqData[6];
 2993  2                      gRTE_cylinderInitValue[0] = ((INT16U)pMsgContext->reqData[11]) << 8 | (INT16U)pMsgContext->reqData[12];
 2994  2                      gRTE_cylinderInitValue[1] = ((INT16U)pMsgContext->reqData[13]) << 8 | (INT16U)pMsgContext->reqData[14];
 2995  2      
 2996  2                      pMsgContext->resDataLen = 3u;
 2997  2                      DescSetPosResponse(pMsgContext);
 2998  2              }
 2999  1              else
 3000  1              {
 3001  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 3002  2              }
 3003  1      }
 3004         
 3005         DESC_SERVICE_STAT void ApplDescWriteLongTimeBrakeTimesDataById_2202(DescMsgContext* pMsgContext)
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 50  

 3006         {
 3007  1              if (7u == pMsgContext->reqDataLen)
 3008  1              {
 3009  2                      g_longTimeBrakeCnt = (pMsgContext->reqData[3] << 24)
 3010  2                                                              || (pMsgContext->reqData[4] << 16)
 3011  2                                                              || (pMsgContext->reqData[5] << 8)
 3012  2                                                              ||  pMsgContext->reqData[6] ;
 3013  2                      CopyString_v_g(&g_longTimeBrakeCnt, LONG_TIME_BRAKE_ADDRESS, LONG_TIME_BRAKE_LENGTH, 1);
 3014  2                      
 3015  2                      pMsgContext->resDataLen = 3u;
 3016  2                      DescSetPosResponse(pMsgContext);
 3017  2              }
 3018  1              else
 3019  1              {
 3020  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 3021  2              }
 3022  1      }
 3023         
 3024         
 3025         
 3026         DESC_SERVICE_STAT void ApplDescWritePvTestFlagById_2E02(DescMsgContext* pMsgContext)
 3027         {
 3028  1              if (4u == pMsgContext->reqDataLen)
 3029  1              {
 3030  2                      if(0x01 == pMsgContext->reqData[3])
 3031  2                      {
 3032  3                              g_pvTestFlag = TRUE;
 3033  3                      }
 3034  2                      else
 3035  2                      {
 3036  3                              g_pvTestFlag = FALSE;
 3037  3                      }       
 3038  2                      
 3039  2                      pMsgContext->resDataLen = 3u;
 3040  2                      DescSetPosResponse(pMsgContext);
 3041  2              }
 3042  1              else
 3043  1              {
 3044  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 3045  2              }
 3046  1      }
 3047         
 3048         DESC_SERVICE_STAT void ApplDescWriteClearCalibrationDataById_2203(DescMsgContext* pMsgContext)
 3049         {
 3050  1              INT8U tempBuffer[230] = {0};
 3051  1              
 3052  1              if (5u == pMsgContext->reqDataLen)
 3053  1              {
 3054  2                      if((0x55 == pMsgContext->reqData[3]) && (0xCC == pMsgContext->reqData[4]))
 3055  2                      {
 3056  3                              
 3057  3                              //clear PID para
 3058  3                              CopyString_v_g(tempBuffer, LOCATION_LOOP_KP_ADDRESS, 48, 1); //12 * 4
 3059  3                              
 3060  3                              //clear booster para
 3061  3                              CopyString_v_g(tempBuffer, PEDAL_TO_CYLINDER_ADDRESS, 224, 1); //14 * 16
 3062  3                              
 3063  3                              //clear wireControl para
 3064  3                              CopyString_v_g(tempBuffer, PRESSURE_TO_CYLINDER_ADDRESS, 192, 1); //12 * 16
 3065  3                              
 3066  3                              //clear protect para
 3067  3                              CopyString_v_g(tempBuffer, PWM_PROTECT_FAULT_VALUE_ADDRESS, 20, 1);
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 51  

 3068  3                              
 3069  3                              //reset
 3070  3                              ser11_reset = TRUE;
 3071  3                              
 3072  3                              pMsgContext->resDataLen = 3u;
 3073  3                              DescSetPosResponse(pMsgContext);
 3074  3                      }
 3075  2                      else
 3076  2                      {
 3077  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 3078  3                      }       
 3079  2              }
 3080  1              else
 3081  1              {
 3082  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 3083  2              }
 3084  1      }
 3085         
 3086         
 3087         /*  ********************************************************************************
 3088          * Function name:ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity (Service request header:$31 
             -$01 $F0 $01 )
 3089          * Description: not available 
 3090          * Returns:  nothing
 3091          * Parameter(s):
 3092          *   - pMsgContext->reqData:
 3093          *       - Points to the first service request data byte.
 3094          *       - Access type: read
 3095          *   - pMsgContext->resData:
 3096          *       - Points to the first writeable byte for the service response data.
 3097          *       - Access type: read/write
 3098          *   - pMsgContext->reqDataLen:
 3099          *       - Contains the count of the service request data bytes (Sid is excluded).
 3100          *       - Access type: read
 3101          *   - pMsgContext->resDataLen:
 3102          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 3103          *       - Access type: read/write
 3104          *   - pMsgContext->msgAddInfo.reqType:
 3105          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3106          *       - Access type: read
 3107          *   - pMsgContext->msgAddInfo.resOnReq:
 3108          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3109          *       - Access type: read/write
 3110          *   - pMsgContext->msgAddInfo.suppPosRes:
 3111          *       - UDS only!If set no positive response will be sent on this request.
 3112          *       - Access type: read
 3113          * Particularitie(s) and limitation(s):
 3114          *   - The function "DescProcessingDone" must be called from now on (within this
 3115          * main-handler or later).
 3116          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3117          * but before calling "DescProcessingDone".
 3118          ********************************************************************************  */
 3119         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity(DescMsgContext* pMsgCo
             -ntext)
 3120         {
 3121  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3122  1              /* Dummy example how to access the request data. */
 3123  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */ 
 3124  1      
 3125  1              /* Function implementation in bootloader */
 3126  1              DescClearResData(pMsgContext);
 3127  1              DescProcessingDone();
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 52  

 3128  1      }
 3129         
 3130         /*  ********************************************************************************
 3131          * Function name:ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition (Service request header:$
             -31 $01 $FF $02 )
 3132          * Description: not available 
 3133          * Returns:  nothing
 3134          * Parameter(s):
 3135          *   - pMsgContext->reqData:
 3136          *       - Points to the first service request data byte.
 3137          *       - Access type: read
 3138          *   - pMsgContext->resData:
 3139          *       - Points to the first writeable byte for the service response data.
 3140          *       - Access type: read/write
 3141          *   - pMsgContext->reqDataLen:
 3142          *       - Contains the count of the service request data bytes (Sid is excluded).
 3143          *       - Access type: read
 3144          *   - pMsgContext->resDataLen:
 3145          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 3146          *       - Access type: read/write
 3147          *   - pMsgContext->msgAddInfo.reqType:
 3148          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3149          *       - Access type: read
 3150          *   - pMsgContext->msgAddInfo.resOnReq:
 3151          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3152          *       - Access type: read/write
 3153          *   - pMsgContext->msgAddInfo.suppPosRes:
 3154          *       - UDS only!If set no positive response will be sent on this request.
 3155          *       - Access type: read
 3156          * Particularitie(s) and limitation(s):
 3157          *   - The function "DescProcessingDone" must be called from now on (within this
 3158          * main-handler or later).
 3159          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3160          * but before calling "DescProcessingDone".
 3161          ********************************************************************************  */
 3162         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition(DescMsgContext* pMs
             -gContext)
 3163         {
 3164  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3165  1              /* Dummy example how to access the request data. */
 3166  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */ 
 3167  1              DescClearResData(pMsgContext);
 3168  1      
 3169  1              /* Check programming condition, if programming condition is OK,
 3170  1               * the routine status record is correctResult(0x00), else
 3171  1               * is incorrectResult(0x01). */
 3172  1              if (0u == VCU_VehicleSpeed)
 3173  1              {
 3174  2                      pMsgContext->resData[4] = 0x00;
 3175  2              }
 3176  1              else
 3177  1              {
 3178  2                      pMsgContext->resData[4] = 0x01;
 3179  2              }
 3180  1      
 3181  1              pMsgContext->resData[3] = pMsgContext->reqData[3];
 3182  1              
 3183  1              pMsgContext->resDataLen = 0x05;
 3184  1              DescSetPosResponse(pMsgContext);
 3185  1      }
 3186         
 3187         /*  ********************************************************************************
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 53  

 3188          * Function name:ApplDescRoutineControlByIdentifier_EraseMemory (Service request header:$31 $01 $FF $00 )
 3189          * Description: not available 
 3190          * Returns:  nothing
 3191          * Parameter(s):
 3192          *   - pMsgContext->reqData:
 3193          *       - Points to the first service request data byte.
 3194          *       - Access type: read
 3195          *   - pMsgContext->resData:
 3196          *       - Points to the first writeable byte for the service response data.
 3197          *       - Access type: read/write
 3198          *   - pMsgContext->reqDataLen:
 3199          *       - Contains the count of the service request data bytes (Sid is excluded).
 3200          *       - Access type: read
 3201          *   - pMsgContext->resDataLen:
 3202          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 3203          *       - Access type: read/write
 3204          *   - pMsgContext->msgAddInfo.reqType:
 3205          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3206          *       - Access type: read
 3207          *   - pMsgContext->msgAddInfo.resOnReq:
 3208          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3209          *       - Access type: read/write
 3210          *   - pMsgContext->msgAddInfo.suppPosRes:
 3211          *       - UDS only!If set no positive response will be sent on this request.
 3212          *       - Access type: read
 3213          * Particularitie(s) and limitation(s):
 3214          *   - The function "DescProcessingDone" must be called from now on (within this
 3215          * main-handler or later).
 3216          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3217          * but before calling "DescProcessingDone".
 3218          ********************************************************************************  */
 3219         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_EraseMemory(DescMsgContext* pMsgContext)
 3220         {
 3221  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3222  1              /* Dummy example how to access the request data. */
 3223  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 3224  1      
 3225  1              /* Function implementation in bootloader */
 3226  1              DescClearResData(pMsgContext);
 3227  1              DescProcessingDone();
 3228  1      }
 3229         
 3230         /*  ********************************************************************************
 3231          * Function name:ApplDescRoutineControlByIdentifier_CheckProgrammingDependency (Service request header:$31
             - $01 $FF $01 )
 3232          * Description: not available 
 3233          * Returns:  nothing
 3234          * Parameter(s):
 3235          *   - pMsgContext->reqData:
 3236          *       - Points to the first service request data byte.
 3237          *       - Access type: read
 3238          *   - pMsgContext->resData:
 3239          *       - Points to the first writeable byte for the service response data.
 3240          *       - Access type: read/write
 3241          *   - pMsgContext->reqDataLen:
 3242          *       - Contains the count of the service request data bytes (Sid is excluded).
 3243          *       - Access type: read
 3244          *   - pMsgContext->resDataLen:
 3245          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 3246          *       - Access type: read/write
 3247          *   - pMsgContext->msgAddInfo.reqType:
 3248          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 54  

 3249          *       - Access type: read
 3250          *   - pMsgContext->msgAddInfo.resOnReq:
 3251          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3252          *       - Access type: read/write
 3253          *   - pMsgContext->msgAddInfo.suppPosRes:
 3254          *       - UDS only!If set no positive response will be sent on this request.
 3255          *       - Access type: read
 3256          * Particularitie(s) and limitation(s):
 3257          *   - The function "DescProcessingDone" must be called from now on (within this
 3258          * main-handler or later).
 3259          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3260          * but before calling "DescProcessingDone".
 3261          ********************************************************************************  */
 3262         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingDependency(DescMsgContext* pMsgC
             -ontext)
 3263         {
 3264  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3265  1              /* Dummy example how to access the request data. */
 3266  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 3267  1      
 3268  1              /* Function implementation in bootloader */
 3269  1              DescClearResData(pMsgContext);
 3270  1              DescProcessingDone();
 3271  1      }
 3272         
 3273         /*  ********************************************************************************
 3274          * Function name:ApplDescRequestDownload (Service request header:$34 )
 3275          * Description: not available 
 3276          * Returns:  nothing
 3277          * Parameter(s):
 3278          *   - pMsgContext->reqData:
 3279          *       - Points to the first service request byte after the Sid.
 3280          *       - Access type: read
 3281          *   - pMsgContext->resData:
 3282          *       - Points to the first writeable byte for the service response after the Sid.
 3283          *       - Access type: read/write
 3284          *   - pMsgContext->reqDataLen:
 3285          *       - Contains the service request length, excluding Sid byte only.
 3286          *       - Access type: read
 3287          *   - pMsgContext->resDataLen:
 3288          *       - Must be initialized with the total service response length, excluding the Sid only.
 3289          *       - Access type: read/write
 3290          *   - pMsgContext->msgAddInfo.reqType:
 3291          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3292          *       - Access type: read
 3293          *   - pMsgContext->msgAddInfo.resOnReq:
 3294          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3295          *       - Access type: read/write
 3296          *   - pMsgContext->msgAddInfo.suppPosRes:
 3297          *       - UDS only!If set no positive response will be sent on this request.
 3298          *       - Access type: read
 3299          * Particularitie(s) and limitation(s):
 3300          *   - The function "DescProcessingDone" must be called from now on (within this
 3301          * main-handler or later).
 3302          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3303          * but before calling "DescProcessingDone".
 3304          ********************************************************************************  */
 3305         DESC_SERVICE_STAT void ApplDescRequestDownload(DescMsgContext* pMsgContext)
 3306         {
 3307  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3308  1              /* Dummy example how to access the request data. */
 3309  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 55  

 3310  1              DescClearResData(pMsgContext);
 3311  1              DescProcessingDone();
 3312  1      }
 3313         
 3314         /*  ********************************************************************************
 3315          * Function name:ApplDescTransferData (Service request header:$36 )
 3316          * Description: not available 
 3317          * Returns:  nothing
 3318          * Parameter(s):
 3319          *   - pMsgContext->reqData:
 3320          *       - Points to the first service request byte after the Sid.
 3321          *       - Access type: read
 3322          *   - pMsgContext->resData:
 3323          *       - Points to the first writeable byte for the service response after the Sid.
 3324          *       - Access type: read/write
 3325          *   - pMsgContext->reqDataLen:
 3326          *       - Contains the service request length, excluding Sid byte only.
 3327          *       - Access type: read
 3328          *   - pMsgContext->resDataLen:
 3329          *       - Must be initialized with the total service response length, excluding the Sid only.
 3330          *       - Access type: read/write
 3331          *   - pMsgContext->msgAddInfo.reqType:
 3332          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3333          *       - Access type: read
 3334          *   - pMsgContext->msgAddInfo.resOnReq:
 3335          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3336          *       - Access type: read/write
 3337          *   - pMsgContext->msgAddInfo.suppPosRes:
 3338          *       - UDS only!If set no positive response will be sent on this request.
 3339          *       - Access type: read
 3340          * Particularitie(s) and limitation(s):
 3341          *   - The function "DescProcessingDone" must be called from now on (within this
 3342          * main-handler or later).
 3343          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3344          * but before calling "DescProcessingDone".
 3345          ********************************************************************************  */
 3346         DESC_SERVICE_STAT void ApplDescTransferData(DescMsgContext* pMsgContext)
 3347         {
 3348  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3349  1              /* Dummy example how to access the request data. */
 3350  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 3351  1              DescClearResData(pMsgContext);
 3352  1              DescProcessingDone();
 3353  1      }
 3354         
 3355         /*  ********************************************************************************
 3356          * Function name:ApplDescRequestTransferExit (Service request header:$37 )
 3357          * Description: not available 
 3358          * Returns:  nothing
 3359          * Parameter(s):
 3360          *   - pMsgContext->reqData:
 3361          *       - Points to the first service request byte after the Sid.
 3362          *       - Access type: read
 3363          *   - pMsgContext->resData:
 3364          *       - Points to the first writeable byte for the service response after the Sid.
 3365          *       - Access type: read/write
 3366          *   - pMsgContext->reqDataLen:
 3367          *       - Contains the service request length, excluding Sid byte only.
 3368          *       - Access type: read
 3369          *   - pMsgContext->resDataLen:
 3370          *       - Must be initialized with the total service response length, excluding the Sid only.
 3371          *       - Access type: read/write
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 56  

 3372          *   - pMsgContext->msgAddInfo.reqType:
 3373          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3374          *       - Access type: read
 3375          *   - pMsgContext->msgAddInfo.resOnReq:
 3376          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3377          *       - Access type: read/write
 3378          *   - pMsgContext->msgAddInfo.suppPosRes:
 3379          *       - UDS only!If set no positive response will be sent on this request.
 3380          *       - Access type: read
 3381          * Particularitie(s) and limitation(s):
 3382          *   - The function "DescProcessingDone" must be called from now on (within this
 3383          * main-handler or later).
 3384          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3385          * but before calling "DescProcessingDone".
 3386          ********************************************************************************  */
 3387         DESC_SERVICE_STAT void ApplDescRequestTransferExit(DescMsgContext* pMsgContext)
 3388         {
 3389  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3390  1              /* Dummy example how to access the request data. */
 3391  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 3392  1              DescClearResData(pMsgContext);
 3393  1              DescProcessingDone();
 3394  1      }
 3395         
 3396         /***********************************************************************
 3397         *  Name        : ApplDescWriteMemoryByAddress
 3398         *  Description : Service request header:$3D         
 3399         *  Parameter   : pMsgContext
 3400         *  Returns     : none 
 3401         ***********************************************************************/
 3402         DESC_SERVICE_STAT void ApplDescWriteMemoryByAddress(DescMsgContext* pMsgContext)
 3403         {
 3404  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 3405  1              /* Dummy example how to access the request data. */
 3406  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 3407  1              DescClearResData(pMsgContext);
 3408  1              DescProcessingDone();           
 3409  1      }
 3410         
 3411         /***********************************************************************
 3412         *  Name        : ApplDescOemProcessTesterPresent
 3413         *  Description : Service request header:$3E         
 3414         *  Parameter   : pMsgContext
 3415         *  Returns     : none 
 3416         ***********************************************************************/
 3417         DESC_SERVICE_STAT void ApplDescOemProcessTesterPresent(DescMsgContext* pMsgContext)
 3418         {
 3419  1              DescClearResData(pMsgContext);
 3420  1      
 3421  1              if (2u == pMsgContext->reqDataLen) 
 3422  1              {
 3423  2                      if (0x00 == pMsgContext->reqData[1])
 3424  2                      {
 3425  3                              descOemProcessTesterPresentFlag = TRUE;
 3426  3                              descOemProcessTesterPresentTimeoutCnt = 0u;
 3427  3      
 3428  3                              pMsgContext->resDataLen = 0x02;
 3429  3                              DescSetPosResponse(pMsgContext);
 3430  3                      }
 3431  2                      else if (0x80 == pMsgContext->reqData[1])
 3432  2                      {
 3433  3                              descOemProcessTesterPresentFlag = TRUE;
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 57  

 3434  3                              descOemProcessTesterPresentTimeoutCnt = 0u;
 3435  3      
 3436  3                              /* 0x80 not need to response */
 3437  3      
 3438  3                      }
 3439  2                      else
 3440  2                      {
 3441  3                              DescSetNegResponse(pMsgContext, kDescNrcSubfunctionNotSupported);                               
 3442  3                      }
 3443  2              }
 3444  1              else
 3445  1              {
 3446  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);                 
 3447  2              }
 3448  1      }
 3449         
 3450         /*  ********************************************************************************
 3451          * Function name:ApplDescControlDtcSettingEnable (Service request header:$85 $1 )
 3452          * Description: not available 
 3453          * Returns:  nothing
 3454          * Parameter(s):
 3455          *   - pMsgContext->reqData:
 3456          *       - Points to the first service request data byte.
 3457          *       - Access type: read
 3458          *   - pMsgContext->resData:
 3459          *       - Points to the first writeable byte for the service response data.
 3460          *       - Access type: read/write
 3461          *   - pMsgContext->reqDataLen:
 3462          *       - Contains the count of the service request data bytes (Sid is excluded).
 3463          *       - Access type: read
 3464          *   - pMsgContext->resDataLen:
 3465          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 3466          *       - Access type: read/write
 3467          *   - pMsgContext->msgAddInfo.reqType:
 3468          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3469          *       - Access type: read
 3470          *   - pMsgContext->msgAddInfo.resOnReq:
 3471          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3472          *       - Access type: read/write
 3473          *   - pMsgContext->msgAddInfo.suppPosRes:
 3474          *       - UDS only!If set no positive response will be sent on this request.
 3475          *       - Access type: read
 3476          * Particularitie(s) and limitation(s):
 3477          *   - The function "DescProcessingDone" must be called from now on (within this
 3478          * main-handler or later).
 3479          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3480          * but before calling "DescProcessingDone".
 3481          ********************************************************************************  */
 3482         DESC_SERVICE_STAT void ApplDescControlDtcSettingEnable(DescMsgContext* pMsgContext)
 3483         {
 3484  1      
 3485  1              if (2u == pMsgContext->reqDataLen)
 3486  1              {
 3487  2                      if (0u == VCU_VehicleSpeed)
 3488  2                      {
 3489  3                              DescMgr_CanDiagDtcControlSettingOn();   
 3490  3              
 3491  3                              pMsgContext->resDataLen = 0x02;
 3492  3                              DescSetPosResponse(pMsgContext);
 3493  3                      }
 3494  2                      else
 3495  2                      {
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 58  

 3496  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);          
 3497  3                      }
 3498  2              }
 3499  1              else
 3500  1              {
 3501  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);                 
 3502  2              }
 3503  1      }
 3504         
 3505         /*  ********************************************************************************
 3506          * Function name:ApplDescControlDtcSettingDisable (Service request header:$85 $2 )
 3507          * Description: not available 
 3508          * Returns:  nothing
 3509          * Parameter(s):
 3510          *   - pMsgContext->reqData:
 3511          *       - Points to the first service request data byte.
 3512          *       - Access type: read
 3513          *   - pMsgContext->resData:
 3514          *       - Points to the first writeable byte for the service response data.
 3515          *       - Access type: read/write
 3516          *   - pMsgContext->reqDataLen:
 3517          *       - Contains the count of the service request data bytes (Sid is excluded).
 3518          *       - Access type: read
 3519          *   - pMsgContext->resDataLen:
 3520          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 3521          *       - Access type: read/write
 3522          *   - pMsgContext->msgAddInfo.reqType:
 3523          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 3524          *       - Access type: read
 3525          *   - pMsgContext->msgAddInfo.resOnReq:
 3526          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 3527          *       - Access type: read/write
 3528          *   - pMsgContext->msgAddInfo.suppPosRes:
 3529          *       - UDS only!If set no positive response will be sent on this request.
 3530          *       - Access type: read
 3531          * Particularitie(s) and limitation(s):
 3532          *   - The function "DescProcessingDone" must be called from now on (within this
 3533          * main-handler or later).
 3534          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 3535          * but before calling "DescProcessingDone".
 3536          ********************************************************************************  */
 3537         DESC_SERVICE_STAT void ApplDescControlDtcSettingDisable(DescMsgContext* pMsgContext)
 3538         {
 3539  1      
 3540  1              if (2u == pMsgContext->reqDataLen)
 3541  1              {
 3542  2                      if (0u == VCU_VehicleSpeed)
 3543  2                      {
 3544  3                              DescMgr_CanDiagDtcControlSettingOff();  
 3545  3      
 3546  3                              pMsgContext->resDataLen = 0x02;
 3547  3                              DescSetPosResponse(pMsgContext);
 3548  3                      }
 3549  2                      else
 3550  2                      {
 3551  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
 3552  3                      }
 3553  2              }
 3554  1              else
 3555  1              {
 3556  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);                 
 3557  2              }
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 59  

 3558  1      }
 3559         
 3560         /***********************************************************************
 3561         *  Name        : CanDiagAppCallBack
 3562         *  Description : call back all service rountine         
 3563         *  Parameter   : pMsgContext
 3564         *  Returns     : none 
 3565         ***********************************************************************/
 3566         void CanDiagAppCallBack(APPL_DESC_SERVICE_ID_TYPE MsgContextId, DescMsgContext* pMsgContext)
 3567         {
 3568  1              DescClearResData(pMsgContext);
 3569  1      
 3570  1          if (MsgContextId < DESC_MAX_TYPE)
 3571  1          {
 3572  2              if (CanDiagHandler[MsgContextId] != NULL)
 3573  2              {   
 3574  3                  CanDiagHandler[MsgContextId](pMsgContext);
 3575  3              }        
 3576  2          }
 3577  1      }
 3578         
 3579         /***********************************************************************
 3580         *  Name        : DescClearResData
 3581         *  Description : none        
 3582         *  Parameter   : pMsgContext
 3583         *  Returns     : none 
 3584         ***********************************************************************/
 3585         void DescClearResData(DescMsgContext* pMsgContext)
 3586         {
 3587  1              INT16U i;
 3588  1      
 3589  1              for (i = 0u; i < pMsgContext->resDataLen; i++)
 3590  1              {
 3591  2                      pMsgContext->resData[i] = 0u;
 3592  2              }       
 3593  1      }
 3594         
 3595         /***********************************************************************
 3596         *  Name        : DescSetNegResponse
 3597         *  Description : none        
 3598         *  Parameter   : pMsgContext
 3599         *  Returns     : none 
 3600         ***********************************************************************/
 3601         void DescSetNegResponse(DescMsgContext* pMsgContext, DescNegResCode errorCode)
 3602         {
 3603  1              pMsgContext->resDataLen = 0x03;
 3604  1              pMsgContext->resData[0] = 0x7F;
 3605  1              pMsgContext->resData[1] = pMsgContext->reqData[0];
 3606  1              pMsgContext->resData[2] = errorCode;
 3607  1              pMsgContext->resData[3] = 0x00;
 3608  1              pMsgContext->resData[4] = 0x00;
 3609  1              pMsgContext->resData[5] = 0x00;
 3610  1              pMsgContext->resData[6] = 0x00;
 3611  1      
 3612  1              CanTx_descResMsgSendEnable();
 3613  1      }
 3614         
 3615         /***********************************************************************
 3616         *  Name        : DescSetPosResponse
 3617         *  Description : none        
 3618         *  Parameter   : pMsgContext
 3619         *  Returns     : none 
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 60  

 3620         ***********************************************************************/
 3621         void DescSetPosResponse(DescMsgContext* pMsgContext)
 3622         {
 3623  1              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 3624  1              pMsgContext->resData[1] = pMsgContext->reqData[1];
 3625  1              pMsgContext->resData[2] = pMsgContext->reqData[2];
 3626  1      
 3627  1              CanTx_descResMsgSendEnable();
 3628  1      }
 3629         
 3630         /***********************************************************************
 3631         *  Name        : DescProcessingDone
 3632         *  Description : none        
 3633         *  Parameter   : pMsgContext
 3634         *  Returns     : none 
 3635         ***********************************************************************/
 3636         void DescProcessingDone(void)
 3637         {
 3638  1              g_descReqMsgRxFlag = FALSE;             
 3639  1      }
 3640         
 3641         /***********************************************************************
 3642         *  Name        : seedToKey
 3643         *  Description : none        
 3644         *  Parameter   : pMsgContext
 3645         *  Returns     : none 
 3646         ***********************************************************************/
 3647         DESC_SERVICE_STAT INT32U seedToKey(INT32U seed, INT32U mask)
 3648         {
 3649  1              INT8U i;
 3650  1              INT32U key = 0u;
 3651  1      
 3652  1              if (seed != 0u)
 3653  1              {
 3654  2                      for (i=0u; i<35u; i++)
 3655  2                      {
 3656  3                              if (seed & 0x80000000)
 3657  3                              {
 3658  4                                      seed = seed << 1u;
 3659  4                                      seed = seed ^ mask;
 3660  4                              }
 3661  3                              else
 3662  3                              {
 3663  4                                      seed = seed << 1u;
 3664  4                              }
 3665  3                      }
 3666  2              }
 3667  1              else
 3668  1              {
 3669  2                      key = seed;
 3670  2              }
 3671  1      
 3672  1              return key;
 3673  1      }
 3674         
 3675         /* _END_OF_DESC_SERVICE_ */
 3676         
*** WARNING C174 IN LINE 3647 OF src\bsw\desc\desc_ser.c: 'seedToKey': unreferenced 'static' function


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =       10804     --------
C166 COMPILER V7.57.0, DESC_SER                                                            01/20/2021 09:50:57 PAGE 61  

  NEAR-CONST SIZE  =          29     --------
  FAR-CONST SIZE   =         626     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          34     --------
  FAR-DATA SIZE    =        1010     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =        1176     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
