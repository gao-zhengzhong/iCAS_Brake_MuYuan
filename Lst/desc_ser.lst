C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE DESC_SER
OBJECT MODULE PLACED IN .\Obj\desc_ser.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\bsw\desc\desc_ser.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\sr
                    -c\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\
                    -mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measur
                    -e;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\desc_ser.lst) OBJECT(.\Obj\desc_ser.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : DescService.c
    9         * Instance      : 
   10         * Description   : DTC service
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "desc.h"
   26         #include "desc_ser.h"
   27         #include "desc_mgr.h"
   28         #include "adc_sample.h"
   29         #include "eepRom.h"
   30         #include "can_com.h"
   31         #include "rte.h"
   32         
   33         
   34         #define DESC_SERVICE_GLOBALS
   35         
   36         /**** Definition of variables ****/
   37         INT8U descReqData[8] = {0u};
   38         INT8U descResData[256] = {0u};
   39         
   40         INT8U descResSnapshotData[36] = {0u};
   41         INT8U descResExtendedData[12] = {0u};
   42         
   43         BOOLEAN descNmFrameRxEnable = TRUE;
   44         BOOLEAN descNmFrameTxEnable = TRUE;
   45         BOOLEAN descApplFrameRxEnable = TRUE;
   46         BOOLEAN descApplFrameTxEnable = TRUE;
   47         
   48         DescMsgContext descMsgContext = {0u};
   49         DescDataIdentifier descDataIdentifier = {0u};
   50         
   51         DESC_SERVICE_STAT INT32U descSecurityRandSeedLevel1 = 0u;
   52         DESC_SERVICE_STAT INT32U descSecurityRandSeedLevel2 = 0u;
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 2   

   53         
   54         DESC_SERVICE_STAT INT32U descSendSecurityKeyLevel1 = 0u;
   55         DESC_SERVICE_STAT INT32U descSendSecurityKeyLevel2 = 0u;
   56         
   57         DESC_SERVICE_STAT INT16U descOemProcessTesterPresentTimeoutCnt = 0u;
   58         
   59         DESC_SERVICE_STAT BOOLEAN descOemProcessTesterPresentFlag = FALSE;
   60         DESC_SERVICE_STAT BOOLEAN descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
   61         DESC_SERVICE_STAT BOOLEAN descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
   62         
   63         /* $22 F187:Vehicle Manufacturer Spare Part Number Data Identifier */ 
   64         const INT8U VehicleManufacturerSparePartNumberDataIdentifier[10] = "XAA1234567";
   65         
   66         /* $22 F18A:System Supplier Identifier Data Identifier */
   67         const INT8U SystemSupplierIdentifierDataIdentifier[10] = "0000000000";
   68         
   69         /* $22 F18C:ECU Serial Number Data Identifier */
   70         const INT8U SystemSerialNumberDataIdentifier[16] = "XXXXXXXXXXXXXXXX";
   71         
   72         /* $22 F190:VIN Data Identifier */
   73         const INT8U YEMA_VIN_DataIdentifier[17] = "ABCDEFG0123456789";
   74         
   75         /* $22 F193:System Supplier ECU Hardware Version Number Data Identifier */
   76         const INT8U SystemHardwareVersionDataIdentifier[4] = "HW02";
   77         
   78         /* $22 F195:System Supplier ECU Software Version Number Data Identifier */
   79         const INT8U SystemSoftwareVersionDataIdentifier[15] = "ECU_20.02.25_D1";
   80         
   81         /* $22 F197:System Name Data Identifier */
   82         const INT8U SystemNameDataIdentifier[10] = "iCAS000000";
   83         
   84         /* $27 01:Security Access Seed Level 1 */
   85         const INT8U SecurityAccessSeedLevel_1[4] = {0x08, 0x27, 0x11, 0xF0};
   86         
   87         /* $27 02:Security Access Seed Level 1 */
   88         const INT8U SecurityAccessKeyLevel_1[4] = {0xF0, 0x11, 0x27, 0x08};
   89         
   90         /* $27 09:Security Access Seed Level 1 */
   91         const INT8U SecurityAccessSeedLevel_2[4] = {0x08, 0x27, 0x11, 0xF0};
   92         
   93         /* $27 0A:Security Access Seed Level 1 */
   94         const INT8U SecurityAccessKeyLevel_2[4] = {0xF0, 0x11, 0x27, 0x08};
   95         
   96         /* $27 level 1 security alogrithem mask */
   97         const INT32U SecurityAccessMaskLevel_1 = 0x21156136;
   98         
   99         /* $27 level 2 security alogrithem mask */
  100         const INT32U SecurityAccessMaskLevel_2 = 0x21156138;
  101         
  102         
  103         /**** Declaration of functions ****/
  104         DESC_SERVICE_STAT INT32U seedToKey(INT32U seed, INT32U mask);
  105         
  106         /* Table of service (instance) relevant information. */
  107         /* $11:ECU Reset */
  108         DESC_SERVICE_STAT void ApplDescEcuHardwareResetHard(DescMsgContext* pMsgContext);
  109         DESC_SERVICE_STAT void ApplDescEcuResetKeyOffOn(DescMsgContext* pMsgContext);
  110         DESC_SERVICE_STAT void ApplDescEcuSoftwareResetHard(DescMsgContext* pMsgContext);
  111         
  112         /* $14:Fault Memory */
  113         DESC_SERVICE_STAT void ApplDescClearDiagInfo(DescMsgContext* pMsgContext);
  114         
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 3   

  115         /* $19:Fault Memory*/
  116         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask(DescMsgContext* pMsgContext);
  117         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcByStatusMask(DescMsgContext* pMsgContext);
  118         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber(DescMsgContext* pMsgContext)
             -;
  119         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber(DescMsgContext* pMsgCont
             -ext);
  120         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportSupportedDtc(DescMsgContext* pMsgContext);
  121         
  122         /* $22:Read By Data Identifier */
  123         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_SparePartNumber(DescMsgContext* pMsgContext);
  124         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SupplierInformation(DescMsgContext* pMsgContext);
  125         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SerialNumber(DescMsgContext* pMsgContext);
  126         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_VIN(DescMsgContext* pMsgContext);       
  127         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber(DescMsgContext* pMsgContext)
             -;
  128         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber(DescMsgContext* pMsgContext)
             -;
  129         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SystemNameDataNumber(DescMsgContext* pMsgContext);
  130         DESC_SERVICE_STAT void ApplDescSimulateAdcData(DescMsgContext* pMsgContext);
  131         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_EepromData(DescMsgContext* pMsgContext);
  132         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_Pedal_Cylinder_Data(DescMsgContext* pMsgContext);
  133         
  134         /* $23:Read Memory By Address */
  135         DESC_SERVICE_STAT void ApplDescReadMemoryByAddress(DescMsgContext* pMsgContext);
  136         
  137         /* $27:Security Access */
  138         DESC_SERVICE_STAT void ApplDescOemGetLevel_1_RequestSeed(DescMsgContext* pMsgContext);
  139         DESC_SERVICE_STAT void ApplDescOemSendLevel_1_SendKey(DescMsgContext* pMsgContext);
  140         DESC_SERVICE_STAT void ApplDescOemGetLevel_2_RequestSeed(DescMsgContext* pMsgContext);
  141         DESC_SERVICE_STAT void ApplDescOemSendLevel_2_SendKey(DescMsgContext* pMsgContext);
  142         
  143         /* $28:Communication Control  */
  144         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxEnableTx(DescMsgContext* pMsgContext);
  145         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxDisableTx(DescMsgContext* pMsgContext);
  146         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxEnableTx(DescMsgContext* pMsgContext);
  147         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxDisableTx(DescMsgContext* pMsgContext);
  148         
  149         /* $2A:Read Data By Periodic Indentifier */
  150         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate(DescMsgContext* pMsgContext);
  151         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate(DescMsgContext* pMsgContext);
  152         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtFastRate(DescMsgContext* pMsgContext);
  153         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_StopSending(DescMsgContext* pMsgContext);
  154         
  155         /* $2C:Dynamically Define Data Indentifier */
  156         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier(DescMsgContext* pMsgCont
             -ext);
  157         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier(DescMs
             -gContext* pMsgContext);
  158         
  159         /* $2E:Write By Data Identifier */        
  160         DESC_SERVICE_STAT void ApplDescWriteByDataIdentifierOEM_VIN(DescMsgContext* pMsgContext);
  161         DESC_SERVICE_STAT void ApplDescWriteEepromDataById_6668(DescMsgContext* pMsgContext);
  162         DESC_SERVICE_STAT void ApplDescWritePedalCylinderDataById_2E01(DescMsgContext* pMsgContext);
  163         DESC_SERVICE_STAT void ApplDescWritePvTestFlagById_2E02(DescMsgContext* pMsgContext);
  164         
  165         /* $2F:Input Output Control By Identifier */
  166         
  167         /* $31:Service Routine Control*/
  168         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity(DescMsgContext* pMsgCo
             -ntext);
  169         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition(DescMsgContext* pMs
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 4   

             -gContext);
  170         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_EraseMemory(DescMsgContext* pMsgContext);
  171         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingDependency(DescMsgContext* pMsgC
             -ontext);
  172         
  173         /* $34:Request Download */ 
  174         DESC_SERVICE_STAT void ApplDescRequestDownload(DescMsgContext* pMsgContext);
  175         
  176         /* $36:Transfer Data */ 
  177         DESC_SERVICE_STAT void ApplDescTransferData(DescMsgContext* pMsgContext);
  178         
  179         /* $37:Request Transfer Exit */ 
  180         DESC_SERVICE_STAT void ApplDescRequestTransferExit(DescMsgContext* pMsgContext);        
  181         
  182         /* $3D:Write Memory By Address */ 
  183         DESC_SERVICE_STAT void ApplDescWriteMemoryByAddress(DescMsgContext* pMsgContext);
  184         
  185         /* $3E:Tester Present */ 
  186         DESC_SERVICE_STAT void ApplDescOemProcessTesterPresent(DescMsgContext* pMsgContext);    
  187         
  188         /* $85:Control DTC Setting */
  189         DESC_SERVICE_STAT void ApplDescControlDtcSettingEnable(DescMsgContext* pMsgContext);
  190         DESC_SERVICE_STAT void ApplDescControlDtcSettingDisable(DescMsgContext* pMsgContext);
  191         
  192         DESC_SERVICE_STAT DiagHandler CanDiagHandler[DESC_MAX_TYPE]=
  193         {
  194                 /* $10:Diagnostic Session Control. Had been handle by "CANdesc" component. */
  195             NULL,//DESC_10_01_DEFAULT_SESSION,
  196             NULL,//DESC_10_01_DEFAULT_SESSION,
  197             NULL,//DESC_10_03_EXTENDED_SESSION,
  198         
  199                 /* $11:ECU Reset */
  200             ApplDescEcuHardwareResetHard, /* $11 01 */
  201             ApplDescEcuResetKeyOffOn,     /* $11 02 */
  202             ApplDescEcuSoftwareResetHard, /* $11 03 */    
  203         
  204                 /* $14:Clear Diagnostic Information */
  205             ApplDescClearDiagInfo, 
  206         
  207                 /* $19:Read DTC Information */
  208             ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask,          /* $19 01 */    
  209             ApplDescReadDtcInfo_ReportDtcByStatusMask,                  /* $19 02 */
  210                 ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber,     /* $19 04 */        
  211             ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber, /* $19 06 */
  212             ApplDescReadDtcInfo_ReportSupportedDtc,                         /* $19 0A */
  213         
  214             /* $22:Read By Data Identifier */
  215                 ApplDescReadByDataIdentifier_OEM_SparePartNumber,       /* $22 F187 */  
  216                 ApplDescReadByDataIdentifier_SupplierInformation,       /* $22 F18A */
  217                 ApplDescReadByDataIdentifier_ECU_SerialNumber,          /* $22 F18C */
  218                 ApplDescReadByDataIdentifier_OEM_VIN,                   /* $22 F190 */
  219                 ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber, /* $22 F193 */
  220                 ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber, /* $22 F195 */
  221                 ApplDescReadByDataIdentifier_SystemNameDataNumber,          /* $22 F197 */
  222                 ApplDescSimulateAdcData,                                                                /* $22 6666 */
  223                 ApplDescReadByDataIdentifier_EepromData,                                /* $22 6667 */
  224                 ApplDescReadDataByIdentifier_Pedal_Cylinder_Data,               /* $22 2201 */
  225         
  226                 /* $23:Read Memory By Address */
  227                 ApplDescReadMemoryByAddress, /* $23 24 */
  228         
  229                 /* $27:Security Access */
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 5   

  230                 ApplDescOemGetLevel_1_RequestSeed, /* $27 01 */
  231                 ApplDescOemSendLevel_1_SendKey,    /* $27 02 */
  232                 ApplDescOemGetLevel_2_RequestSeed, /* $27 09 */
  233                 ApplDescOemSendLevel_2_SendKey,    /* $27 0A */
  234         
  235                 /* $28:Communication Control */
  236                 ApplDescOemCommCtrlEnableRxEnableTx,   /* $28 00 */
  237                 ApplDescOemCommCtrlEnableRxDisableTx,  /* $28 01 */
  238                 ApplDescOemCommCtrlDisableRxEnableTx,  /* $28 02 */
  239                 ApplDescOemCommCtrlDisableRxDisableTx, /* $28 03 */ 
  240         
  241                 /* $2A:Read Data By Periodic Indentifier */        
  242                 ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate,   /* $2A 01 */
  243                 ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate, /* $2A 02 */
  244                 ApplDesReadDataByPeriodicIndentifier_SendAtFastRate,   /* $2A 03 */
  245                 ApplDesReadDataByPeriodicIndentifier_StopSending,      /* $2A 04 */
  246         
  247                 /* $2C:Dynamically Define Data Indentifier */
  248                 ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier,                   /* $2C 01 */
  249                 ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier, /* $2C 03 */
  250                 
  251                 /* $2E:Write By Data Identifier */
  252                 ApplDescWriteByDataIdentifierOEM_VIN, /* $2E F190 */
  253                 ApplDescWriteEepromDataById_6668,         /* $2E 6668 */
  254                 ApplDescWritePedalCylinderDataById_2E01,/* $2E 2E01 */
  255                 ApplDescWritePvTestFlagById_2E02,               /* $2E 2E02 */
  256         
  257                 /* $2F:Input Output Control By Identifier */    
  258                 
  259             /* $31:Routine Control */   
  260             ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity,    /* $31 01 F0 01 */ 
  261             ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition, /* $31 01 FF 02 */    
  262             ApplDescRoutineControlByIdentifier_EraseMemory,                  /* $31 01 FF 00 */
  263             ApplDescRoutineControlByIdentifier_CheckProgrammingDependency,       /* $31 01 FF 01 */
  264             
  265                 /* $34:Request Download */ 
  266             ApplDescRequestDownload,    
  267         
  268                 /* $36:Transfer Data */ 
  269             ApplDescTransferData,
  270         
  271                 /* $37:Request Transfer Exit */ 
  272             ApplDescRequestTransferExit,
  273         
  274                 /* $3D:Write Memory By Address */ 
  275                 ApplDescWriteMemoryByAddress,   
  276         
  277                 /* $3E:Tester Present */ 
  278             ApplDescOemProcessTesterPresent,            
  279         
  280                 /* $85:Control DTC Setting */
  281                 ApplDescControlDtcSettingEnable,  /* $85 01 */
  282                 ApplDescControlDtcSettingDisable, /* $85 02 */
  283         };
  284         
  285         
  286         /*****************************************************************************************
  287         *  Name        : CanDesc_TaskEntry
  288         *  Description : none       
  289         *  Parameter   : none
  290         *  Returns     : none 
  291         *****************************************************************************************/
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 6   

  292         void CanDesc_TaskEntry(void)
  293         {
  294  1              descMsgContext.reqData = descReqData;
  295  1              descMsgContext.resData = descResData;
  296  1              
  297  1              if (TRUE == g_descReqMsgRxFlag)
  298  1              {
  299  2                      g_descReqMsgRxFlag = FALSE;
  300  2                      DescServiceClassifier(&descMsgContext); 
  301  2      
  302  2                      /* Check OBD tester present status, if long time not receive
  303  2                       * $3E service, meaning the OBD at present timeout, ECU should
  304  2                       * switch session mode to default session state. */
  305  2                      descOemProcessTesterPresentTimeoutCnt++;
  306  2                      if (descOemProcessTesterPresentTimeoutCnt >= 65535u)
  307  2                      {
  308  3                              descOemProcessTesterPresentFlag = FALSE;
  309  3                              DescSetStateSession(kDescStateSessionDefault);
  310  3                      }
  311  2              }
  312  1              
  313  1              return;
  314  1      }
  315         
  316         /*  ********************************************************************************
  317          * Function name:ApplDescEcuHardwareResetHard (Service request header:$11 $1 )
  318          * Description: not available 
  319          * Returns:  nothing
  320          * Parameter(s):
  321          *   - pMsgContext->reqData:
  322          *       - Points to the first service request data byte.
  323          *       - Access type: read
  324          *   - pMsgContext->resData:
  325          *       - Points to the first writeable byte for the service response data.
  326          *       - Access type: read/write
  327          *   - pMsgContext->reqDataLen:
  328          *       - Contains the count of the service request data bytes (Sid is excluded).
  329          *       - Access type: read
  330          *   - pMsgContext->resDataLen:
  331          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  332          *       - Access type: read/write
  333          *   - pMsgContext->msgAddInfo.reqType:
  334          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  335          *       - Access type: read
  336          *   - pMsgContext->msgAddInfo.resOnReq:
  337          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  338          *       - Access type: read/write
  339          *   - pMsgContext->msgAddInfo.suppPosRes:
  340          *       - UDS only!If set no positive response will be sent on this request.
  341          *       - Access type: read
  342          * Particularitie(s) and limitation(s):
  343          *   - The function "DescProcessingDone" must be called from now on (within this
  344          * main-handler or later).
  345          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  346          * but before calling "DescProcessingDone".
  347          ********************************************************************************  */
  348         DESC_SERVICE_STAT void ApplDescEcuHardwareResetHard(DescMsgContext* pMsgContext)
  349         {
  350  1      #if (kDescEnableService11_HardwareReset == 1)
  351  1      
  352  1              if (0x02 == pMsgContext->reqDataLen)
  353  1              {
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 7   

  354  2                      if (0u == VCU_VehicleSpeed)
  355  2                      {
  356  3                              pMsgContext->resDataLen = 0x02;
  357  3                              DescSetPosResponse(pMsgContext);
  358  3      
  359  3                              /* Hardware Reset */
  360  3                  // TODO:Hardware reset
  361  3                      }
  362  2                      else
  363  2                      {
  364  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
  365  3                      }               
  366  2              }
  367  1              else
  368  1              {
  369  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  370  2              }
  371  1      #else
                      DescProcessingDone();
              #endif
  374  1      }
  375         
  376         /*  ********************************************************************************
  377          * Function name:ApplDescEcuResetKeyOffOn (Service request header:$11 $2 )
  378          * Description: not available 
  379          * Returns:  nothing
  380          * Parameter(s):
  381          *   - pMsgContext->reqData:
  382          *       - Points to the first service request data byte.
  383          *       - Access type: read
  384          *   - pMsgContext->resData:
  385          *       - Points to the first writeable byte for the service response data.
  386          *       - Access type: read/write
  387          *   - pMsgContext->reqDataLen:
  388          *       - Contains the count of the service request data bytes (Sid is excluded).
  389          *       - Access type: read
  390          *   - pMsgContext->resDataLen:
  391          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  392          *       - Access type: read/write
  393          *   - pMsgContext->msgAddInfo.reqType:
  394          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  395          *       - Access type: read
  396          *   - pMsgContext->msgAddInfo.resOnReq:
  397          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  398          *       - Access type: read/write
  399          *   - pMsgContext->msgAddInfo.suppPosRes:
  400          *       - UDS only!If set no positive response will be sent on this request.
  401          *       - Access type: read
  402          * Particularitie(s) and limitation(s):
  403          *   - The function "DescProcessingDone" must be called from now on (within this
  404          * main-handler or later).
  405          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  406          * but before calling "DescProcessingDone".
  407          ********************************************************************************  */
  408         DESC_SERVICE_STAT void ApplDescEcuResetKeyOffOn(DescMsgContext* pMsgContext)
  409         {
  410  1      #if (kDescEnableService11_KeyOffOnReset == 1)
  411  1      
  412  1              if (0x02 == pMsgContext->reqDataLen)
  413  1              {
  414  2                      if (0u == VCU_VehicleSpeed)
  415  2                      {
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 8   

  416  3                              pMsgContext->resDataLen = 0x02;
  417  3                              DescSetPosResponse(pMsgContext);
  418  3                              
  419  3                              // TODO:Key Off On Reset                        
  420  3                      }
  421  2                      else
  422  2                      {
  423  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
  424  3                      }               
  425  2              }
  426  1              else
  427  1              {
  428  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  429  2              }
  430  1      #else
                      DescProcessingDone();
              #endif
  433  1      }
  434         
  435         /*  ********************************************************************************
  436          * Function name:ApplDescEcuSoftwareResetHard (Service request header:$11 $3 )
  437          * Description: not available 
  438          * Returns:  nothing
  439          * Parameter(s):
  440          *   - pMsgContext->reqData:
  441          *       - Points to the first service request data byte.
  442          *       - Access type: read
  443          *   - pMsgContext->resData:
  444          *       - Points to the first writeable byte for the service response data.
  445          *       - Access type: read/write
  446          *   - pMsgContext->reqDataLen:
  447          *       - Contains the count of the service request data bytes (Sid is excluded).
  448          *       - Access type: read
  449          *   - pMsgContext->resDataLen:
  450          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  451          *       - Access type: read/write
  452          *   - pMsgContext->msgAddInfo.reqType:
  453          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  454          *       - Access type: read
  455          *   - pMsgContext->msgAddInfo.resOnReq:
  456          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  457          *       - Access type: read/write
  458          *   - pMsgContext->msgAddInfo.suppPosRes:
  459          *       - UDS only!If set no positive response will be sent on this request.
  460          *       - Access type: read
  461          * Particularitie(s) and limitation(s):
  462          *   - The function "DescProcessingDone" must be called from now on (within this
  463          * main-handler or later).
  464          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  465          * but before calling "DescProcessingDone".
  466          ********************************************************************************  */
  467         DESC_SERVICE_STAT void ApplDescEcuSoftwareResetHard(DescMsgContext* pMsgContext)
  468         {
  469  1              static INT16U temp = 0u;
  470  1              
  471  1      #if (kDescEnableService11_SoftwareReset == 1)
  472  1      
  473  1              if (0x02 == pMsgContext->reqDataLen)
  474  1              {
  475  2                      if (0u == VCU_VehicleSpeed)
  476  2                      {
  477  3                              pMsgContext->resDataLen = 0x02;
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 9   

  478  3                              DescSetPosResponse(pMsgContext);
  479  3      
  480  3                              DESC_vSWRST();
  481  3                      }
  482  2                      else
  483  2                      {
  484  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
  485  3                      }               
  486  2              }
  487  1              else
  488  1              {
  489  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
  490  2              }
  491  1      #else
                      DescProcessingDone();
              #endif
  494  1      }
  495         
  496         /*  ********************************************************************************
  497          * Function name:ApplDescClearDiagInfo (Service request header:$14 )
  498         * Description: not available 
  499          * Returns:  nothing
  500          * Parameter(s):
  501          *   - pMsgContext->reqData:
  502          *       - Points to the first service request byte after the Sid.
  503          *       - Access type: read
  504          *   - pMsgContext->resData:
  505          *       - Points to the first writeable byte for the service response after the Sid.
  506          *       - Access type: read/write
  507          *   - pMsgContext->reqDataLen:
  508          *       - Contains the service request length, excluding Sid byte only.
  509          *       - Access type: read
  510          *   - pMsgContext->resDataLen:
  511          *       - Must be initialized with the total service response length, excluding the Sid only.
  512          *       - Access type: read/write
  513          *   - pMsgContext->msgAddInfo.reqType:
  514          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  515          *       - Access type: read
  516          *   - pMsgContext->msgAddInfo.resOnReq:
  517          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  518          *       - Access type: read/write
  519          *   - pMsgContext->msgAddInfo.suppPosRes:
  520          *       - UDS only!If set no positive response will be sent on this request.
  521          *       - Access type: read
  522          * Particularitie(s) and limitation(s):
  523          *   - The function "DescProcessingDone" must be called from now on (within this
  524          * main-handler or later).
  525          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  526          * but before calling "DescProcessingDone".
  527          ********************************************************************************  */
  528         DESC_SERVICE_STAT void ApplDescClearDiagInfo(DescMsgContext* pMsgContext)
  529         {
  530  1              INT32U dtc_group_type = 0;      
  531  1      
  532  1          dtc_group_type = (((INT32U)pMsgContext->reqData[1]) << 16u) & 0x00FF0000; /* High byte */
  533  1          dtc_group_type |= (((INT32U)pMsgContext->reqData[2]) << 8u) & 0x0000FF00; /* Middle byte */
  534  1          dtc_group_type |= (((INT32U)pMsgContext->reqData[3])) & 0x000000FF;       /* low byte */
  535  1      
  536  1              if (4u == pMsgContext->reqDataLen)
  537  1              {
  538  2                      if (DTC_GRP_ALL == dtc_group_type)
  539  2                      {
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 10  

  540  3                              if (0u == EepRom_Check())
  541  3                              {
  542  4                                      /* Clear Diagnostic Information */
  543  4                                      
  544  4                                      //EarsePageEeprom_v_g();
  545  4      
  546  4                                      pMsgContext->resDataLen = 1u;
  547  4                                      pMsgContext->reqData[1] = 0x00;
  548  4                                      pMsgContext->reqData[2] = 0x00;
  549  4      
  550  4                                      DescSetPosResponse(pMsgContext);                                        
  551  4                              }
  552  3                              else
  553  3                              {
  554  4                                      DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
  555  4                              }
  556  3                      }
  557  2                      else
  558  2                      {
  559  3                      DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                     
  560  3                      }
  561  2              }
  562  1              else
  563  1              {
  564  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  565  2              }
  566  1      }
  567         
  568         /*  ********************************************************************************
  569          * Function name:ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask (Service request header:$19 $1 )
  570          * Description: not available 
  571          * Returns:  nothing
  572          * Parameter(s):
  573          *   - pMsgContext->reqData:
  574          *       - Points to the first service request data byte.
  575          *       - Access type: read
  576          *   - pMsgContext->resData:
  577          *       - Points to the first writeable byte for the service response data.
  578          *       - Access type: read/write
  579          *   - pMsgContext->reqDataLen:
  580          *       - Contains the count of the service request data bytes (Sid is excluded).
  581          *       - Access type: read
  582          *   - pMsgContext->resDataLen:
  583          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  584          *       - Access type: read/write
  585          *   - pMsgContext->msgAddInfo.reqType:
  586          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  587          *       - Access type: read
  588          *   - pMsgContext->msgAddInfo.resOnReq:
  589          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  590          *       - Access type: read/write
  591          *   - pMsgContext->msgAddInfo.suppPosRes:
  592          *       - UDS only!If set no positive response will be sent on this request.
  593          *       - Access type: read
  594          * Particularitie(s) and limitation(s):
  595          *   - The function "DescProcessingDone" must be called from now on (within this
  596          * main-handler or later).
  597          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  598          * but before calling "DescProcessingDone".
  599          ********************************************************************************  */
  600         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportNumberOfDtcByStatusMask(DescMsgContext* pMsgContext)
  601         {
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 11  

  602  1              INT16U dtc_num = 0; 
  603  1              
  604  1              if (3u == pMsgContext->reqDataLen)
  605  1              {
  606  2                      if (0 != (pMsgContext->reqData[2] & DTC_STATUS_AVAILABILITY_MASK))
  607  2                      {
  608  3                              dtc_num = DescMgr_CanDiagGetDtcCount(pMsgContext->reqData[2]);          /*get stc number through dtc status*
             -/
  609  3      
  610  3                              pMsgContext->resDataLen = 6u;
  611  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  612  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
  613  3                              pMsgContext->resData[2] = DTC_STATUS_AVAILABILITY_MASK;
  614  3                          pMsgContext->resData[3] = DTC_FORMAT_INDENTIFIER_1;
  615  3                          pMsgContext->resData[4] = (INT8U)(dtc_num >> 8u);/*High byte*/
  616  3                          pMsgContext->resData[5] = (INT8U)(dtc_num & 0xff);/*Low byte*/
  617  3      
  618  3                              CanTx_descResMsgSendEnable();                           
  619  3                      }
  620  2                      else
  621  2                      {
  622  3                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                             
  623  3                      }       
  624  2              }
  625  1              else
  626  1              {
  627  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  628  2              }
  629  1      }
  630         
  631         /*  ********************************************************************************
  632          * Function name:ApplDescReadDtcInfo_ReportDtcByStatusMask (Service request header:$19 $2 )
  633          * Description: not available 
  634          * Returns:  nothing
  635          * Parameter(s):
  636          *   - pMsgContext->reqData:
  637          *       - Points to the first service request data byte.
  638          *       - Access type: read
  639          *   - pMsgContext->resData:
  640          *       - Points to the first writeable byte for the service response data.
  641          *       - Access type: read/write
  642          *   - pMsgContext->reqDataLen:
  643          *       - Contains the count of the service request data bytes (Sid is excluded).
  644          *       - Access type: read
  645          *   - pMsgContext->resDataLen:
  646          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  647          *       - Access type: read/write
  648          *   - pMsgContext->msgAddInfo.reqType:
  649          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  650          *       - Access type: read
  651          *   - pMsgContext->msgAddInfo.resOnReq:
  652          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  653          *       - Access type: read/write
  654          *   - pMsgContext->msgAddInfo.suppPosRes:
  655          *       - UDS only!If set no positive response will be sent on this request.
  656          *       - Access type: read
  657          * Particularitie(s) and limitation(s):
  658          *   - The function "DescProcessingDone" must be called from now on (within this
  659          * main-handler or later).
  660          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  661          * but before calling "DescProcessingDone".
  662          ********************************************************************************  */
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 12  

  663         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcByStatusMask(DescMsgContext* pMsgContext)
  664         {
  665  1              INT8U i;
  666  1              INT16U dtc_num = 0u; 
  667  1      
  668  1              DESC_SERVICE_STAT INT8U descResDtcByStatusMask[DTC_CODE_MAX_NUM*4] = {0u};
  669  1      
  670  1              if (3u == pMsgContext->reqDataLen)
  671  1              {
  672  2                      if (0 != (pMsgContext->reqData[2] & DTC_STATUS_AVAILABILITY_MASK))
  673  2                      {
  674  3                              dtc_num = DescMgr_CanDiagGetDtcStatusByStatusMask(descResDtcByStatusMask, pMsgContext->reqData[2]);
  675  3                              pMsgContext->resDataLen = (INT8U)(3u + dtc_num * 4u);
  676  3      
  677  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  678  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
  679  3                              pMsgContext->resData[2] = DTC_STATUS_AVAILABILITY_MASK;
  680  3      
  681  3                              for (i = 0u; i < (4 * dtc_num); i++)
  682  3                              {
  683  4                                      pMsgContext->resData[i+3] = descResDtcByStatusMask[i];
  684  4                              }
  685  3      
  686  3                              CanTx_descResMsgSendEnable();
  687  3                      }
  688  2                      else
  689  2                      {
  690  3                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                             
  691  3                      }
  692  2              }
  693  1              else
  694  1              {
  695  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  696  2              }  
  697  1      }
  698         
  699         /*****************************************************************************************
  700         *  Name        : ApplDesc_CompareDtcNumber
  701         *  Description : none    
  702         *  Parameter   : pMsgContext
  703         *  Returns     : none 
  704         *****************************************************************************************/
  705         DESC_SERVICE_STAT BOOLEAN ApplDesc_CompareDtcNumber(DescMsgContext* pMsgContext)
  706         {
  707  1              INT8U record_count;
  708  1          BOOLEAN NRC_occured = TRUE;
  709  1      
  710  1              for (record_count=0u; record_count<DTC_CODE_MAX_NUM; record_count++)
  711  1          {
  712  2              if ((dtc_code_data[record_count].dtc_bytes.dtc_high_byte == pMsgContext->reqData[2]) 
  713  2                   && (dtc_code_data[record_count].dtc_bytes.dtc_middle_byte == pMsgContext->reqData[3])
  714  2                   && (dtc_code_data[record_count].dtc_bytes.dtc_low_byte == pMsgContext->reqData[4]))
  715  2              {
  716  3                  NRC_occured = FALSE;
  717  3              }
  718  2                      
  719  2              if(!NRC_occured)
  720  2              {
  721  3                  return TRUE;
  722  3              }
  723  2          }
  724  1              
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 13  

  725  1          return FALSE;  
  726  1      }
  727         
  728         /*  ********************************************************************************
  729          * Function name:ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber (Service request header:$19 $4 )
  730          * Description: not available 
  731          * Returns:  nothing
  732          * Parameter(s):
  733          *   - pMsgContext->reqData:
  734          *       - Points to the first service request data byte.
  735          *       - Access type: read
  736          *   - pMsgContext->resData:
  737          *       - Points to the first writeable byte for the service response data.
  738          *       - Access type: read/write
  739          *   - pMsgContext->reqDataLen:
  740          *       - Contains the count of the service request data bytes (Sid is excluded).
  741          *       - Access type: read
  742          *   - pMsgContext->resDataLen:
  743          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  744          *       - Access type: read/write
  745          *   - pMsgContext->msgAddInfo.reqType:
  746          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  747          *       - Access type: read
  748          *   - pMsgContext->msgAddInfo.resOnReq:
  749          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  750          *       - Access type: read/write
  751          *   - pMsgContext->msgAddInfo.suppPosRes:
  752          *       - UDS only!If set no positive response will be sent on this request.
  753          *       - Access type: read
  754          * Particularitie(s) and limitation(s):
  755          *   - The function "DescProcessingDone" must be called from now on (within this
  756          * main-handler or later).
  757          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  758          * but before calling "DescProcessingDone".
  759          ********************************************************************************  */
  760         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcSnapshotRecordByDtcNumber(DescMsgContext* pMsgContext)
  761         {
  762  1              INT8U i;
  763  1      
  764  1              if (6u == pMsgContext->reqDataLen)
  765  1              {
  766  2                      if (TRUE == ApplDesc_CompareDtcNumber(pMsgContext))
  767  2                      {
  768  3                              switch (pMsgContext->reqData[5])  
  769  3                              {
  770  4                                      case 0x01:
  771  4                                      case 0xFF:
  772  4                                              DescMgr_CanDiagGetSnapshotData(descResSnapshotData, &(pMsgContext->reqData[0]));
  773  4                                      
  774  4                                          pMsgContext->resDataLen = sizeof(descResSnapshotData) + 2u;
  775  4      
  776  4                                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  777  4                                              pMsgContext->resData[1] = pMsgContext->reqData[1];
  778  4      
  779  4                                              for (i=0u; i<sizeof(descResSnapshotData); i++)
  780  4                                              {
  781  5                                                      pMsgContext->resData[i+2] = descResSnapshotData[i];
  782  5                                              }
  783  4                                              CanTx_descResMsgSendEnable();
  784  4              
  785  4                                              break;
  786  4                                      default:
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 14  

  787  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);
  788  4                                              break;
  789  4                              }               
  790  3                      }
  791  2                      else
  792  2                      {
  793  3                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                     
  794  3                      }
  795  2              }
  796  1              else
  797  1              {
  798  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  799  2              } 
  800  1      }
  801         
  802         /*  ********************************************************************************
  803          * Function name:ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber (Service request header:$19 $6
             - )
  804          * Description: not available 
  805          * Returns:  nothing
  806          * Parameter(s):
  807          *   - pMsgContext->reqData:
  808          *       - Points to the first service request data byte.
  809          *       - Access type: read
  810          *   - pMsgContext->resData:
  811          *       - Points to the first writeable byte for the service response data.
  812          *       - Access type: read/write
  813          *   - pMsgContext->reqDataLen:
  814          *       - Contains the count of the service request data bytes (Sid is excluded).
  815          *       - Access type: read
  816          *   - pMsgContext->resDataLen:
  817          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  818          *       - Access type: read/write
  819          *   - pMsgContext->msgAddInfo.reqType:
  820          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  821          *       - Access type: read
  822          *   - pMsgContext->msgAddInfo.resOnReq:
  823          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  824          *       - Access type: read/write
  825          *   - pMsgContext->msgAddInfo.suppPosRes:
  826          *       - UDS only!If set no positive response will be sent on this request.
  827          *       - Access type: read
  828          * Particularitie(s) and limitation(s):
  829          *   - The function "DescProcessingDone" must be called from now on (within this
  830          * main-handler or later).
  831          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  832          * but before calling "DescProcessingDone".
  833          ********************************************************************************  */
  834         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportDtcExtendedDataRecordByDtcNumber(DescMsgContext* pMsgCont
             -ext)
  835         {
  836  1              INT8U i;
  837  1      
  838  1          /**
  839  1           *  pMsgContext->reqData[0]-----> DTC Number High byte
  840  1           *  pMsgContext->reqData[1]-----> DTC Number Middle byte
  841  1           *  pMsgContext->reqData[2]-----> DTC Number Low byte
  842  1           *  pMsgContext->reqData[3]-----> Request extend data type
  843  1           *  All can be config in canoe or vspy
  844  1           */
  845  1              if (TRUE == ApplDesc_CompareDtcNumber(pMsgContext))
  846  1              {
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 15  

  847  2                      switch (pMsgContext->reqData[5]) 
  848  2                      {
  849  3                              case 0x01:
  850  3                              case 0x02:
  851  3                              case 0x03:
  852  3                              case 0x04:
  853  3                                      DescMgr_CanDiagGetExtendData(descResExtendedData, &(pMsgContext->reqData[0])); 
  854  3      
  855  3                                      pMsgContext->resDataLen = 8u;                           
  856  3                                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  857  3                                      pMsgContext->resData[1] = pMsgContext->reqData[1];
  858  3      
  859  3                                      for (i = 0u; i < 6u; i++)
  860  3                                      {
  861  4                                              pMsgContext->resData[i+2] = descResExtendedData[i];
  862  4                                      }
  863  3      
  864  3                                      CanTx_descResMsgSendEnable();
  865  3                                      
  866  3                                  break;
  867  3                                      
  868  3                              case 0xFF:
  869  3                                  DescMgr_CanDiagGetExtendData(descResExtendedData, &(pMsgContext->reqData[0]));    
  870  3      
  871  3                                      pMsgContext->resDataLen = sizeof(descResExtendedData) + 2u;                             
  872  3                                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  873  3                                      pMsgContext->resData[1] = pMsgContext->reqData[1];
  874  3      
  875  3                                      for (i = 0u; i < sizeof(descResExtendedData); i++)
  876  3                                      {
  877  4                                              pMsgContext->resData[i+2] = descResExtendedData[i];
  878  4                                      }
  879  3                                      CanTx_descResMsgSendEnable();
  880  3                              
  881  3                                      break;
  882  3                              
  883  3                              default:
  884  3                                      DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);
  885  3                                      break;
  886  3                      }               
  887  2              }
  888  1              else
  889  1              {
  890  2                      DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);             
  891  2              }
  892  1      }
  893         
  894         /*  ********************************************************************************
  895          * Function name:ApplDescReadDtcInfo_ReportSupportedDtc (Service request header:$19 $A )
  896          * Description: not available 
  897          * Returns:  nothing
  898          * Parameter(s):
  899          *   - pMsgContext->reqData:
  900          *       - Points to the first service request data byte.
  901          *       - Access type: read
  902          *   - pMsgContext->resData:
  903          *       - Points to the first writeable byte for the service response data.
  904          *       - Access type: read/write
  905          *   - pMsgContext->reqDataLen:
  906          *       - Contains the count of the service request data bytes (Sid is excluded).
  907          *       - Access type: read
  908          *   - pMsgContext->resDataLen:
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 16  

  909          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  910          *       - Access type: read/write
  911          *   - pMsgContext->msgAddInfo.reqType:
  912          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  913          *       - Access type: read
  914          *   - pMsgContext->msgAddInfo.resOnReq:
  915          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  916          *       - Access type: read/write
  917          *   - pMsgContext->msgAddInfo.suppPosRes:
  918          *       - UDS only!If set no positive response will be sent on this request.
  919          *       - Access type: read
  920          * Particularitie(s) and limitation(s):
  921          *   - The function "DescProcessingDone" must be called from now on (within this
  922          * main-handler or later).
  923          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  924          * but before calling "DescProcessingDone".
  925          ********************************************************************************  */
  926         DESC_SERVICE_STAT void ApplDescReadDtcInfo_ReportSupportedDtc(DescMsgContext* pMsgContext)
  927         {
  928  1              INT8U i;
  929  1              INT16U dtc_num = 0u;
  930  1              DESC_SERVICE_STAT INT8U descResDtcReportStatus[DTC_CODE_MAX_NUM*4] = {0u};
  931  1      
  932  1              if (2u == pMsgContext->reqDataLen)
  933  1              {
  934  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
  935  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
  936  2                      pMsgContext->resData[2] = DTC_STATUS_AVAILABILITY_MASK; 
  937  2      
  938  2                  dtc_num = DescMgr_CanDiagGetSupportedDtc(descResDtcReportStatus);
  939  2                  pMsgContext->resDataLen = (INT8U)(3u + dtc_num * 4u);
  940  2      
  941  2                      for (i = 0u; i < (dtc_num * 4u); i++)
  942  2                      {
  943  3                              pMsgContext->resData[i+3] = descResDtcReportStatus[i];
  944  3                      }
  945  2                      CanTx_descResMsgSendEnable();           
  946  2              }
  947  1              else
  948  1              {
  949  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
  950  2              }       
  951  1      }
  952         
  953         /*  ********************************************************************************
  954          * Function name:ApplDescReadByDataIdentifier_OEM_SparePartNumber (Service request header:$22 $F1 $87 )
  955          * Description: not available 
  956          * Returns:  nothing
  957          * Parameter(s):
  958          *   - pMsgContext->reqData:
  959          *       - Points to the first service request data byte.
  960          *       - Access type: read
  961          *   - pMsgContext->resData:
  962          *       - Points to the first writeable byte for the service response data.
  963          *       - Access type: read/write
  964          *   - pMsgContext->reqDataLen:
  965          *       - Contains the count of the service request data bytes (Sid is excluded).
  966          *       - Access type: read
  967          *   - pMsgContext->resDataLen:
  968          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
  969          *       - Access type: read/write
  970          *   - pMsgContext->msgAddInfo.reqType:
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 17  

  971          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
  972          *       - Access type: read
  973          *   - pMsgContext->msgAddInfo.resOnReq:
  974          *       - Indicates if there will be response. Allowed only to write only 0 !!!
  975          *       - Access type: read/write
  976          *   - pMsgContext->msgAddInfo.suppPosRes:
  977          *       - UDS only!If set no positive response will be sent on this request.
  978          *       - Access type: read
  979          * Particularitie(s) and limitation(s):
  980          *   - The function "DescProcessingDone" must be called from now on (within this
  981          * main-handler or later).
  982          *   - The function "DescSetNegResponse" can be called within this main-handler or later
  983          * but before calling "DescProcessingDone".
  984          ********************************************************************************  */
  985         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_SparePartNumber(DescMsgContext* pMsgContext)
  986         {
  987  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
  988  1              /* Contains no request data */
  989  1              /* Dummy example of how to write the response data. */
  990  1      
  991  1              INT8U i; 
  992  1      
  993  1              if (0x03 == pMsgContext->reqDataLen)
  994  1              {
  995  2                      if (0u == VCU_VehicleSpeed)
  996  2                      {
  997  3                              pMsgContext->resDataLen = sizeof(VehicleManufacturerSparePartNumberDataIdentifier) + 3u;
  998  3      
  999  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1000  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1001  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];      
 1002  3                              
 1003  3                              for (i = 0u; i < sizeof(VehicleManufacturerSparePartNumberDataIdentifier); i++)
 1004  3                              {
 1005  4                                      pMsgContext->resData[i+3] = VehicleManufacturerSparePartNumberDataIdentifier[i];
 1006  4                              }               
 1007  3                              CanTx_descResMsgSendEnable();
 1008  3                      }
 1009  2                      else
 1010  2                      {
 1011  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 1012  3                      } 
 1013  2              }
 1014  1              else
 1015  1              {
 1016  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1017  2              }
 1018  1      }
 1019         
 1020         /*  ********************************************************************************
 1021          * Function name:ApplDescReadByDataIdentifier_SupplierInformation (Service request header:$22 $F1 $8A )
 1022          * Description: not available 
 1023          * Returns:  nothing
 1024          * Parameter(s):
 1025          *   - pMsgContext->reqData:
 1026          *       - Points to the first service request data byte.
 1027          *       - Access type: read
 1028          *   - pMsgContext->resData:
 1029          *       - Points to the first writeable byte for the service response data.
 1030          *       - Access type: read/write
 1031          *   - pMsgContext->reqDataLen:
 1032          *       - Contains the count of the service request data bytes (Sid is excluded).
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 18  

 1033          *       - Access type: read
 1034          *   - pMsgContext->resDataLen:
 1035          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1036          *       - Access type: read/write
 1037          *   - pMsgContext->msgAddInfo.reqType:
 1038          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1039          *       - Access type: read
 1040          *   - pMsgContext->msgAddInfo.resOnReq:
 1041          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1042          *       - Access type: read/write
 1043          *   - pMsgContext->msgAddInfo.suppPosRes:
 1044          *       - UDS only!If set no positive response will be sent on this request.
 1045          *       - Access type: read
 1046          * Particularitie(s) and limitation(s):
 1047          *   - The function "DescProcessingDone" must be called from now on (within this
 1048          * main-handler or later).
 1049          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1050          * but before calling "DescProcessingDone".
 1051          ********************************************************************************  */
 1052         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SupplierInformation(DescMsgContext* pMsgContext)
 1053         {
 1054  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1055  1              /* Contains no request data */
 1056  1              /* Dummy example of how to write the response data. */
 1057  1      
 1058  1              INT8U i; 
 1059  1      
 1060  1              if (0x03 == pMsgContext->reqDataLen) 
 1061  1              { 
 1062  2                      if (0u == VCU_VehicleSpeed)
 1063  2                      {
 1064  3                              pMsgContext->resDataLen = sizeof(SystemSupplierIdentifierDataIdentifier) + 3u;
 1065  3      
 1066  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1067  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1068  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1069  3                              
 1070  3                              for (i = 0u; i < sizeof(SystemSupplierIdentifierDataIdentifier); i++)
 1071  3                              {
 1072  4                                      pMsgContext->resData[i+3] = SystemSupplierIdentifierDataIdentifier[i];
 1073  4                              }
 1074  3                              CanTx_descResMsgSendEnable();
 1075  3                      }
 1076  2                      else
 1077  2                      {
 1078  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 1079  3                      } 
 1080  2              }
 1081  1              else
 1082  1              {
 1083  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1084  2              }
 1085  1      }
 1086         
 1087         /*  ********************************************************************************
 1088          * Function name:ApplDescReadByDataIdentifier_ECU_SerialNumber (Service request header:$22 $F1 $8C )
 1089          * Description: not available 
 1090          * Returns:  nothing
 1091          * Parameter(s):
 1092          *   - pMsgContext->reqData:
 1093          *       - Points to the first service request data byte.
 1094          *       - Access type: read
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 19  

 1095          *   - pMsgContext->resData:
 1096          *       - Points to the first writeable byte for the service response data.
 1097          *       - Access type: read/write
 1098          *   - pMsgContext->reqDataLen:
 1099          *       - Contains the count of the service request data bytes (Sid is excluded).
 1100          *       - Access type: read
 1101          *   - pMsgContext->resDataLen:
 1102          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1103          *       - Access type: read/write
 1104          *   - pMsgContext->msgAddInfo.reqType:
 1105          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1106          *       - Access type: read
 1107          *   - pMsgContext->msgAddInfo.resOnReq:
 1108          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1109          *       - Access type: read/write
 1110          *   - pMsgContext->msgAddInfo.suppPosRes:
 1111          *       - UDS only!If set no positive response will be sent on this request.
 1112          *       - Access type: read
 1113          * Particularitie(s) and limitation(s):
 1114          *   - The function "DescProcessingDone" must be called from now on (within this
 1115          * main-handler or later).
 1116          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1117          * but before calling "DescProcessingDone".
 1118          ********************************************************************************  */
 1119         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SerialNumber(DescMsgContext* pMsgContext)
 1120         {
 1121  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1122  1              /* Contains no request data */
 1123  1              /* Dummy example of how to write the response data. */
 1124  1      
 1125  1              INT8U i; 
 1126  1      
 1127  1              if (0x03 == pMsgContext->reqDataLen) 
 1128  1              {
 1129  2                      if (0u == VCU_VehicleSpeed)
 1130  2                      {
 1131  3                              pMsgContext->resDataLen = sizeof(SystemSerialNumberDataIdentifier) + 3u;
 1132  3      
 1133  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1134  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1135  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1136  3                              
 1137  3                              for (i = 0u; i < sizeof(SystemSerialNumberDataIdentifier); i++)
 1138  3                              {
 1139  4                                      pMsgContext->resData[i+3] = SystemSerialNumberDataIdentifier[i];
 1140  4                              }
 1141  3                              CanTx_descResMsgSendEnable();
 1142  3                      }
 1143  2                      else
 1144  2                      {
 1145  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1146  3                      } 
 1147  2              }
 1148  1              else
 1149  1              {
 1150  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1151  2              }
 1152  1      }
 1153         
 1154         /*  ********************************************************************************
 1155          * Function name:ApplDescReadByDataIdentifier_OEM_VIN (Service request header:$22 $F1 $90 )
 1156          * Description: not available 
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 20  

 1157          * Returns:  nothing
 1158          * Parameter(s):
 1159          *   - pMsgContext->reqData:
 1160          *       - Points to the first service request data byte.
 1161          *       - Access type: read
 1162          *   - pMsgContext->resData:
 1163          *       - Points to the first writeable byte for the service response data.
 1164          *       - Access type: read/write
 1165          *   - pMsgContext->reqDataLen:
 1166          *       - Contains the count of the service request data bytes (Sid is excluded).
 1167          *       - Access type: read
 1168          *   - pMsgContext->resDataLen:
 1169          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1170          *       - Access type: read/write
 1171          *   - pMsgContext->msgAddInfo.reqType:
 1172          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1173          *       - Access type: read
 1174          *   - pMsgContext->msgAddInfo.resOnReq:
 1175          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1176          *       - Access type: read/write
 1177          *   - pMsgContext->msgAddInfo.suppPosRes:
 1178          *       - UDS only!If set no positive response will be sent on this request.
 1179          *       - Access type: read
 1180          * Particularitie(s) and limitation(s):
 1181          *   - The function "DescProcessingDone" must be called from now on (within this
 1182          * main-handler or later).
 1183          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1184          * but before calling "DescProcessingDone".
 1185          ********************************************************************************  */
 1186         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_OEM_VIN(DescMsgContext* pMsgContext)
 1187         {
 1188  1              INT8U i; 
 1189  1      
 1190  1              if (0x03 == pMsgContext->reqDataLen) 
 1191  1              { 
 1192  2                      if (0u == VCU_VehicleSpeed)
 1193  2                      {
 1194  3                              ReadString_v_g(descDataIdentifier.YEMA_VIN, VIN_VALUE_ADDRESS, VIN_VALUE_LENGTH);       
 1195  3      
 1196  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1197  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1198  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1199  3                              
 1200  3                              if(0x01 == descDataIdentifier.YEMA_VIN[VIN_VALUE_LENGTH - 1])
 1201  3                              {
 1202  4                                      for (i = 0u; i < (VIN_VALUE_LENGTH - 1); i++)
 1203  4                                      {
 1204  5                                              pMsgContext->resData[i + 3] = descDataIdentifier.YEMA_VIN[i];
 1205  5                                      }
 1206  4                              }
 1207  3                              else
 1208  3                              {
 1209  4                                      for (i = 0u; i < (VIN_VALUE_LENGTH - 1); i++)
 1210  4                                      {
 1211  5                                              pMsgContext->resData[i + 3] = 0xFF;
 1212  5                                      }
 1213  4                              }
 1214  3                              
 1215  3                              pMsgContext->resDataLen = (VIN_VALUE_LENGTH - 1) + 3u;
 1216  3                              CanTx_descResMsgSendEnable();
 1217  3                      }
 1218  2                      else
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 21  

 1219  2                      {
 1220  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1221  3                      } 
 1222  2              }
 1223  1              else
 1224  1              {
 1225  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1226  2              }
 1227  1      }
 1228                 
 1229         /*  ********************************************************************************
 1230          * Function name:ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber (Service request header:$22 $F1 $9
             -3 )
 1231          * Description: not available 
 1232          * Returns:  nothing
 1233          * Parameter(s):
 1234          *   - pMsgContext->reqData:
 1235          *       - Points to the first service request data byte.
 1236          *       - Access type: read
 1237          *   - pMsgContext->resData:
 1238          *       - Points to the first writeable byte for the service response data.
 1239          *       - Access type: read/write
 1240          *   - pMsgContext->reqDataLen:
 1241          *       - Contains the count of the service request data bytes (Sid is excluded).
 1242          *       - Access type: read
 1243          *   - pMsgContext->resDataLen:
 1244          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1245          *       - Access type: read/write
 1246          *   - pMsgContext->msgAddInfo.reqType:
 1247          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1248          *       - Access type: read
 1249          *   - pMsgContext->msgAddInfo.resOnReq:
 1250          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1251          *       - Access type: read/write
 1252          *   - pMsgContext->msgAddInfo.suppPosRes:
 1253          *       - UDS only!If set no positive response will be sent on this request.
 1254          *       - Access type: read
 1255          * Particularitie(s) and limitation(s):
 1256          *   - The function "DescProcessingDone" must be called from now on (within this
 1257          * main-handler or later).
 1258          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1259          * but before calling "DescProcessingDone".
 1260          ********************************************************************************  */
 1261         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_HardwareVersionNumber(DescMsgContext* pMsgContext)
 1262         {
 1263  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1264  1              /* Contains no request data */
 1265  1              /* Dummy example of how to write the response data. */
 1266  1      
 1267  1              INT8U i; 
 1268  1      
 1269  1              if (0x03 == pMsgContext->reqDataLen)
 1270  1              {
 1271  2                      if (0u == VCU_VehicleSpeed)
 1272  2                      {
 1273  3                              pMsgContext->resDataLen = sizeof(SystemHardwareVersionDataIdentifier) + 3u;     
 1274  3      
 1275  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1276  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1277  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1278  3                              
 1279  3                              for (i=0u; i<sizeof(SystemHardwareVersionDataIdentifier); i++)
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 22  

 1280  3                              {
 1281  4                                      pMsgContext->resData[i+3] = SystemHardwareVersionDataIdentifier[i];                                     
 1282  4                              }
 1283  3                              CanTx_descResMsgSendEnable();                           
 1284  3                      }
 1285  2                      else
 1286  2                      {
 1287  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 1288  3                      } 
 1289  2              }
 1290  1              else
 1291  1              {
 1292  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1293  2              }
 1294  1      }
 1295         
 1296         /*  ********************************************************************************
 1297          * Function name:ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber (Service request header:$22 $F1 $9
             -5 )
 1298          * Description: not available 
 1299          * Returns:  nothing
 1300          * Parameter(s):
 1301          *   - pMsgContext->reqData:
 1302          *       - Points to the first service request data byte.
 1303          *       - Access type: read
 1304          *   - pMsgContext->resData:
 1305          *       - Points to the first writeable byte for the service response data.
 1306          *       - Access type: read/write
 1307          *   - pMsgContext->reqDataLen:
 1308          *       - Contains the count of the service request data bytes (Sid is excluded).
 1309          *       - Access type: read
 1310          *   - pMsgContext->resDataLen:
 1311          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1312          *       - Access type: read/write
 1313          *   - pMsgContext->msgAddInfo.reqType:
 1314          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1315          *       - Access type: read
 1316          *   - pMsgContext->msgAddInfo.resOnReq:
 1317          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1318          *       - Access type: read/write
 1319          *   - pMsgContext->msgAddInfo.suppPosRes:
 1320          *       - UDS only!If set no positive response will be sent on this request.
 1321          *       - Access type: read
 1322          * Particularitie(s) and limitation(s):
 1323          *   - The function "DescProcessingDone" must be called from now on (within this
 1324          * main-handler or later).
 1325          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1326          * but before calling "DescProcessingDone".
 1327          ********************************************************************************  */
 1328         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_ECU_SoftwareVersionNumber(DescMsgContext* pMsgContext)
 1329         {
 1330  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1331  1              /* Contains no request data */
 1332  1              /* Dummy example of how to write the response data. */
 1333  1      
 1334  1              INT8U i; 
 1335  1              
 1336  1              if (0x03 == pMsgContext->reqDataLen) 
 1337  1              { 
 1338  2                      if (0u == VCU_VehicleSpeed)
 1339  2                      {
 1340  3                              pMsgContext->resDataLen = sizeof(SystemSoftwareVersionDataIdentifier) + 3u;     
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 23  

 1341  3      
 1342  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1343  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1344  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1345  3                              
 1346  3                              for (i = 0u; i < sizeof(SystemSoftwareVersionDataIdentifier); i++)
 1347  3                              {
 1348  4                                      pMsgContext->resData[i+3] = SystemSoftwareVersionDataIdentifier[i];
 1349  4                              }
 1350  3                              CanTx_descResMsgSendEnable();
 1351  3                      }
 1352  2                      else
 1353  2                      {
 1354  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1355  3                      } 
 1356  2              }
 1357  1              else
 1358  1              {
 1359  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1360  2              }
 1361  1      }
 1362         
 1363         /*  ********************************************************************************
 1364          * Function name:ApplDescReadByDataIdentifier_SystemNameDataNumber (Service request header:$22 $F1 $97 )
 1365          * Description: not available 
 1366          * Returns:  nothing
 1367          * Parameter(s):
 1368          *   - pMsgContext->reqData:
 1369          *       - Points to the first service request data byte.
 1370          *       - Access type: read
 1371          *   - pMsgContext->resData:
 1372          *       - Points to the first writeable byte for the service response data.
 1373          *       - Access type: read/write
 1374          *   - pMsgContext->reqDataLen:
 1375          *       - Contains the count of the service request data bytes (Sid is excluded).
 1376          *       - Access type: read
 1377          *   - pMsgContext->resDataLen:
 1378          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1379          *       - Access type: read/write
 1380          *   - pMsgContext->msgAddInfo.reqType:
 1381          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1382          *       - Access type: read
 1383          *   - pMsgContext->msgAddInfo.resOnReq:
 1384          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1385          *       - Access type: read/write
 1386          *   - pMsgContext->msgAddInfo.suppPosRes:
 1387          *       - UDS only!If set no positive response will be sent on this request.
 1388          *       - Access type: read
 1389          * Particularitie(s) and limitation(s):
 1390          *   - The function "DescProcessingDone" must be called from now on (within this
 1391          * main-handler or later).
 1392          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1393          * but before calling "DescProcessingDone".
 1394          ********************************************************************************  */
 1395         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_SystemNameDataNumber(DescMsgContext* pMsgContext)
 1396         {
 1397  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 1398  1              /* Contains no request data */
 1399  1              /* Dummy example of how to write the response data. */
 1400  1      
 1401  1              INT8U i; 
 1402  1      
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 24  

 1403  1              if (0x03 == pMsgContext->reqDataLen) 
 1404  1              { 
 1405  2                      if (0u == VCU_VehicleSpeed)
 1406  2                      {
 1407  3                              pMsgContext->resDataLen = sizeof(SystemNameDataIdentifier) + 3u;
 1408  3      
 1409  3                              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1410  3                              pMsgContext->resData[1] = pMsgContext->reqData[1];
 1411  3                              pMsgContext->resData[2] = pMsgContext->reqData[2];
 1412  3                              
 1413  3                              /* First data frame */
 1414  3                              for (i=0u; i<sizeof(SystemNameDataIdentifier); i++)
 1415  3                              {
 1416  4                                      pMsgContext->resData[i+3] = SystemNameDataIdentifier[i];
 1417  4                              }
 1418  3                              CanTx_descResMsgSendEnable();
 1419  3                      }
 1420  2                      else
 1421  2                      {
 1422  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 1423  3                      } 
 1424  2              }
 1425  1              else
 1426  1              {
 1427  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1428  2              }
 1429  1      }
 1430         
 1431         
 1432         /*  ********************************************************************************
 1433          * Function name:ApplDescSimulateAdcData (Service request header:$22 $66 $66 )
 1434          * Description: not available 
 1435          * Returns:  nothing
 1436          * Parameter(s):
 1437          *   - pMsgContext->reqData:
 1438          *       - Points to the first service request data byte.
 1439          *       - Access type: read
 1440          *   - pMsgContext->resData:
 1441          *       - Points to the first writeable byte for the service response data.
 1442          *       - Access type: read/write
 1443          *   - pMsgContext->reqDataLen:
 1444          *       - Contains the count of the service request data bytes (Sid is excluded).
 1445          *       - Access type: read
 1446          *   - pMsgContext->resDataLen:
 1447          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1448          *       - Access type: read/write
 1449          *   - pMsgContext->msgAddInfo.reqType:
 1450          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1451          *       - Access type: read
 1452          *   - pMsgContext->msgAddInfo.resOnReq:
 1453          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1454          *       - Access type: read/write
 1455          *   - pMsgContext->msgAddInfo.suppPosRes:
 1456          *       - UDS only!If set no positive response will be sent on this request.
 1457          *       - Access type: read
 1458          * Particularitie(s) and limitation(s):
 1459          *   - The function "DescProcessingDone" must be called from now on (within this
 1460          * main-handler or later).
 1461          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1462          * but before calling "DescProcessingDone".
 1463          ********************************************************************************  */
 1464         DESC_SERVICE_STAT void ApplDescSimulateAdcData(DescMsgContext* pMsgContext)
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 25  

 1465         {
 1466  1      
 1467  1              if ((7 == pMsgContext->reqDataLen)
 1468  1                      && (pMsgContext->reqData[4] < 15))
 1469  1              {
 1470  2                      if (0x01 == pMsgContext->reqData[3])
 1471  2                      {
 1472  3                              g_adcSimulateDataFlag = TRUE;
 1473  3                              
 1474  3                              g_adcSimulateDataIndex = pMsgContext->reqData[4];// adc channel index
 1475  3                              g_adcSimulateData = (pMsgContext->reqData[5] << 8) | pMsgContext->reqData[6];// adc channel data
 1476  3                      }
 1477  2                      else
 1478  2                      {
 1479  3                              g_adcSimulateDataFlag = FALSE;
 1480  3                              g_adcSimulateDataIndex = 0;
 1481  3                              g_adcSimulateData = 0;
 1482  3                      }
 1483  2                      pMsgContext->resDataLen = 0x03;         
 1484  2                      DescSetPosResponse(pMsgContext);
 1485  2              }
 1486  1              else
 1487  1              {
 1488  2              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1489  2              }
 1490  1      }
 1491         
 1492         
 1493         /*  ********************************************************************************
 1494          * Function name:ApplDescReadByDataIdentifier_EepromData (Service request header:$22 $66 $67 )
 1495          * Description: not available 
 1496          * Returns:  nothing
 1497          * Parameter(s):
 1498          *   - pMsgContext->reqData:
 1499          *       - Points to the first service request data byte.
 1500          *       - Access type: read
 1501          *   - pMsgContext->resData:
 1502          *       - Points to the first writeable byte for the service response data.
 1503          *       - Access type: read/write
 1504          *   - pMsgContext->reqDataLen:
 1505          *       - Contains the count of the service request data bytes (Sid is excluded).
 1506          *       - Access type: read
 1507          *   - pMsgContext->resDataLen:
 1508          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1509          *       - Access type: read/write
 1510          *   - pMsgContext->msgAddInfo.reqType:
 1511          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1512          *       - Access type: read
 1513          *   - pMsgContext->msgAddInfo.resOnReq:
 1514          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1515          *       - Access type: read/write
 1516          *   - pMsgContext->msgAddInfo.suppPosRes:
 1517          *       - UDS only!If set no positive response will be sent on this request.
 1518          *       - Access type: read
 1519          * Particularitie(s) and limitation(s):
 1520          *   - The function "DescProcessingDone" must be called from now on (within this
 1521          * main-handler or later).
 1522          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1523          * but before calling "DescProcessingDone".
 1524          ********************************************************************************  */
 1525         DESC_SERVICE_STAT void ApplDescReadByDataIdentifier_EepromData(DescMsgContext* pMsgContext)
 1526         {
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 26  

 1527  1              INT8U i;
 1528  1              INT16U eepromDataLength = 0;
 1529  1              INT32U eepromDataAddress = 0;
 1530  1              INT8U dataBuffer[256] = {0};
 1531  1              
 1532  1              if (6 == pMsgContext->reqDataLen)
 1533  1              {
 1534  2                      eepromDataAddress = ((INT32U)0xC40000) | ((INT32U)pMsgContext->reqData[3] << 8) | ((INT32U)pMsgContext->
             -reqData[4]);
 1535  2                      eepromDataLength = pMsgContext->reqData[5];
 1536  2                      ReadString_v_g(dataBuffer, eepromDataAddress, eepromDataLength);
 1537  2      
 1538  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1539  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1540  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1541  2                      pMsgContext->resDataLen = eepromDataLength + 3u;
 1542  2                      
 1543  2                      for (i = 0u; i < eepromDataLength; i++)
 1544  2                      {
 1545  3                              pMsgContext->resData[i + 3] = dataBuffer[i];
 1546  3                      }
 1547  2                      CanTx_descResMsgSendEnable();
 1548  2              }
 1549  1              else
 1550  1              {
 1551  2              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1552  2              }
 1553  1      }
 1554         
 1555         /*  ********************************************************************************
 1556          * Function name:ApplDescReadDataByIdentifier_Pedal_Cylinder_Data (Service request header:$22 $22 $01 )
 1557          * Description: not available 
 1558          * Returns:  nothing
 1559          * Parameter(s):
 1560          *   - pMsgContext->reqData:
 1561          *       - Points to the first service request data byte.
 1562          *       - Access type: read
 1563          *   - pMsgContext->resData:
 1564          *       - Points to the first writeable byte for the service response data.
 1565          *       - Access type: read/write
 1566          *   - pMsgContext->reqDataLen:
 1567          *       - Contains the count of the service request data bytes (Sid is excluded).
 1568          *       - Access type: read
 1569          *   - pMsgContext->resDataLen:
 1570          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1571          *       - Access type: read/write
 1572          *   - pMsgContext->msgAddInfo.reqType:
 1573          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1574          *       - Access type: read
 1575          *   - pMsgContext->msgAddInfo.resOnReq:
 1576          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1577          *       - Access type: read/write
 1578          *   - pMsgContext->msgAddInfo.suppPosRes:
 1579          *       - UDS only!If set no positive response will be sent on this request.
 1580          *       - Access type: read
 1581          * Particularitie(s) and limitation(s):
 1582          *   - The function "DescProcessingDone" must be called from now on (within this
 1583          * main-handler or later).
 1584          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1585          * but before calling "DescProcessingDone".
 1586          ********************************************************************************  */
 1587         DESC_SERVICE_STAT void ApplDescReadDataByIdentifier_Pedal_Cylinder_Data(DescMsgContext* pMsgContext)
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 27  

 1588         {
 1589  1              const T_ADC *ptr_adc = Adc_SampleData();
 1590  1              
 1591  1              if (3 == pMsgContext->reqDataLen)
 1592  1              {
 1593  2                      pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 1594  2                      pMsgContext->resData[1] = pMsgContext->reqData[1];
 1595  2                      pMsgContext->resData[2] = pMsgContext->reqData[2];
 1596  2      
 1597  2                      pMsgContext->resData[3] = (INT8U)(g_brakePedalInitLocationValue >> 8);
 1598  2                      pMsgContext->resData[4] = (INT8U)(g_brakePedalInitLocationValue);
 1599  2                      pMsgContext->resData[5] = (INT8U)(ptr_adc->brakePedalTrip_Adc[0] >> 8);
 1600  2                      pMsgContext->resData[6] = (INT8U)(ptr_adc->brakePedalTrip_Adc[0]);
 1601  2                      
 1602  2                      pMsgContext->resData[7] = (INT8U)(g_cylinderInitLocationValue >> 8);
 1603  2                      pMsgContext->resData[8] = (INT8U)(g_cylinderInitLocationValue);
 1604  2                      pMsgContext->resData[9] = (INT8U)(ptr_adc->mainCylinderTrip_Adc[0] >> 8);
 1605  2                      pMsgContext->resData[10] = (INT8U)(ptr_adc->mainCylinderTrip_Adc[0]);
 1606  2                      
 1607  2                      pMsgContext->resDataLen = 8u + 3u;
 1608  2                      
 1609  2                      CanTx_descResMsgSendEnable();
 1610  2              }
 1611  1              else
 1612  1              {
 1613  2              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 1614  2              }
 1615  1      }
 1616         
 1617         
 1618         
 1619         /*  ********************************************************************************
 1620          * Function name:ApplDescReadMemoryByAddress (Service request header:$23 $24 )
 1621          * Description: not available 
 1622          * Returns:  nothing
 1623          * Parameter(s):
 1624          *   - pMsgContext->reqData:
 1625          *       - Points to the first service request data byte.
 1626          *       - Access type: read
 1627          *   - pMsgContext->resData:
 1628          *       - Points to the first writeable byte for the service response data.
 1629          *       - Access type: read/write
 1630          *   - pMsgContext->reqDataLen:
 1631          *       - Contains the count of the service request data bytes (Sid is excluded).
 1632          *       - Access type: read
 1633          *   - pMsgContext->resDataLen:
 1634          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 1635          *       - Access type: read/write
 1636          *   - pMsgContext->msgAddInfo.reqType:
 1637          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 1638          *       - Access type: read
 1639          *   - pMsgContext->msgAddInfo.resOnReq:
 1640          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 1641          *       - Access type: read/write
 1642          *   - pMsgContext->msgAddInfo.suppPosRes:
 1643          *       - UDS only!If set no positive response will be sent on this request.
 1644          *       - Access type: read
 1645          * Particularitie(s) and limitation(s):
 1646          *   - The function "DescProcessingDone" must be called from now on (within this
 1647          * main-handler or later).
 1648          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 1649          * but before calling "DescProcessingDone".
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 28  

 1650          ********************************************************************************  */
 1651         DESC_SERVICE_STAT void ApplDescReadMemoryByAddress(DescMsgContext* pMsgContext)
 1652         {
 1653  1      #if (kDescEnableService23_ReadMemoryByAddress == 1)
 1654  1      
 1655  1              if (0x08 == pMsgContext->reqDataLen)
 1656  1              {
 1657  2                      if (0u == VCU_VehicleSpeed)
 1658  2                      {
 1659  3                              if (1) // TODO: Check request out of range
 1660  3                              {
 1661  4                                      /* Check address invalid, request memory size invalid 
 1662  4                                       * and addressAndLengthFormatIdentifier invalid. */
 1663  4                              }
 1664  3                              else
 1665  3                              {
 1666  4                                      DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                             
 1667  4                              }
 1668  3                      }
 1669  2                      else
 1670  2                      {
 1671  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);          
 1672  3                      }
 1673  2              }
 1674  1              else
 1675  1              {
 1676  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1677  2              }
 1678  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);     
              
                      DescProcessingDone();
              #endif
 1683  1      }
 1684         
 1685         /*  ********************************************************************************
 1686          * Function name:ApplDescOemGetLevel_1_RequestSeed (Service request header:$27 $01 )
 1687          * Description:Manages the security get seed function.
 1688          * Returns:  nothing
 1689          * Parameter(s):
 1690          *   - pMsgContext:
 1691          *       - Contains all request properties.
 1692          *       - Access type: read/write
 1693          * Particularitie(s) and limitation(s): none
 1694          ********************************************************************************  */
 1695         DESC_SERVICE_STAT void ApplDescOemGetLevel_1_RequestSeed(DescMsgContext* pMsgContext)
 1696         {
 1697  1      #if (kDescEnableService27_Level1 == 1)
 1698  1      
 1699  1              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);     
 1700  1      
 1701  1              if (0x02 == pMsgContext->reqDataLen) 
 1702  1              {
 1703  2                      if (0u == VCU_VehicleSpeed)
 1704  2                      {
 1705  3                              /* When dalay timer active receive the request, send NRC */
 1706  3                              descSecurityRandSeedLevel1 = rand();
 1707  3                      
 1708  3                              if (1) // TODO:Delay timer arrive
 1709  3                              {
 1710  4                                      pMsgContext->resDataLen = 6u;
 1711  4                                      pMsgContext->reqData[2] = (INT8U)((descSecurityRandSeedLevel1 & 0xFF000000) >> 24u);
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 29  

 1712  4      
 1713  4                                      pMsgContext->resData[3] = (INT8U)((descSecurityRandSeedLevel1 & 0x00FF0000) >> 16u);
 1714  4                                      pMsgContext->resData[4] = (INT8U)((descSecurityRandSeedLevel1 & 0x0000FF00) >> 8u);
 1715  4                                      pMsgContext->resData[5] = (INT8U)(descSecurityRandSeedLevel1 & 0x000000FF);
 1716  4      
 1717  4                                      descSecurityAccessRequestSeedLevelFlag_1 = TRUE;
 1718  4                                      
 1719  4                                      DescSetPosResponse(pMsgContext);
 1720  4                              }
 1721  3                              else
 1722  3                              {
 1723  4                                      descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
 1724  4      
 1725  4                                      DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                           
 1726  4                              }
 1727  3                      }
 1728  2                      else
 1729  2                      {
 1730  3                              descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
 1731  3      
 1732  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                          
 1733  3                      }
 1734  2              }
 1735  1              else
 1736  1              {
 1737  2                      descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
 1738  2      
 1739  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1740  2              }
 1741  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);     
              
                      DescProcessingDone();
              #endif
 1746  1      }
 1747         
 1748         /*  ********************************************************************************
 1749          * Function name:ApplDescOemSendLevel_1_SendKey (Service request header:$27 $02 )
 1750          * Description:Manages the security send key function.
 1751          * Returns:  nothing
 1752          * Parameter(s):
 1753          *   - pMsgContext:
 1754          *       - Contains all request properties.
 1755          *       - Access type: read/write
 1756          * Particularitie(s) and limitation(s): none
 1757          ********************************************************************************  */
 1758         DESC_SERVICE_STAT void ApplDescOemSendLevel_1_SendKey(DescMsgContext* pMsgContext)
 1759         {
 1760  1      #if (kDescEnableService27_Level1 == 1)
 1761  1      
 1762  1              if (0x04 == pMsgContext->reqDataLen) 
 1763  1              {
 1764  2                      if (0u == VCU_VehicleSpeed)
 1765  2                      {
 1766  3                              /* When dalay timer active receive the request, send NRC */
 1767  3                              if (1) // TODO:Delay timer arrive
 1768  3                              {
 1769  4                                      if (TRUE == descSecurityAccessRequestSeedLevelFlag_1)
 1770  4                                      {
 1771  5                                              descSendSecurityKeyLevel1 = seedToKey(descSecurityRandSeedLevel1, SecurityAccessMaskLevel_1);
 1772  5      
 1773  5                                              pMsgContext->resDataLen = 6u;
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 30  

 1774  5                                              pMsgContext->reqData[2] = (INT8U)((descSendSecurityKeyLevel1 & 0xFF000000) >> 24u);
 1775  5                                              
 1776  5                                              pMsgContext->resData[3] = (INT8U)((descSendSecurityKeyLevel1 & 0x00FF0000) >> 16u);
 1777  5                                              pMsgContext->resData[4] = (INT8U)((descSendSecurityKeyLevel1 & 0x0000FF00) >> 8u);
 1778  5                                              pMsgContext->resData[5] = (INT8U)(descSendSecurityKeyLevel1 & 0x000000FF);
 1779  5                                              
 1780  5                                              descSecurityAccessRequestSeedLevelFlag_1 = FALSE;
 1781  5                                              
 1782  5                                              DescSetStateSecurityAccess(kDescStateSecurityAccessLevel_1);
 1783  5                                              
 1784  5                                              DescSetPosResponse(pMsgContext);                                
 1785  5                                      }
 1786  4                                      else
 1787  4                                      {
 1788  5                                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1789  5                                              
 1790  5                                              DescSetNegResponse(pMsgContext, kDescNrcRequestSequenceError);                          
 1791  5                                      }
 1792  4                              }
 1793  3                              else
 1794  3                              {
 1795  4                                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1796  4                                      
 1797  4                                      DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                           
 1798  4                              }
 1799  3                      }
 1800  2                      else
 1801  2                      {
 1802  3                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1803  3      
 1804  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                          
 1805  3                      }
 1806  2              }
 1807  1              else
 1808  1              {
 1809  2                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1810  2      
 1811  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 1812  2              }
 1813  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
              
                      DescProcessingDone();
              #endif
 1818  1      }
 1819         
 1820         /*  ********************************************************************************
 1821          * Function name:ApplDescOemGetLevel_2_RequestSeed (Service request header:$27 $09 )
 1822          * Description:Manages the security get seed function.
 1823          * Returns:  nothing
 1824          * Parameter(s):
 1825          *   - pMsgContext:
 1826          *       - Contains all request properties.
 1827          *       - Access type: read/write
 1828          * Particularitie(s) and limitation(s): none
 1829          ********************************************************************************  */
 1830         DESC_SERVICE_STAT void ApplDescOemGetLevel_2_RequestSeed(DescMsgContext* pMsgContext)
 1831         {
 1832  1      #if (kDescEnableService27_Level2 == 1)
 1833  1      
 1834  1              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1835  1      
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 31  

 1836  1              if (0x02 == pMsgContext->reqDataLen) 
 1837  1              {
 1838  2                      if (0u == VCU_VehicleSpeed)
 1839  2                      {
 1840  3                              /* When dalay timer active receive the request, send NRC */
 1841  3                              descSecurityRandSeedLevel2 = rand();
 1842  3                              
 1843  3                              if (1) // TODO:Delay timer arrive
 1844  3                              {
 1845  4                                      pMsgContext->resDataLen = 6u;
 1846  4                                      pMsgContext->reqData[2] = (INT8U)((descSecurityRandSeedLevel2 & 0xFF000000) >> 24u);
 1847  4      
 1848  4                                      pMsgContext->resData[3] = (INT8U)((descSecurityRandSeedLevel2 & 0x00FF0000) >> 16u);
 1849  4                                      pMsgContext->resData[4] = (INT8U)((descSecurityRandSeedLevel2 & 0x0000FF00) >> 8u);
 1850  4                                      pMsgContext->resData[5] = (INT8U)(descSecurityRandSeedLevel2 & 0x000000FF);
 1851  4      
 1852  4                                      descSecurityAccessRequestSeedLevelFlag_2 = TRUE;
 1853  4                                      
 1854  4                                      DescSetPosResponse(pMsgContext);
 1855  4                              }
 1856  3                              else
 1857  3                              {
 1858  4                                      descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
 1859  4      
 1860  4                                      DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                                   
 1861  4                              }
 1862  3                      }
 1863  2                      else
 1864  2                      {
 1865  3                              descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
 1866  3      
 1867  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
 1868  3                      }
 1869  2              }
 1870  1              else
 1871  1              {
 1872  2                      descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
 1873  2      
 1874  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1875  2              }
 1876  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
              
                      DescProcessingDone();
              #endif
 1881  1      }
 1882         
 1883         /*  ********************************************************************************
 1884          * Function name:ApplDescOemSendLevel_2_SendKey (Service request header:$27 $0A )
 1885          * Description:Manages the security send key function.
 1886          * Returns:  nothing
 1887          * Parameter(s):
 1888          *   - pMsgContext:
 1889          *       - Contains all request properties.
 1890          *       - Access type: read/write
 1891          * Particularitie(s) and limitation(s): none
 1892          ********************************************************************************  */
 1893         DESC_SERVICE_STAT void ApplDescOemSendLevel_2_SendKey(DescMsgContext* pMsgContext)
 1894         {
 1895  1      #if (kDescEnableService27_Level2 == 1)
 1896  1      
 1897  1              if (0x04 == pMsgContext->reqDataLen) 
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 32  

 1898  1              {
 1899  2                      if (0u == VCU_VehicleSpeed)
 1900  2                      {
 1901  3                              /* When dalay timer active receive the request, send NRC */
 1902  3                              if (1) // TODO:Delay timer arrive
 1903  3                              {
 1904  4                                      if (TRUE == descSecurityAccessRequestSeedLevelFlag_2)
 1905  4                                      {
 1906  5                                              descSendSecurityKeyLevel2 = seedToKey(descSecurityRandSeedLevel2, SecurityAccessMaskLevel_2);
 1907  5      
 1908  5                                              pMsgContext->resDataLen = 6u;
 1909  5                                              pMsgContext->reqData[2] = (INT8U)((descSendSecurityKeyLevel2 & 0xFF000000) >> 24u);
 1910  5                                              
 1911  5                                              pMsgContext->resData[3] = (INT8U)((descSendSecurityKeyLevel2 & 0x00FF0000) >> 16u);
 1912  5                                              pMsgContext->resData[4] = (INT8U)((descSendSecurityKeyLevel2 & 0x0000FF00) >> 8u);
 1913  5                                              pMsgContext->resData[5] = (INT8U)(descSendSecurityKeyLevel2 & 0x000000FF);
 1914  5                                              
 1915  5                                              descSecurityAccessRequestSeedLevelFlag_2 = FALSE;
 1916  5                                              
 1917  5                                              DescSetStateSecurityAccess(kDescStateSecurityAccessLevel_1);
 1918  5                                              
 1919  5                                              DescSetPosResponse(pMsgContext);                                
 1920  5                                      }
 1921  4                                      else
 1922  4                                      {
 1923  5                                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1924  5      
 1925  5                                              DescSetNegResponse(pMsgContext, kDescNrcRequestSequenceError);                                  
 1926  5                                      }
 1927  4      
 1928  4                              }
 1929  3                              else
 1930  3                              {
 1931  4                                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1932  4              
 1933  4                                      DescSetNegResponse(pMsgContext, kDescNrcTimeDelayNotExpired);                           
 1934  4                              }
 1935  3                      }
 1936  2                      else
 1937  2                      {
 1938  3                              DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1939  3      
 1940  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
 1941  3                      }
 1942  2              }
 1943  1              else
 1944  1              {
 1945  2                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
 1946  2      
 1947  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 1948  2              }
 1949  1      #else
                      DescSetStateSecurityAccess(kDescStateSecurityAccessLocked);
              
              #endif
 1953  1      }
 1954         
 1955         /*  ********************************************************************************
 1956          * Function name:ApplDescOemCommCtrlEnableRxEnableTx (Service request header:$28 $00 )
 1957          * Description: not available 
 1958          * Returns:  nothing
 1959          * Parameter(s):
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 33  

 1960          *   - pMsgContext:
 1961          *       - Contains all request properties.
 1962          *       - Access type: read/write
 1963          * Particularitie(s) and limitation(s): none
 1964          ********************************************************************************  */
 1965         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxEnableTx(DescMsgContext* pMsgContext)
 1966         {
 1967  1      #if (kDescEnableService28_RxTxAllCtrl == 1)
 1968  1      
 1969  1              if (3u == pMsgContext->reqDataLen) 
 1970  1              {
 1971  2                      if (0u == VCU_VehicleSpeed)
 1972  2                      {
 1973  3                              switch (pMsgContext->reqData[2])
 1974  3                              {
 1975  4                                      case 0x01:
 1976  4                                              // normal communication messages
 1977  4                                              descApplFrameRxEnable = TRUE;
 1978  4                                              descApplFrameTxEnable = TRUE;
 1979  4      
 1980  4                                              pMsgContext->resDataLen = 3u;
 1981  4                                              DescSetPosResponse(pMsgContext);
 1982  4                                              break;
 1983  4      
 1984  4                                      case 0x02:
 1985  4                                              // network management communication messages
 1986  4                                              descNmFrameRxEnable = TRUE;
 1987  4                                              descNmFrameTxEnable = TRUE;
 1988  4      
 1989  4                                              pMsgContext->resDataLen = 3u;                                   
 1990  4                                              DescSetPosResponse(pMsgContext);                                
 1991  4                                              break;
 1992  4      
 1993  4                                      case 0x03:
 1994  4                                              // network management communication messages and normal communication messages
 1995  4                                              descNmFrameRxEnable = TRUE;
 1996  4                                              descNmFrameTxEnable = TRUE;
 1997  4      
 1998  4                                              descApplFrameRxEnable = TRUE;
 1999  4                                              descApplFrameTxEnable = TRUE;
 2000  4      
 2001  4                                              pMsgContext->resDataLen = 3u;
 2002  4                                              DescSetPosResponse(pMsgContext);                                
 2003  4                                              break;
 2004  4      
 2005  4                                      default:
 2006  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                     
 2007  4                                              break;
 2008  4                              }
 2009  3                      }
 2010  2                      else
 2011  2                      {
 2012  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 2013  3                      }
 2014  2              }
 2015  1              else
 2016  1              {
 2017  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2018  2              }
 2019  1      #else
                      DescProcessingDone();
              #endif
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 34  

 2022  1      }
 2023         
 2024         /*  ********************************************************************************
 2025          * Function name:ApplDescOemCommCtrlEnableRxDisableTx (Service request header:$28 $01 )
 2026          * Description: not available 
 2027          * Returns:  nothing
 2028          * Parameter(s):
 2029          *   - pMsgContext:
 2030          *       - Contains all request properties.
 2031          *       - Access type: read/write
 2032          * Particularitie(s) and limitation(s): none
 2033          ********************************************************************************  */
 2034         DESC_SERVICE_STAT void ApplDescOemCommCtrlEnableRxDisableTx(DescMsgContext* pMsgContext)
 2035         {
 2036  1      #if (kDescEnableService28_RxTxDivideCtrl == 1)
 2037  1      
 2038  1              if (3u == pMsgContext->reqDataLen) 
 2039  1              {
 2040  2                      if (0u == VCU_VehicleSpeed)
 2041  2                      {
 2042  3                              switch (pMsgContext->reqData[2])
 2043  3                              {
 2044  4                                      case 0x01:
 2045  4                                              // normal communication messages
 2046  4                                              descApplFrameRxEnable = TRUE;
 2047  4                                              descApplFrameTxEnable = FALSE;
 2048  4      
 2049  4                                              pMsgContext->resDataLen = 3u;
 2050  4                                              DescSetPosResponse(pMsgContext);
 2051  4                                              break;
 2052  4      
 2053  4                                      case 0x02:
 2054  4                                              // network management communication messages
 2055  4                                              descNmFrameRxEnable = TRUE;
 2056  4                                              descNmFrameTxEnable = FALSE;                                    
 2057  4      
 2058  4                                              pMsgContext->resDataLen = 3u;
 2059  4                                              DescSetPosResponse(pMsgContext);                                
 2060  4                                              break;
 2061  4      
 2062  4                                      case 0x03:
 2063  4                                              // network management communication messages and normal communication messages
 2064  4                                              descNmFrameRxEnable = TRUE;
 2065  4                                              descNmFrameTxEnable = FALSE;                                            
 2066  4                                              
 2067  4                                              descApplFrameRxEnable = TRUE;
 2068  4                                              descApplFrameTxEnable = FALSE;
 2069  4      
 2070  4                                              pMsgContext->resDataLen = 3u;                                   
 2071  4                                              DescSetPosResponse(pMsgContext);                                
 2072  4                                              break;
 2073  4      
 2074  4                                      default:
 2075  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                             
 2076  4                                              break;
 2077  4                              }
 2078  3                      }
 2079  2                      else
 2080  2                      {
 2081  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 2082  3                      }
 2083  2              }
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 35  

 2084  1              else
 2085  1              {
 2086  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat); 
 2087  2              }
 2088  1      #else
                      DescProcessingDone();
              #endif
 2091  1      }
 2092         
 2093         /*  ********************************************************************************
 2094          * Function name:ApplDescOemCommCtrlDisableRxEnableTx (Service request header:$28 $02 )
 2095          * Description: not available 
 2096          * Returns:  nothing
 2097          * Parameter(s):
 2098          *   - pMsgContext:
 2099          *       - Contains all request properties.
 2100          *       - Access type: read/write
 2101          * Particularitie(s) and limitation(s): none
 2102          ********************************************************************************  */
 2103         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxEnableTx(DescMsgContext* pMsgContext)
 2104         {
 2105  1      #if (kDescEnableService28_RxTxDivideCtrl == 1)
 2106  1      
 2107  1              if (3u == pMsgContext->reqDataLen) 
 2108  1              {
 2109  2                      if (0u == VCU_VehicleSpeed)
 2110  2                      {
 2111  3                              switch (pMsgContext->reqData[2])
 2112  3                              {
 2113  4                                      case 0x01:
 2114  4                                              // normal communication messages
 2115  4                                              descApplFrameRxEnable = FALSE;
 2116  4                                              descApplFrameTxEnable = TRUE;
 2117  4      
 2118  4                                              pMsgContext->resDataLen = 3u;
 2119  4                                              DescSetPosResponse(pMsgContext);                                        
 2120  4                                              break;
 2121  4      
 2122  4                                      case 0x02:
 2123  4                                              // network management communication messages
 2124  4                                              descNmFrameRxEnable = FALSE;
 2125  4                                              descNmFrameTxEnable = TRUE;
 2126  4      
 2127  4                                              pMsgContext->resDataLen = 3u;                                   
 2128  4                                              DescSetPosResponse(pMsgContext);                                
 2129  4                                              break;
 2130  4      
 2131  4                                      case 0x03:
 2132  4                                              // network management communication messages and normal communication messages
 2133  4                                              descNmFrameRxEnable = FALSE;
 2134  4                                              descNmFrameTxEnable = TRUE;                                     
 2135  4      
 2136  4                                              descApplFrameRxEnable = FALSE;
 2137  4                                              descApplFrameTxEnable = TRUE;
 2138  4      
 2139  4                                              pMsgContext->resDataLen = 3u;
 2140  4                                              DescSetPosResponse(pMsgContext);                                        
 2141  4                                              break;
 2142  4      
 2143  4                                      default:
 2144  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                     
 2145  4                                              break;
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 36  

 2146  4                              }
 2147  3                      }
 2148  2                      else
 2149  2                      {
 2150  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                  
 2151  3                      }
 2152  2              }
 2153  1              else
 2154  1              {
 2155  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2156  2              }
 2157  1      #else
                      DescProcessingDone();
              #endif
 2160  1      }
 2161         
 2162         /*  ********************************************************************************
 2163          * Function name:ApplDescOemCommCtrlDisableRxDisableTx (Service request header:$28 $03 )
 2164          * Description: not available 
 2165          * Returns:  nothing
 2166          * Parameter(s):
 2167          *   - pMsgContext:
 2168          *       - Contains all request properties.
 2169          *       - Access type: read/write
 2170          * Particularitie(s) and limitation(s): none
 2171          ********************************************************************************  */
 2172         DESC_SERVICE_STAT void ApplDescOemCommCtrlDisableRxDisableTx(DescMsgContext* pMsgContext)
 2173         {
 2174  1      #if (kDescEnableService28_RxTxAllCtrl == 1)
 2175  1      
 2176  1              if (3u == pMsgContext->reqDataLen) 
 2177  1              {
 2178  2                      if (0u == VCU_VehicleSpeed)
 2179  2                      {
 2180  3                              switch (pMsgContext->reqData[2])
 2181  3                              {
 2182  4                                      case 0x01:
 2183  4                                              // normal communication messages
 2184  4                                              descApplFrameRxEnable = FALSE;
 2185  4                                              descApplFrameTxEnable = FALSE;
 2186  4      
 2187  4                                              pMsgContext->resDataLen = 3u;
 2188  4                                              DescSetPosResponse(pMsgContext);                                        
 2189  4                                              break;
 2190  4      
 2191  4                                      case 0x02:
 2192  4                                              // network management communication messages
 2193  4                                              descNmFrameRxEnable = FALSE;
 2194  4                                              descNmFrameTxEnable = FALSE;
 2195  4      
 2196  4                                              pMsgContext->resDataLen = 3u;                                   
 2197  4                                              DescSetPosResponse(pMsgContext);                                
 2198  4                                              break;
 2199  4      
 2200  4                                      case 0x03:
 2201  4                                              // network management communication messages and normal communication messages
 2202  4                                              descNmFrameRxEnable = FALSE;
 2203  4                                              descNmFrameTxEnable = FALSE;
 2204  4                                              
 2205  4                                              descApplFrameRxEnable = FALSE;
 2206  4                                              descApplFrameTxEnable = FALSE;
 2207  4      
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 37  

 2208  4                                              pMsgContext->resDataLen = 3u;
 2209  4                                              DescSetPosResponse(pMsgContext);                                        
 2210  4                                              break;
 2211  4      
 2212  4                                      default:
 2213  4                                              DescSetNegResponse(pMsgContext, kDescNrcRequestOutOfRange);                                             
 2214  4                                              break;
 2215  4                              }
 2216  3                      }
 2217  2                      else
 2218  2                      {
 2219  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                                          
 2220  3                      }
 2221  2              }
 2222  1              else
 2223  1              {
 2224  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);         
 2225  2              }
 2226  1      #else
                      DescProcessingDone();
              #endif
 2229  1      }
 2230         
 2231         /*  ********************************************************************************
 2232          * Function name:ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate (Service request header:$2A $01 )
 2233          * Description: not available 
 2234          * Returns:  nothing
 2235          * Parameter(s):
 2236          *   - pMsgContext:
 2237          *       - Contains all request properties.
 2238          *       - Access type: read/write
 2239          * Particularitie(s) and limitation(s): none
 2240          ********************************************************************************  */
 2241         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtSlowRate(DescMsgContext* pMsgContext)
 2242         {
 2243  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2244  1              /* Dummy example how to access the request data. */
 2245  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2246  1              DescClearResData(pMsgContext);
 2247  1              DescProcessingDone();   
 2248  1      }
 2249         
 2250         /*  ********************************************************************************
 2251          * Function name:ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate (Service request header:$2A $02 )
 2252          * Description: not available 
 2253          * Returns:  nothing
 2254          * Parameter(s):
 2255          *   - pMsgContext:
 2256          *       - Contains all request properties.
 2257          *       - Access type: read/write
 2258          * Particularitie(s) and limitation(s): none
 2259          ********************************************************************************  */
 2260         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtMediumRate(DescMsgContext* pMsgContext)
 2261         {
 2262  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2263  1              /* Dummy example how to access the request data. */
 2264  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2265  1              DescClearResData(pMsgContext);
 2266  1              DescProcessingDone();   
 2267  1      }
 2268         
 2269         /*  ********************************************************************************
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 38  

 2270          * Function name:ApplDesReadDataByPeriodicIndentifier_SendAtFastRate (Service request header:$2A $03 )
 2271          * Description: not available 
 2272          * Returns:  nothing
 2273          * Parameter(s):
 2274          *   - pMsgContext:
 2275          *       - Contains all request properties.
 2276          *       - Access type: read/write
 2277          * Particularitie(s) and limitation(s): none
 2278          ********************************************************************************  */
 2279         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_SendAtFastRate(DescMsgContext* pMsgContext)
 2280         {
 2281  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2282  1              /* Dummy example how to access the request data. */
 2283  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2284  1              DescClearResData(pMsgContext);
 2285  1              DescProcessingDone();
 2286  1      }
 2287         
 2288         /*  ********************************************************************************
 2289          * Function name:ApplDesReadDataByPeriodicIndentifier_StopSending (Service request header:$2A $04 )
 2290          * Description: not available 
 2291          * Returns:  nothing
 2292          * Parameter(s):
 2293          *   - pMsgContext:
 2294          *       - Contains all request properties.
 2295          *       - Access type: read/write
 2296          * Particularitie(s) and limitation(s): none
 2297          ********************************************************************************  */
 2298         DESC_SERVICE_STAT void ApplDesReadDataByPeriodicIndentifier_StopSending(DescMsgContext* pMsgContext)
 2299         {
 2300  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2301  1              /* Dummy example how to access the request data. */
 2302  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2303  1              DescClearResData(pMsgContext);
 2304  1              DescProcessingDone();
 2305  1      }
 2306         
 2307         /*  ********************************************************************************
 2308          * Function name:ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier (Service request header:$2C $0
             -1 )
 2309          * Description: not available 
 2310          * Returns:  nothing
 2311          * Parameter(s):
 2312          *   - pMsgContext:
 2313          *       - Contains all request properties.
 2314          *       - Access type: read/write
 2315          * Particularitie(s) and limitation(s): none
 2316          ********************************************************************************  */
 2317         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_DefineByIdentifier(DescMsgContext* pMsgCont
             -ext)
 2318         {
 2319  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2320  1              /* Dummy example how to access the request data. */
 2321  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2322  1              DescClearResData(pMsgContext);
 2323  1              DescProcessingDone();           
 2324  1      }
 2325         
 2326         /*  ********************************************************************************
 2327          * Function name:ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier (Service req
             -uest header:$2C $03 )
 2328          * Description: not available 
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 39  

 2329          * Returns:  nothing
 2330          * Parameter(s):
 2331          *   - pMsgContext:
 2332          *       - Contains all request properties.
 2333          *       - Access type: read/write
 2334          * Particularitie(s) and limitation(s): none
 2335          ********************************************************************************  */
 2336         DESC_SERVICE_STAT void ApplDescDynamicallyDefineDataIdentifier_ClearDynamicallyDefineDataIdentifier(DescMs
             -gContext* pMsgContext)
 2337         {
 2338  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2339  1              /* Dummy example how to access the request data. */
 2340  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2341  1              DescClearResData(pMsgContext);
 2342  1              DescProcessingDone();           
 2343  1      }
 2344         
 2345         /*  ********************************************************************************
 2346          * Function name:ApplDescWriteByDataIdentifierOEM_VIN (Service request header:$2E $F1 $90 )
 2347          * Description: not available 
 2348          * Returns:  nothing
 2349          * Parameter(s):
 2350          *   - pMsgContext->reqData:
 2351          *       - Points to the first service request data byte.
 2352          *       - Access type: read
 2353          *   - pMsgContext->resData:
 2354          *       - Points to the first writeable byte for the service response data.
 2355          *       - Access type: read/write
 2356          *   - pMsgContext->reqDataLen:
 2357          *       - Contains the count of the service request data bytes (Sid is excluded).
 2358          *       - Access type: read
 2359          *   - pMsgContext->resDataLen:
 2360          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2361          *       - Access type: read/write
 2362          *   - pMsgContext->msgAddInfo.reqType:
 2363          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2364          *       - Access type: read
 2365          *   - pMsgContext->msgAddInfo.resOnReq:
 2366          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2367          *       - Access type: read/write
 2368          *   - pMsgContext->msgAddInfo.suppPosRes:
 2369          *       - UDS only!If set no positive response will be sent on this request.
 2370          *       - Access type: read
 2371          * Particularitie(s) and limitation(s):
 2372          *   - The function "DescProcessingDone" must be called from now on (within this
 2373          * main-handler or later).
 2374          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2375          * but before calling "DescProcessingDone".
 2376          ********************************************************************************  */
 2377         DESC_SERVICE_STAT void ApplDescWriteByDataIdentifierOEM_VIN(DescMsgContext* pMsgContext)
 2378         {
 2379  1              INT8U i = 0;
 2380  1              if (20u == pMsgContext->reqDataLen)
 2381  1              {
 2382  2                      if (0u == VCU_VehicleSpeed)
 2383  2                      {
 2384  3                              for(i = 0; i < 17; i++)
 2385  3                              {
 2386  4                                      descDataIdentifier.YEMA_VIN[i] = pMsgContext->reqData[i + 3];
 2387  4                              }
 2388  3                              descDataIdentifier.YEMA_VIN[17] = 0x01; //write flag
 2389  3      
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 40  

 2390  3                              CopyString_v_g(descDataIdentifier.YEMA_VIN, VIN_VALUE_ADDRESS, VIN_VALUE_LENGTH, 1);
 2391  3                              
 2392  3                              pMsgContext->resDataLen = 0x03;
 2393  3                              DescSetPosResponse(pMsgContext);
 2394  3                      }
 2395  2                      else
 2396  2                      {
 2397  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);
 2398  3                      }
 2399  2              }
 2400  1              else
 2401  1              {
 2402  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 2403  2              }
 2404  1      }
 2405         
 2406         
 2407         /*  ********************************************************************************
 2408          * Function name:ApplDescWriteEepromDataById_6668 (Service request header:$2E $66 $68 )
 2409          * Description: not available 
 2410          * Returns:  nothing
 2411          * Parameter(s):
 2412          *   - pMsgContext->reqData:
 2413          *       - Points to the first service request data byte.
 2414          *       - Access type: read
 2415          *   - pMsgContext->resData:
 2416          *       - Points to the first writeable byte for the service response data.
 2417          *       - Access type: read/write
 2418          *   - pMsgContext->reqDataLen:
 2419          *       - Contains the count of the service request data bytes (Sid is excluded).
 2420          *       - Access type: read
 2421          *   - pMsgContext->resDataLen:
 2422          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2423          *       - Access type: read/write
 2424          *   - pMsgContext->msgAddInfo.reqType:
 2425          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2426          *       - Access type: read
 2427          *   - pMsgContext->msgAddInfo.resOnReq:
 2428          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2429          *       - Access type: read/write
 2430          *   - pMsgContext->msgAddInfo.suppPosRes:
 2431          *       - UDS only!If set no positive response will be sent on this request.
 2432          *       - Access type: read
 2433          * Particularitie(s) and limitation(s):
 2434          *   - The function "DescProcessingDone" must be called from now on (within this
 2435          * main-handler or later).
 2436          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2437          * but before calling "DescProcessingDone".
 2438          ********************************************************************************  */
 2439         DESC_SERVICE_STAT void ApplDescWriteEepromDataById_6668(DescMsgContext* pMsgContext)
 2440         {
 2441  1              INT8U i = 0;
 2442  1              INT32U writeDataAddress = 0;
 2443  1              INT16U writeDataLength = 0;
 2444  1              INT8U writeDataBuffer[50] = 0;
 2445  1              
 2446  1              if (7u == pMsgContext->reqDataLen)
 2447  1              {
 2448  2                      writeDataAddress = (INT32U)0xC40000 | ((INT32U)pMsgContext->reqData[3]) << 8 | (INT32U)pMsgContext->reqD
             -ata[4];
 2449  2                      writeDataLength = pMsgContext->reqData[5];
 2450  2                      for(i = 0; i < sizeof(writeDataBuffer); i++)
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 41  

 2451  2                      {
 2452  3                              writeDataBuffer[i] = pMsgContext->reqData[6];
 2453  3                      }
 2454  2      
 2455  2                      if(LONG_TIME_BRAKE_ADDRESS == writeDataAddress)
 2456  2                      {
 2457  3                              g_longTimeBrakeCnt = 0;
 2458  3                      }
 2459  2                      
 2460  2                      CopyString_v_g(writeDataBuffer, writeDataAddress, writeDataLength, 1);
 2461  2                      pMsgContext->resDataLen = 3u;
 2462  2                      DescSetPosResponse(pMsgContext);
 2463  2              }
 2464  1              else
 2465  1              {
 2466  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 2467  2              }
 2468  1      }
 2469         
 2470         
 2471         DESC_SERVICE_STAT void ApplDescWritePedalCylinderDataById_2E01(DescMsgContext* pMsgContext)
 2472         {
 2473  1              if (7u == pMsgContext->reqDataLen)
 2474  1              {
 2475  2                      descDataIdentifier.pedalCylinderInitValue[0] = pMsgContext->reqData[3];
 2476  2                      descDataIdentifier.pedalCylinderInitValue[1] = pMsgContext->reqData[4];
 2477  2                      descDataIdentifier.pedalCylinderInitValue[2] = pMsgContext->reqData[5];
 2478  2                      descDataIdentifier.pedalCylinderInitValue[3] = pMsgContext->reqData[6];
 2479  2                      descDataIdentifier.pedalCylinderInitValue[4] = 0x01;
 2480  2                      CopyString_v_g(descDataIdentifier.pedalCylinderInitValue, PEDAL_CYLINDER_INIT_LOCATION_VALUE_ADDRESS, PE
             -DAL_CYLINDER_INIT_LOCATION_VALUE_LENGTH, 1);
 2481  2                      
 2482  2                      g_brakePedalInitLocationValue = ((INT16U)pMsgContext->reqData[3]) << 8 | (INT16U)pMsgContext->reqData[4]
             -;
 2483  2                      g_cylinderInitLocationValue = ((INT16U)pMsgContext->reqData[5]) << 8 | (INT16U)pMsgContext->reqData[6];
 2484  2              
 2485  2                      pMsgContext->resDataLen = 3u;
 2486  2                      DescSetPosResponse(pMsgContext);
 2487  2              }
 2488  1              else
 2489  1              {
 2490  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 2491  2              }
 2492  1      }
 2493         
 2494         
 2495         
 2496         DESC_SERVICE_STAT void ApplDescWritePvTestFlagById_2E02(DescMsgContext* pMsgContext)
 2497         {
 2498  1              if (4u == pMsgContext->reqDataLen)
 2499  1              {
 2500  2                      if(0x01 == pMsgContext->reqData[3])
 2501  2                      {
 2502  3                              g_pvTestFlag = TRUE;
 2503  3                      }
 2504  2                      else
 2505  2                      {
 2506  3                              g_pvTestFlag = FALSE;
 2507  3                      }       
 2508  2                      
 2509  2                      pMsgContext->resDataLen = 3u;
 2510  2                      DescSetPosResponse(pMsgContext);
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 42  

 2511  2              }
 2512  1              else
 2513  1              {
 2514  2              DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);
 2515  2              }
 2516  1      }
 2517         
 2518         /*  ********************************************************************************
 2519          * Function name:ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity (Service request header:$31 
             -$01 $F0 $01 )
 2520          * Description: not available 
 2521          * Returns:  nothing
 2522          * Parameter(s):
 2523          *   - pMsgContext->reqData:
 2524          *       - Points to the first service request data byte.
 2525          *       - Access type: read
 2526          *   - pMsgContext->resData:
 2527          *       - Points to the first writeable byte for the service response data.
 2528          *       - Access type: read/write
 2529          *   - pMsgContext->reqDataLen:
 2530          *       - Contains the count of the service request data bytes (Sid is excluded).
 2531          *       - Access type: read
 2532          *   - pMsgContext->resDataLen:
 2533          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2534          *       - Access type: read/write
 2535          *   - pMsgContext->msgAddInfo.reqType:
 2536          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2537          *       - Access type: read
 2538          *   - pMsgContext->msgAddInfo.resOnReq:
 2539          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2540          *       - Access type: read/write
 2541          *   - pMsgContext->msgAddInfo.suppPosRes:
 2542          *       - UDS only!If set no positive response will be sent on this request.
 2543          *       - Access type: read
 2544          * Particularitie(s) and limitation(s):
 2545          *   - The function "DescProcessingDone" must be called from now on (within this
 2546          * main-handler or later).
 2547          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2548          * but before calling "DescProcessingDone".
 2549          ********************************************************************************  */
 2550         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingIntegrity(DescMsgContext* pMsgCo
             -ntext)
 2551         {
 2552  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2553  1              /* Dummy example how to access the request data. */
 2554  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */ 
 2555  1      
 2556  1              /* Function implementation in bootloader */
 2557  1              DescClearResData(pMsgContext);
 2558  1              DescProcessingDone();
 2559  1      }
 2560         
 2561         /*  ********************************************************************************
 2562          * Function name:ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition (Service request header:$
             -31 $01 $FF $02 )
 2563          * Description: not available 
 2564          * Returns:  nothing
 2565          * Parameter(s):
 2566          *   - pMsgContext->reqData:
 2567          *       - Points to the first service request data byte.
 2568          *       - Access type: read
 2569          *   - pMsgContext->resData:
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 43  

 2570          *       - Points to the first writeable byte for the service response data.
 2571          *       - Access type: read/write
 2572          *   - pMsgContext->reqDataLen:
 2573          *       - Contains the count of the service request data bytes (Sid is excluded).
 2574          *       - Access type: read
 2575          *   - pMsgContext->resDataLen:
 2576          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2577          *       - Access type: read/write
 2578          *   - pMsgContext->msgAddInfo.reqType:
 2579          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2580          *       - Access type: read
 2581          *   - pMsgContext->msgAddInfo.resOnReq:
 2582          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2583          *       - Access type: read/write
 2584          *   - pMsgContext->msgAddInfo.suppPosRes:
 2585          *       - UDS only!If set no positive response will be sent on this request.
 2586          *       - Access type: read
 2587          * Particularitie(s) and limitation(s):
 2588          *   - The function "DescProcessingDone" must be called from now on (within this
 2589          * main-handler or later).
 2590          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2591          * but before calling "DescProcessingDone".
 2592          ********************************************************************************  */
 2593         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingPreCondition(DescMsgContext* pMs
             -gContext)
 2594         {
 2595  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2596  1              /* Dummy example how to access the request data. */
 2597  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */ 
 2598  1              DescClearResData(pMsgContext);
 2599  1      
 2600  1              /* Check programming condition, if programming condition is OK,
 2601  1               * the routine status record is correctResult(0x00), else
 2602  1               * is incorrectResult(0x01). */
 2603  1              if (0u == VCU_VehicleSpeed)
 2604  1              {
 2605  2                      pMsgContext->resData[4] = 0x00;
 2606  2              }
 2607  1              else
 2608  1              {
 2609  2                      pMsgContext->resData[4] = 0x01;
 2610  2              }
 2611  1      
 2612  1              pMsgContext->resData[3] = pMsgContext->reqData[3];
 2613  1              
 2614  1              pMsgContext->resDataLen = 0x05;
 2615  1              DescSetPosResponse(pMsgContext);
 2616  1      }
 2617         
 2618         /*  ********************************************************************************
 2619          * Function name:ApplDescRoutineControlByIdentifier_EraseMemory (Service request header:$31 $01 $FF $00 )
 2620          * Description: not available 
 2621          * Returns:  nothing
 2622          * Parameter(s):
 2623          *   - pMsgContext->reqData:
 2624          *       - Points to the first service request data byte.
 2625          *       - Access type: read
 2626          *   - pMsgContext->resData:
 2627          *       - Points to the first writeable byte for the service response data.
 2628          *       - Access type: read/write
 2629          *   - pMsgContext->reqDataLen:
 2630          *       - Contains the count of the service request data bytes (Sid is excluded).
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 44  

 2631          *       - Access type: read
 2632          *   - pMsgContext->resDataLen:
 2633          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2634          *       - Access type: read/write
 2635          *   - pMsgContext->msgAddInfo.reqType:
 2636          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2637          *       - Access type: read
 2638          *   - pMsgContext->msgAddInfo.resOnReq:
 2639          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2640          *       - Access type: read/write
 2641          *   - pMsgContext->msgAddInfo.suppPosRes:
 2642          *       - UDS only!If set no positive response will be sent on this request.
 2643          *       - Access type: read
 2644          * Particularitie(s) and limitation(s):
 2645          *   - The function "DescProcessingDone" must be called from now on (within this
 2646          * main-handler or later).
 2647          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2648          * but before calling "DescProcessingDone".
 2649          ********************************************************************************  */
 2650         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_EraseMemory(DescMsgContext* pMsgContext)
 2651         {
 2652  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2653  1              /* Dummy example how to access the request data. */
 2654  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2655  1      
 2656  1              /* Function implementation in bootloader */
 2657  1              DescClearResData(pMsgContext);
 2658  1              DescProcessingDone();
 2659  1      }
 2660         
 2661         /*  ********************************************************************************
 2662          * Function name:ApplDescRoutineControlByIdentifier_CheckProgrammingDependency (Service request header:$31
             - $01 $FF $01 )
 2663          * Description: not available 
 2664          * Returns:  nothing
 2665          * Parameter(s):
 2666          *   - pMsgContext->reqData:
 2667          *       - Points to the first service request data byte.
 2668          *       - Access type: read
 2669          *   - pMsgContext->resData:
 2670          *       - Points to the first writeable byte for the service response data.
 2671          *       - Access type: read/write
 2672          *   - pMsgContext->reqDataLen:
 2673          *       - Contains the count of the service request data bytes (Sid is excluded).
 2674          *       - Access type: read
 2675          *   - pMsgContext->resDataLen:
 2676          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2677          *       - Access type: read/write
 2678          *   - pMsgContext->msgAddInfo.reqType:
 2679          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2680          *       - Access type: read
 2681          *   - pMsgContext->msgAddInfo.resOnReq:
 2682          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2683          *       - Access type: read/write
 2684          *   - pMsgContext->msgAddInfo.suppPosRes:
 2685          *       - UDS only!If set no positive response will be sent on this request.
 2686          *       - Access type: read
 2687          * Particularitie(s) and limitation(s):
 2688          *   - The function "DescProcessingDone" must be called from now on (within this
 2689          * main-handler or later).
 2690          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2691          * but before calling "DescProcessingDone".
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 45  

 2692          ********************************************************************************  */
 2693         DESC_SERVICE_STAT void ApplDescRoutineControlByIdentifier_CheckProgrammingDependency(DescMsgContext* pMsgC
             -ontext)
 2694         {
 2695  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2696  1              /* Dummy example how to access the request data. */
 2697  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2698  1      
 2699  1              /* Function implementation in bootloader */
 2700  1              DescClearResData(pMsgContext);
 2701  1              DescProcessingDone();
 2702  1      }
 2703         
 2704         /*  ********************************************************************************
 2705          * Function name:ApplDescRequestDownload (Service request header:$34 )
 2706          * Description: not available 
 2707          * Returns:  nothing
 2708          * Parameter(s):
 2709          *   - pMsgContext->reqData:
 2710          *       - Points to the first service request byte after the Sid.
 2711          *       - Access type: read
 2712          *   - pMsgContext->resData:
 2713          *       - Points to the first writeable byte for the service response after the Sid.
 2714          *       - Access type: read/write
 2715          *   - pMsgContext->reqDataLen:
 2716          *       - Contains the service request length, excluding Sid byte only.
 2717          *       - Access type: read
 2718          *   - pMsgContext->resDataLen:
 2719          *       - Must be initialized with the total service response length, excluding the Sid only.
 2720          *       - Access type: read/write
 2721          *   - pMsgContext->msgAddInfo.reqType:
 2722          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2723          *       - Access type: read
 2724          *   - pMsgContext->msgAddInfo.resOnReq:
 2725          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2726          *       - Access type: read/write
 2727          *   - pMsgContext->msgAddInfo.suppPosRes:
 2728          *       - UDS only!If set no positive response will be sent on this request.
 2729          *       - Access type: read
 2730          * Particularitie(s) and limitation(s):
 2731          *   - The function "DescProcessingDone" must be called from now on (within this
 2732          * main-handler or later).
 2733          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2734          * but before calling "DescProcessingDone".
 2735          ********************************************************************************  */
 2736         DESC_SERVICE_STAT void ApplDescRequestDownload(DescMsgContext* pMsgContext)
 2737         {
 2738  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2739  1              /* Dummy example how to access the request data. */
 2740  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2741  1              DescClearResData(pMsgContext);
 2742  1              DescProcessingDone();
 2743  1      }
 2744         
 2745         /*  ********************************************************************************
 2746          * Function name:ApplDescTransferData (Service request header:$36 )
 2747          * Description: not available 
 2748          * Returns:  nothing
 2749          * Parameter(s):
 2750          *   - pMsgContext->reqData:
 2751          *       - Points to the first service request byte after the Sid.
 2752          *       - Access type: read
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 46  

 2753          *   - pMsgContext->resData:
 2754          *       - Points to the first writeable byte for the service response after the Sid.
 2755          *       - Access type: read/write
 2756          *   - pMsgContext->reqDataLen:
 2757          *       - Contains the service request length, excluding Sid byte only.
 2758          *       - Access type: read
 2759          *   - pMsgContext->resDataLen:
 2760          *       - Must be initialized with the total service response length, excluding the Sid only.
 2761          *       - Access type: read/write
 2762          *   - pMsgContext->msgAddInfo.reqType:
 2763          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2764          *       - Access type: read
 2765          *   - pMsgContext->msgAddInfo.resOnReq:
 2766          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2767          *       - Access type: read/write
 2768          *   - pMsgContext->msgAddInfo.suppPosRes:
 2769          *       - UDS only!If set no positive response will be sent on this request.
 2770          *       - Access type: read
 2771          * Particularitie(s) and limitation(s):
 2772          *   - The function "DescProcessingDone" must be called from now on (within this
 2773          * main-handler or later).
 2774          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2775          * but before calling "DescProcessingDone".
 2776          ********************************************************************************  */
 2777         DESC_SERVICE_STAT void ApplDescTransferData(DescMsgContext* pMsgContext)
 2778         {
 2779  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2780  1              /* Dummy example how to access the request data. */
 2781  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2782  1              DescClearResData(pMsgContext);
 2783  1              DescProcessingDone();
 2784  1      }
 2785         
 2786         /*  ********************************************************************************
 2787          * Function name:ApplDescRequestTransferExit (Service request header:$37 )
 2788          * Description: not available 
 2789          * Returns:  nothing
 2790          * Parameter(s):
 2791          *   - pMsgContext->reqData:
 2792          *       - Points to the first service request byte after the Sid.
 2793          *       - Access type: read
 2794          *   - pMsgContext->resData:
 2795          *       - Points to the first writeable byte for the service response after the Sid.
 2796          *       - Access type: read/write
 2797          *   - pMsgContext->reqDataLen:
 2798          *       - Contains the service request length, excluding Sid byte only.
 2799          *       - Access type: read
 2800          *   - pMsgContext->resDataLen:
 2801          *       - Must be initialized with the total service response length, excluding the Sid only.
 2802          *       - Access type: read/write
 2803          *   - pMsgContext->msgAddInfo.reqType:
 2804          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2805          *       - Access type: read
 2806          *   - pMsgContext->msgAddInfo.resOnReq:
 2807          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2808          *       - Access type: read/write
 2809          *   - pMsgContext->msgAddInfo.suppPosRes:
 2810          *       - UDS only!If set no positive response will be sent on this request.
 2811          *       - Access type: read
 2812          * Particularitie(s) and limitation(s):
 2813          *   - The function "DescProcessingDone" must be called from now on (within this
 2814          * main-handler or later).
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 47  

 2815          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2816          * but before calling "DescProcessingDone".
 2817          ********************************************************************************  */
 2818         DESC_SERVICE_STAT void ApplDescRequestTransferExit(DescMsgContext* pMsgContext)
 2819         {
 2820  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2821  1              /* Dummy example how to access the request data. */
 2822  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2823  1              DescClearResData(pMsgContext);
 2824  1              DescProcessingDone();
 2825  1      }
 2826         
 2827         /***********************************************************************
 2828         *  Name        : ApplDescWriteMemoryByAddress
 2829         *  Description : Service request header:$3D         
 2830         *  Parameter   : pMsgContext
 2831         *  Returns     : none 
 2832         ***********************************************************************/
 2833         DESC_SERVICE_STAT void ApplDescWriteMemoryByAddress(DescMsgContext* pMsgContext)
 2834         {
 2835  1              /* <<TBD>> Remove this comment once you have completely implemented this function!!! */
 2836  1              /* Dummy example how to access the request data. */
 2837  1              /* Assumming the FIRST DATA byte contains important data which has to be less than a constant value. */
 2838  1              DescClearResData(pMsgContext);
 2839  1              DescProcessingDone();           
 2840  1      }
 2841         
 2842         /***********************************************************************
 2843         *  Name        : ApplDescOemProcessTesterPresent
 2844         *  Description : Service request header:$3E         
 2845         *  Parameter   : pMsgContext
 2846         *  Returns     : none 
 2847         ***********************************************************************/
 2848         DESC_SERVICE_STAT void ApplDescOemProcessTesterPresent(DescMsgContext* pMsgContext)
 2849         {
 2850  1              DescClearResData(pMsgContext);
 2851  1      
 2852  1              if (2u == pMsgContext->reqDataLen) 
 2853  1              {
 2854  2                      if (0x00 == pMsgContext->reqData[1])
 2855  2                      {
 2856  3                              descOemProcessTesterPresentFlag = TRUE;
 2857  3                              descOemProcessTesterPresentTimeoutCnt = 0u;
 2858  3      
 2859  3                              pMsgContext->resDataLen = 0x02;
 2860  3                              DescSetPosResponse(pMsgContext);
 2861  3                      }
 2862  2                      else if (0x80 == pMsgContext->reqData[1])
 2863  2                      {
 2864  3                              descOemProcessTesterPresentFlag = TRUE;
 2865  3                              descOemProcessTesterPresentTimeoutCnt = 0u;
 2866  3      
 2867  3                              /* 0x80 not need to response */
 2868  3      
 2869  3                      }
 2870  2                      else
 2871  2                      {
 2872  3                              DescSetNegResponse(pMsgContext, kDescNrcSubfunctionNotSupported);                               
 2873  3                      }
 2874  2              }
 2875  1              else
 2876  1              {
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 48  

 2877  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);                 
 2878  2              }
 2879  1      }
 2880         
 2881         /*  ********************************************************************************
 2882          * Function name:ApplDescControlDtcSettingEnable (Service request header:$85 $1 )
 2883          * Description: not available 
 2884          * Returns:  nothing
 2885          * Parameter(s):
 2886          *   - pMsgContext->reqData:
 2887          *       - Points to the first service request data byte.
 2888          *       - Access type: read
 2889          *   - pMsgContext->resData:
 2890          *       - Points to the first writeable byte for the service response data.
 2891          *       - Access type: read/write
 2892          *   - pMsgContext->reqDataLen:
 2893          *       - Contains the count of the service request data bytes (Sid is excluded).
 2894          *       - Access type: read
 2895          *   - pMsgContext->resDataLen:
 2896          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2897          *       - Access type: read/write
 2898          *   - pMsgContext->msgAddInfo.reqType:
 2899          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2900          *       - Access type: read
 2901          *   - pMsgContext->msgAddInfo.resOnReq:
 2902          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2903          *       - Access type: read/write
 2904          *   - pMsgContext->msgAddInfo.suppPosRes:
 2905          *       - UDS only!If set no positive response will be sent on this request.
 2906          *       - Access type: read
 2907          * Particularitie(s) and limitation(s):
 2908          *   - The function "DescProcessingDone" must be called from now on (within this
 2909          * main-handler or later).
 2910          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2911          * but before calling "DescProcessingDone".
 2912          ********************************************************************************  */
 2913         DESC_SERVICE_STAT void ApplDescControlDtcSettingEnable(DescMsgContext* pMsgContext)
 2914         {
 2915  1      
 2916  1              if (2u == pMsgContext->reqDataLen)
 2917  1              {
 2918  2                      if (0u == VCU_VehicleSpeed)
 2919  2                      {
 2920  3                              DescMgr_CanDiagDtcControlSettingOn();   
 2921  3              
 2922  3                              pMsgContext->resDataLen = 0x02;
 2923  3                              DescSetPosResponse(pMsgContext);
 2924  3                      }
 2925  2                      else
 2926  2                      {
 2927  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);          
 2928  3                      }
 2929  2              }
 2930  1              else
 2931  1              {
 2932  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);                 
 2933  2              }
 2934  1      }
 2935         
 2936         /*  ********************************************************************************
 2937          * Function name:ApplDescControlDtcSettingDisable (Service request header:$85 $2 )
 2938          * Description: not available 
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 49  

 2939          * Returns:  nothing
 2940          * Parameter(s):
 2941          *   - pMsgContext->reqData:
 2942          *       - Points to the first service request data byte.
 2943          *       - Access type: read
 2944          *   - pMsgContext->resData:
 2945          *       - Points to the first writeable byte for the service response data.
 2946          *       - Access type: read/write
 2947          *   - pMsgContext->reqDataLen:
 2948          *       - Contains the count of the service request data bytes (Sid is excluded).
 2949          *       - Access type: read
 2950          *   - pMsgContext->resDataLen:
 2951          *       - Must be initialized with the count of the service response data bytes (Sid is excluded).
 2952          *       - Access type: read/write
 2953          *   - pMsgContext->msgAddInfo.reqType:
 2954          *       - Shows the addressing type of the request (kDescPhysReq or kDescFuncReq).
 2955          *       - Access type: read
 2956          *   - pMsgContext->msgAddInfo.resOnReq:
 2957          *       - Indicates if there will be response. Allowed only to write only 0 !!!
 2958          *       - Access type: read/write
 2959          *   - pMsgContext->msgAddInfo.suppPosRes:
 2960          *       - UDS only!If set no positive response will be sent on this request.
 2961          *       - Access type: read
 2962          * Particularitie(s) and limitation(s):
 2963          *   - The function "DescProcessingDone" must be called from now on (within this
 2964          * main-handler or later).
 2965          *   - The function "DescSetNegResponse" can be called within this main-handler or later
 2966          * but before calling "DescProcessingDone".
 2967          ********************************************************************************  */
 2968         DESC_SERVICE_STAT void ApplDescControlDtcSettingDisable(DescMsgContext* pMsgContext)
 2969         {
 2970  1      
 2971  1              if (2u == pMsgContext->reqDataLen)
 2972  1              {
 2973  2                      if (0u == VCU_VehicleSpeed)
 2974  2                      {
 2975  3                              DescMgr_CanDiagDtcControlSettingOff();  
 2976  3      
 2977  3                              pMsgContext->resDataLen = 0x02;
 2978  3                              DescSetPosResponse(pMsgContext);
 2979  3                      }
 2980  2                      else
 2981  2                      {
 2982  3                              DescSetNegResponse(pMsgContext, kDescNrcConditionsNotCorrect);                  
 2983  3                      }
 2984  2              }
 2985  1              else
 2986  1              {
 2987  2                      DescSetNegResponse(pMsgContext, kDescNrcInvalidFormat);                 
 2988  2              }
 2989  1      }
 2990         
 2991         /***********************************************************************
 2992         *  Name        : CanDiagAppCallBack
 2993         *  Description : call back all service rountine         
 2994         *  Parameter   : pMsgContext
 2995         *  Returns     : none 
 2996         ***********************************************************************/
 2997         void CanDiagAppCallBack(APPL_DESC_SERVICE_ID_TYPE MsgContextId, DescMsgContext* pMsgContext)
 2998         {
 2999  1              DescClearResData(pMsgContext);
 3000  1      
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 50  

 3001  1          if (MsgContextId < DESC_MAX_TYPE)
 3002  1          {
 3003  2              if (CanDiagHandler[MsgContextId] != NULL)
 3004  2              {   
 3005  3                  CanDiagHandler[MsgContextId](pMsgContext);
 3006  3              }        
 3007  2          }
 3008  1      }
 3009         
 3010         /***********************************************************************
 3011         *  Name        : DescClearResData
 3012         *  Description : none        
 3013         *  Parameter   : pMsgContext
 3014         *  Returns     : none 
 3015         ***********************************************************************/
 3016         void DescClearResData(DescMsgContext* pMsgContext)
 3017         {
 3018  1              INT16U i;
 3019  1      
 3020  1              for (i = 0u; i < pMsgContext->resDataLen; i++)
 3021  1              {
 3022  2                      pMsgContext->resData[i] = 0u;
 3023  2              }       
 3024  1      }
 3025         
 3026         /***********************************************************************
 3027         *  Name        : DescSetNegResponse
 3028         *  Description : none        
 3029         *  Parameter   : pMsgContext
 3030         *  Returns     : none 
 3031         ***********************************************************************/
 3032         void DescSetNegResponse(DescMsgContext* pMsgContext, DescNegResCode errorCode)
 3033         {
 3034  1              pMsgContext->resDataLen = 0x03;
 3035  1              pMsgContext->resData[0] = 0x7F;
 3036  1              pMsgContext->resData[1] = pMsgContext->reqData[0];
 3037  1              pMsgContext->resData[2] = errorCode;
 3038  1              pMsgContext->resData[3] = 0x00;
 3039  1              pMsgContext->resData[4] = 0x00;
 3040  1              pMsgContext->resData[5] = 0x00;
 3041  1              pMsgContext->resData[6] = 0x00;
 3042  1      
 3043  1              CanTx_descResMsgSendEnable();
 3044  1      }
 3045         
 3046         /***********************************************************************
 3047         *  Name        : DescSetPosResponse
 3048         *  Description : none        
 3049         *  Parameter   : pMsgContext
 3050         *  Returns     : none 
 3051         ***********************************************************************/
 3052         void DescSetPosResponse(DescMsgContext* pMsgContext)
 3053         {
 3054  1              pMsgContext->resData[0] = pMsgContext->reqData[0] + 0x40;
 3055  1              pMsgContext->resData[1] = pMsgContext->reqData[1];
 3056  1              pMsgContext->resData[2] = pMsgContext->reqData[2];
 3057  1      
 3058  1              CanTx_descResMsgSendEnable();
 3059  1      }
 3060         
 3061         /***********************************************************************
 3062         *  Name        : DescProcessingDone
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 51  

 3063         *  Description : none        
 3064         *  Parameter   : pMsgContext
 3065         *  Returns     : none 
 3066         ***********************************************************************/
 3067         void DescProcessingDone(void)
 3068         {
 3069  1              g_descReqMsgRxFlag = FALSE;             
 3070  1      }
 3071         
 3072         /***********************************************************************
 3073         *  Name        : seedToKey
 3074         *  Description : none        
 3075         *  Parameter   : pMsgContext
 3076         *  Returns     : none 
 3077         ***********************************************************************/
 3078         DESC_SERVICE_STAT INT32U seedToKey(INT32U seed, INT32U mask)
 3079         {
 3080  1              INT8U i;
 3081  1              INT32U key = 0u;
 3082  1      
 3083  1              if (seed != 0u)
 3084  1              {
 3085  2                      for (i=0u; i<35u; i++)
 3086  2                      {
 3087  3                              if (seed & 0x80000000)
 3088  3                              {
 3089  4                                      seed = seed << 1u;
 3090  4                                      seed = seed ^ mask;
 3091  4                              }
 3092  3                              else
 3093  3                              {
 3094  4                                      seed = seed << 1u;
 3095  4                              }
 3096  3                      }
 3097  2              }
 3098  1              else
 3099  1              {
 3100  2                      key = seed;
 3101  2              }
 3102  1      
 3103  1              return key;
 3104  1      }
 3105         
 3106         /* _END_OF_DESC_SERVICE_ */
 3107         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        7682     --------
  NEAR-CONST SIZE  =          28     --------
  FAR-CONST SIZE   =         384     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          27     --------
  FAR-DATA SIZE    =         829     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =         970     --------
C166 COMPILER V7.57.0, DESC_SER                                                            11/13/2020 15:09:32 PAGE 52  

END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
