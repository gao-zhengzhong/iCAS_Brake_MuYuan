C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE AEB
OBJECT MODULE PLACED IN .\Obj\aeb.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\aeb.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\sr
                    -c\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\
                    -mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measur
                    -e;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\aeb.lst) OBJECT(.\Obj\aeb.obj) 

 stmt lvl     source

    1         #define AEB_GLOBALS
    2         
    3         #define SPEED_IS_Standby                   80                   //速度阈值
    4         #define Sig_delay_t                        0.1
    5         #define Prs_delay_t                        0.3
    6         #define Ep_acce_ego                        6.0
    7         #define Ep_acce_frt                        6.0
    8         #define SonRes_time                        0.8
    9         #define HapRes_time                        0.6
   10         #define dis_S0                             3.0
   11         #define dis_time                           31
   12         
   13         
   14         #include "MAIN.h"
   15         #include "rte.h"
   16         #include "adc_sample.h"
   17         #include "aeb.h"
   18         
   19         /*************special argument define**************/
   20         FP32 EP[2] = {0.0,0.0};
   21         
   22         /* all the argument initialization*/
   23         void AebInit(void){
   24  1              testCount  = 0;
   25  1              TTC        = 20;
   26  1              isSteering = 0;
   27  1              phase      = 0;
   28  1              dis_brake  = 100.0;
   29  1              State_max  = 0;
   30  1              p_aeb_s    = AEB_S_array;
   31  1              speed_time = 0;
   32  1              test05     = 0;
   33  1              Status     = 0;
   34  1              prec       = 0.0;
   35  1              temp01     = 0;
   36  1      
   37  1              IsCondSatis      = 0;
   38  1              distance_long    = 12000;
   39  1              isSpeedSatf      = 0;           //0:速度未激活  1：速度激活
   40  1              AEB_State_now    = 0;
   41  1              CountNumberRadar = 0;
   42  1              SpeedStandbyCount= 0;
   43  1      
   44  1              pv   = v_d;
   45  1              p_t  = &TTC;
   46  1              pa   = acce_d;
   47  1              pp   = pres_d;
   48  1              pl   = lca_d;
   49  1              p_ep = EP;
   50  1      
   51  1              TargetPressure = 0;
   52  1              AutoMode = 0;
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 2   

   53  1              //AutoBrakeEnable = 0;
   54  1              //AebBrakeEnable = 0;
   55  1              BrakeSysMode = BoosterBrakeMode;
   56  1              AebStandtime = 0 ;
   57  1              AebStandMode = 0;
   58  1              SteerInterSta =0;
   59  1      
   60  1              /*Meye*/
   61  1              eyeObstacleNum = 0;
   62  1              laneLeftX = 0.0;
   63  1              laneRightX = 0.0;
   64  1              canCount769 = 0;
   65  1              canCount768 = 0;
   66  1              canCount767 = 0;
   67  1              canCount766 = 0;
   68  1      }
   69         
   70         
   71         /****************Aeb Function**********/
   72         void AebAlgorithm(void){
   73  1              const T_ADC* ptr_Adc = Adc_SampleData();
   74  1      
   75  1         /*  FindDangerObject_lp();           //危险目标检测
   76  1           getInfo();
   77  1           calc_ttc(v_rel/3.6, dis_rel);    //计算TTC
   78  1      
   79  1           if(VechileSpeed<150)             //车速大于15KM/H，AEB起作用
   80  1           {
   81  1               if(AEB_State_now!=3)        //车速小于15km/h时，未进入紧急制动则退出
   82  1               {
   83  1                       TTC = 20;
   84  1               }
   85  1               else
   86  1               {
   87  1                       if(VechileSpeed<10)  //紧急制动后车辆静止判断
   88  1                       {
   89  1                               AebStandMode =1;
   90  1                       }
   91  1               }
   92  1           }
   93  1      
   94  1           if(!SteerInterSta)   //转向未干预时触发AEB逻辑判断，通过TTC进行阶段区分
   95  1           {
   96  1               if(TTC<1.7)//紧急制动阶段
   97  1               {
   98  1                       AEB_State_now = 3;
   99  1                       Aeb_targetpress_value=45;
  100  1               }
  101  1               else if((TTC<3.5)&&(AEB_State_now!=3))//间歇制动阶段
  102  1               {
  103  1                       AEB_State_now = 2;
  104  1                       Aeb_targetpress_value=0;      //此阶段压力未控制
  105  1               }
  106  1               else if((TTC<5)&&(AEB_State_now!=3))//预制动阶段
  107  1               {
  108  1                   AEB_State_now = 1;
  109  1                   Aeb_targetpress_value=0;
  110  1               }
  111  1               else if(AEB_State_now==3)
  112  1               {
  113  1                   AEB_State_now = 3;
  114  1                   if(AebStandMode==1)     //进入紧急制动后停车，降压驻车
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 3   

  115  1                   {
  116  1                       Aeb_targetpress_value=10;
  117  1                   }
  118  1                   else
  119  1                   {
  120  1                       Aeb_targetpress_value=45;
  121  1                   }
  122  1               }
  123  1               else                         //无碰撞危险阶段
  124  1               {
  125  1                   AEB_State_now = 0;
  126  1                   Aeb_targetpress_value=0;
  127  1               }
  128  1           }
  129  1           else                   //转向干预
  130  1           {
  131  1               AEB_State_now = 0;
  132  1               Aeb_targetpress_value=0;
  133  1           }
  134  1      
  135  1      
  136  1      
  137  1           if(BrakeSysMode!=APABrakeMode)//刹车模式不处于主动制动模式时，可进入AEB模式
  138  1           {
  139  1               if(AEB_State_now==3)     //紧急制动阶段，使能AEB线控刹车
  140  1               {
  141  1                  BrakeSysMode=AebBrakeMode;
  142  1               }
  143  1               else                       //非紧急制动阶段，回到助力模式
  144  1               {
  145  1                  BrakeSysMode=BoosterBrakeMode;
  146  1                  Aeb_targetpress_value =0;
  147  1               }
  148  1           }*/
  149  1      
  150  1      
  151  1      
  152  1      /*-----------------凌鹏AEB算法已屏蔽-------------*/
  153  1           //p_p = pa_sort();
  154  1          /* isSpeedSatf = IsSpeedStandby();
  155  1           isSteering = IsSWStandBy();
  156  1      
  157  1           resumeFunc();
  158  1      
  159  1           IsCondSatis = CondFunc();
  160  1      
  161  1           IsCondSatis = 1;
  162  1           dis_rel = 10.0;
  163  1           v_ego = 42;
  164  1           v_rel = -1*v_ego;
  165  1      
  166  1           if (IsCondSatis){
  167  1               //AEB_State_now = calc_state(v_ego/3.6, v_rel/3.6, dis_rel);//此函数影响程序运行，运行时影响障碍物距
             -离检测及部分AD采样
  168  1      
  169  1               if（TTC<EmrgBrake_TtcL）
  170  1               {
  171  1                       AEB_State_now = 3;
  172  1                       Aeb_targetpress_value=40;
  173  1               }
  174  1               else if(TTC<InterBrake_TtcL)
  175  1               {
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 4   

  176  1                       AEB_State_now = 2;
  177  1                       Aeb_targetpress_value=0;
  178  1               }
  179  1               else if(TTC<PreBrake_TtcL)
  180  1               {
  181  1                       AEB_State_now = 1;
  182  1                       Aeb_targetpress_value=0;
  183  1               }
  184  1               else
  185  1               {
  186  1                       AEB_State_now = 0;
  187  1                       Aeb_targetpress_value=0;
  188  1               }
  189  1      
  190  1      
  191  1      
  192  1      
  193  1               prec          = accury_calc();
  194  1               prec = 0.0;
  195  1               AedBrake();
  196  1           } else {
  197  1               AEB_State_now = 0;
  198  1               Aeb_targetpress_value=0;
  199  1               //AedBrake();
  200  1           }
  201  1           //if(ptr_Adc->brakePedalTrip_Adc[0] <= (BRAKE_PEDAL_INIT_LOCATION + 20))
  202  1           //MC_Presure_PID(30);
  203  1           //AedBrake();*/
  204  1      }
  205         
  206         /* find the nearest objection */
  207         void FindDangerObject_lp(void)
  208         {
  209  1          INT8U i;
  210  1          distance_long = 12000;
  211  1          for ( i = 0; i < 20; i++){
  212  2      
  213  2                if ( distance_long > ObjectInfo1[0][i]){   //!CountNumberRadar &&
  214  3                       //testCount++;
  215  3                   distance_long    =        ObjectInfo1[0][i];             //unit:m   * 100
  216  3                   distance_lateral = (      ObjectInfo1[1][i]);            //unit:m   * 100
  217  3                   speed_longtitude = ((FP32)ObjectInfo1[2][i]*18/5);       //unit:km/h* 10
  218  3                   speed_lateral    = ((FP32)ObjectInfo1[3][i]*18/5);       //unit:km/h* 10
  219  3                   break;
  220  3                }
  221  2                if ( distance_long > ObjectInfo0[0][i]){  //CountNumberRadar &&
  222  3                   distance_long    =        ObjectInfo0[0][i];             // same as previous
  223  3                   distance_lateral = (      ObjectInfo0[1][i]);
  224  3                   speed_longtitude = ((FP32)ObjectInfo0[2][i]*18/5);
  225  3                   speed_lateral    = ((FP32)ObjectInfo0[3][i]*18/5);
  226  3                }
  227  2          }
  228  1      
  229  1      }
  230         
  231         /********** assist function 01: sort function *********/
  232         void sort(FP32 * data, INT16U n) {
  233  1              INT16U step,i,j;
  234  1              FP32   key;
  235  1      
  236  1          //将数组按照STEP分组，不断二分到每组只剩下一个元素
  237  1          for(step=n/2;step>0;step/=2) {
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 5   

  238  2              //将每组中的元素排序，小的在前
  239  2              for(i=step;i<n;i++) {
  240  3                  key = data[i];
  241  3                  for(j=i-step;j>=0 && key<data[j];j-=step) {
  242  4                      data[j+step] = data[j];
  243  4                  }
  244  3                  //和上面的for循环一起，将组中小的元素换到数组的前面
  245  3                  data[j+step] = key;
  246  3              }
  247  2          }
  248  1      }
  249         
  250         /********** assist function 02: mean function *********/
  251         //求一个数组从n项到m项的平均值(包含n项，m项）
  252         FP32 mean_array(FP32 * p, INT16U n, INT16U m) {
  253  1              FP32   total = 0.0;
  254  1              INT16S i = n;
  255  1              INT16S j = 0, total_num = 0;
  256  1          while (i < m+1) {
  257  2              total += *(p + i);
  258  2              i += 1;
  259  2          }
  260  1          /*while (j < m){
  261  1              if (*(p + j))
  262  1                  total_num += 1;
  263  1              j += 1;
  264  1          }*/
  265  1          return total / (m+1-n);
  266  1      }
  267         /********** assist function 02: round function *********/
  268         INT16S round(FP32 t){
  269  1              FP32 md;
  270  1          md = t - (INT16S) t;
  271  1          if (md>= 0.5)
  272  1              return (INT16S)(t+1);
  273  1          else
  274  1              return (INT16S)t;
  275  1      }
  276         
  277         /********** assist function 03: max function *********/
  278         FP32 MAX(FP32 a, FP32 b){
  279  1          return (a>b) ? a : b;
  280  1      }
  281         
  282         INT16S MAX_int(INT16S a, INT16S b){
  283  1          return (a>b) ? a : b;
  284  1      }
  285         
  286         
  287         FP32 ABS_lp(FP32 a){
  288  1          return (a<0) ? a*(-1) : 2;
  289  1      }
  290         
  291         void v_delay(FP32 v) {
  292  1          INT16S i;
  293  1          for (i = (calc_t - 1); i > -1; i--) {
  294  2              if (i)
  295  2                  *(pv + i) = *(pv + i - 1);
  296  2              else
  297  2                  *pv = v;
  298  2          }
  299  1      }
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 6   

  300         
  301         void pres_delay(FP32 pres) {
  302  1          INT16S i;
  303  1          for (i = (calc_t - 1); i > -1; i--) {
  304  2              if (i)
  305  2                  *(pp + i) = *(pp + i - 1);
  306  2              else
  307  2                  *pp = pres;
  308  2          }
  309  1      }
  310         
  311         void speed_time_delay(void) {
  312  1          INT16S i;
  313  1          for (i = (calc_t - 1); i > -1; i--) {
  314  2              if (i)
  315  2                  speed_time_d[i] = speed_time_d[i-1];
  316  2              else
  317  2                  speed_time_d[0] = speed_time;
  318  2          }
  319  1      }
  320         
  321         void acce_delay(FP32 acce_present){
  322  1          INT16S i;
  323  1          for (i = (calc_t - 1); i > -1; i--) {
  324  2              if (i)
  325  2                  *(pa + i) = *(pa + i - 1);
  326  2              else
  327  2                  *pa = acce_present;
  328  2          }
  329  1      }
  330         
  331         void l_delay(FP32 dis) {
  332  1          INT16S i;
  333  1          for (i = (calc_t - 1); i > -1; i--) {
  334  2              if (i)
  335  2                  *(pl + i) = *(pl + i - 1);
  336  2              else
  337  2                  *pl = dis;
  338  2          }
  339  1      }
  340         
  341         FP32 **pa_sort(void){
  342  1          INT16S i;
  343  1          FP32   * pa;
  344  1          FP32   * pointer_pressure;                      //pointer to pressure,pointer to acceleration.
  345  1          for (i=0 ; i < calc_t; i++){
  346  2              pres_s[i] = pres_d[i];
  347  2              acce_s[i] = acce_d[i];
  348  2          }
  349  1      
  350  1          sort(pres_s, calc_t);
  351  1          sort(acce_s, calc_t);
  352  1      
  353  1          p_array[0] = pointer_pressure = pres_s;
  354  1          p_array[1] = pa = acce_s;
  355  1          return p_array;
  356  1      }
  357         
  358         
  359         INT8U IsSpeedStandby(void)
  360         {
  361  1         if(VechileSpeed>SPEED_IS_Standby)
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 7   

  362  1             SpeedStandbyCount++;
  363  1         else {
  364  2             SpeedStandbyCount = 0;
  365  2             return 0;
  366  2          }
  367  1         if(SpeedStandbyCount > 30){
  368  2             SpeedStandbyCount = 30;
  369  2             return 1;
  370  2         }
  371  1         return 0;
  372  1      }
  373         
  374         //this function is not finished yet.
  375         INT8U IsSWStandBy(void){
  376  1              if(RealAngle>100 || RealAngle<-340  ){    //RealAngle 度*10
  377  2                      return 1;
  378  2              }
  379  1              return 0;
  380  1      }
  381         
  382         //calculate the ttc
  383         void calc_ttc(FP32 v_rel,FP32 dis_rel){
  384  1              FP32 i = 20;
  385  1          if (v_rel >= 0)
  386  1              *p_t = 20;
  387  1          else
  388  1              i = (-1) * dis_rel / v_rel;                                               //
  389  1          *p_t = i > 20 ? 20.0 : i;
  390  1      }
  391         
  392         /* get & process all the information */
  393         void getInfo(void){
  394  1              v_ego        = ((FP32)VechileSpeed)/10;          // unit: km/h
  395  1              v_rel        = ((FP32)speed_longtitude)/10;      // unit: km/h
  396  1              acce_present = (acce_ego.acceleration_y+0.0)*0.0277;    // unit: m/s^2
  397  1              dis_rel      = ((FP32)distance_long)/100;        // unit: m
  398  1      
  399  1              v_delay(v_ego/3.6);
  400  1              pres_delay(MasterCylinderPrs*10);
  401  1              speed_time_delay();                  //period: 2.5ms
  402  1              acce_delay(acce_present);
  403  1              l_delay(dis_rel);
  404  1      
  405  1              if (distance_long > 11800)
  406  1                      speed_front = 200;               // 200 means no dangerous object is in front.
  407  1              else
  408  1                      speed_front = v_ego + v_rel;
  409  1      }
  410         
  411         /* cal dis 01*/
  412         INT16U calc_state(FP32 v, FP32 v_rel, FP32 dis_rel){
  413  1              FP32   FrSt_t, v_f;
  414  1          FP32   t[dis_time], Sf[dis_time], Sr[dis_time], dis[dis_time], dis_haptic, dis_sound;
  415  1          INT16U i, AEB_state;
  416  1      
  417  1          //begin_time = speed_time;
  418  1          v_f = v_rel + v;
  419  1      
  420  1          for (i = 0; i < dis_time; ++i){
  421  2                      t[i] = 0.2 * i;
  422  2                      Sr[i] = Sf[i] = 0.0;
  423  2          }
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 8   

  424  1      
  425  1          FrSt_t = v_f/Ep_acce_frt;
  426  1          for (i = 0; i < dis_time; ++i){
  427  2              if (t[i] <= FrSt_t)
  428  2                  Sf[i] = v_f * t[i] - 0.5 * Ep_acce_frt * t[i]* t[i];
  429  2              else
  430  2                  Sf[i] = Sf[i-1];
  431  2          }
  432  1      
  433  1          for (i = 0; i < dis_time; ++i){
  434  2              if (t[i] <= Sig_delay_t)
  435  2                  Sr[i] = v * t[i];
  436  2              else if (t[i] <= (Sig_delay_t + Prs_delay_t))
  437  2                  Sr[i] = v * Sig_delay_t + v * (t[i] - Sig_delay_t) - Ep_acce_ego * (t[i] - Sig_delay_t)*(t[i] 
             -- Sig_delay_t)*(t[i] - Sig_delay_t)/(6.0 * Prs_delay_t);
  438  2              else if (t[i] <= (Sig_delay_t + Prs_delay_t + (v - 0.5*Ep_acce_ego*Prs_delay_t)/Ep_acce_ego)){
  439  3                  Sr[i] = v * (Sig_delay_t + Prs_delay_t) - Ep_acce_ego * Prs_delay_t*Prs_delay_t/6.0 + \
  440  2                       (v - 0.5 * Ep_acce_ego * Prs_delay_t) *  (t[i] - Sig_delay_t - Prs_delay_t)\
  441  2                  - 0.5 * Ep_acce_ego * (t[i] - Sig_delay_t - Prs_delay_t)*(t[i] - Sig_delay_t - Prs_delay_t);}
  442  2              else
  443  2                  Sr[i] = Sr[i-1];
  444  2          }
  445  1      
  446  1      
  447  1          for (i = 0; i < dis_time; ++i){
  448  2              dis[i] = Sf[i] - Sr[i];
  449  2          }
  450  1      
  451  1          sort(dis, dis_time);
  452  1      
  453  1          if (dis[0] < 0) {
  454  2            dis_brake = dis[0]*(-1) + dis_S0;
  455  2            dis_haptic = dis_brake + HapRes_time * ABS_lp(v_rel) ;
  456  2            dis_sound = dis_haptic + SonRes_time * ABS_lp(v_rel) ;
  457  2      
  458  2            if (dis_rel < dis_brake)
  459  2                AEB_state = 3;
  460  2            else if (dis_rel < dis_haptic)
  461  2                AEB_state = 2;
  462  2            else if (dis_rel < dis_sound)
  463  2                AEB_state = 1;
  464  2            else
  465  2                AEB_state = 0 ;
  466  2          }else{
  467  2              AEB_state = 0;
  468  2          }
  469  1      
  470  1          return AEB_state;
  471  1      }
  472         
  473         INT16U calc_state2(FP32 v, FP32 v_rel, FP32 dis_rel){
  474  1              FP32   FrSt_t, v_f;
  475  1          FP32   t[dis_time], Sf[dis_time], Sr[dis_time], dis[dis_time], dis_haptic, dis_sound;
  476  1          INT16U i, AEB_state;
  477  1      
  478  1          //begin_time = speed_time;
  479  1          v_f = v_rel + v;
  480  1      
  481  1          for (i = 0; i < dis_time; ++i){
  482  2                      t[i] = 0.2 * i;
  483  2                      Sr[i] = Sf[i] = 0.0;
  484  2          }
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 9   

  485  1      
  486  1          FrSt_t = v_f/Ep_acce_frt;
  487  1          for (i = 0; i < dis_time; ++i){
  488  2              if (t[i] <= FrSt_t)
  489  2                  Sf[i] = v_f * t[i] - 0.5 * Ep_acce_frt * t[i]* t[i];
  490  2              else
  491  2                  Sf[i] = Sf[i-1];
  492  2          }
  493  1      
  494  1          for (i = 0; i < dis_time; ++i){
  495  2              if (t[i] <= Sig_delay_t)
  496  2                  Sr[i] = v * t[i];
  497  2              else if (t[i] <= (Sig_delay_t + Prs_delay_t))
  498  2                  Sr[i] = v * Sig_delay_t + v * (t[i] - Sig_delay_t) - Ep_acce_ego * (t[i] - Sig_delay_t)*(t[i] 
             -- Sig_delay_t)*(t[i] - Sig_delay_t)/(6.0 * Prs_delay_t);
  499  2              else if (t[i] <= (Sig_delay_t + Prs_delay_t + (v - 0.5*Ep_acce_ego*Prs_delay_t)/Ep_acce_ego)){
  500  3                  Sr[i] = v * (Sig_delay_t + Prs_delay_t) - Ep_acce_ego * Prs_delay_t*Prs_delay_t/6.0 + \
  501  2                       (v - 0.5 * Ep_acce_ego * Prs_delay_t) *  (t[i] - Sig_delay_t - Prs_delay_t)\
  502  2                  - 0.5 * Ep_acce_ego * (t[i] - Sig_delay_t - Prs_delay_t)*(t[i] - Sig_delay_t - Prs_delay_t);}
  503  2              else
  504  2                  Sr[i] = Sr[i-1];
  505  2          }
  506  1      
  507  1      
  508  1          for (i = 0; i < dis_time; ++i){
  509  2              dis[i] = Sf[i] - Sr[i];
  510  2          }
  511  1      
  512  1          sort(dis, dis_time);
  513  1      
  514  1          if (dis[0] < 0) {
  515  2            dis_brake = dis[0]*(-1) + dis_S0;
  516  2            dis_haptic = dis_brake + HapRes_time * ABS_lp(v_rel) ;
  517  2            dis_sound = dis_haptic + SonRes_time * ABS_lp(v_rel) ;
  518  2      
  519  2            if (dis_rel < dis_brake)
  520  2                AEB_state = 3;
  521  2            else if (dis_rel < dis_haptic)
  522  2                AEB_state = 2;
  523  2            else if (dis_rel < dis_sound)
  524  2                AEB_state = 1;
  525  2            else
  526  2                AEB_state = 0 ;
  527  2          }else{
  528  2              AEB_state = 0;
  529  2          }
  530  1      
  531  1          return AEB_state;
  532  1      }
  533         
  534         void resumeFunc(void){
  535  1          if(VechileSpeed < 10){
  536  2                       test05++;
  537  2                       if (test05 > 400){
  538  3                              test05 = 0;
  539  3                              phase  = 1;
  540  3                              Status = 0;
  541  3                              Aeb_targetpress_value =0;
  542  3                              //MC_Presure_PID(Aeb_targetpress_value);
  543  3                       }
  544  2          }
  545  1      }
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 10  

  546         
  547         INT8U CondFunc(void){
  548  1              // 使能开关和踏板位置没有写
  549  1              if( (!isSteering) && isSpeedSatf && distance_long>3) {
  550  2              return 1;
  551  2              }else{
  552  2                      Status       = 0;
  553  2                      phase        = 2;
  554  2                      State_max    = 0;
  555  2                      *(p_aeb_s+1) = 0;
  556  2                      *p_aeb_s     = 0;
  557  2                      *(p_ep+1)    = 0;
  558  2                      return 0;
  559  2              }
  560  1      }
  561         
  562         void AedBrake(void){
  563  1          //if(VechileGear==1){           //档位代码
  564  1              *(p_aeb_s + 1) = MAX_int(*p_aeb_s, *(p_aeb_s+1));
*** WARNING C192 IN LINE 564 OF src\app\alogrithm\aeb.c: '=': value truncated
  565  1              *p_aeb_s       = AEB_State_now;
  566  1              State_max      = MAX_int(*p_aeb_s, *(p_aeb_s+1));
*** WARNING C192 IN LINE 566 OF src\app\alogrithm\aeb.c: '=': value truncated
  567  1      
  568  1              switch (State_max){
  569  2                  case 1:
  570  2                      phase  = 3;
  571  2                      Status = 1;
  572  2                      Aeb_targetpress_value =0;
  573  2                      //MC_Presure_PID(Aeb_targetpress_value);
  574  2                      //BrakeSysMode=BoosterBrakeMode;
  575  2                      break;
  576  2      
  577  2                  case 2:
  578  2                      phase  = 4;
  579  2                      Status = 2;
  580  2      
  581  2                     /*if(Interval_ctrl_flag==0) {
  582  2                         Interval_ctrl_time =0;
  583  2                         Interval_ctrl_flag=1;
  584  2                         Aeb_targetpress_value =0;
  585  2                     }else if(Interval_ctrl_flag==1) {
  586  2                          if(Interval_ctrl_time>INTERVAL_BRAKE_TIME) {
  587  2                              Interval_ctrl_time =0;
  588  2                              Interval_ctrl_flag=2;
  589  2                              Aeb_targetpress_value = 10;
  590  2                          }
  591  2                     }else {
  592  2                         Interval_ctrl_time =0;
  593  2                         Interval_ctrl_flag=1;
  594  2                         Aeb_targetpress_value = 10;
  595  2                     }
  596  2                     MC_Presure_PID(Aeb_targetpress_value);*/
  597  2                      //BrakeSysMode=BoosterBrakeMode;
  598  2                     break;
  599  2      
  600  2                  case 3:
  601  2                    phase  = 5;
  602  2                    Status = 3;
  603  2      
  604  2                    add_pressure          = (INT16S)pres_p();
  605  2                    add_pressure = 0;
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 11  

  606  2                    Aeb_targetpress_value = 50 + add_pressure;
*** WARNING C192 IN LINE 606 OF src\app\alogrithm\aeb.c: '=': value truncated
  607  2                    //BrakeSysMode=AebBrakeMode;
  608  2                    //Aeb_targetpress_value   = 100;
  609  2                    //MC_Presure_PID(Aeb_targetpress_value);
  610  2                    break;
  611  2      
  612  2                  default:
  613  2                     phase = 6;
  614  2                     Aeb_targetpress_value =0;
  615  2                     //MC_Presure_PID(Aeb_targetpress_value);
  616  2                     //BrakeSysMode=BoosterBrakeMode;
  617  2                     break;
  618  2                }
  619  1      
  620  1             // State_max =3;
  621  1             // Aeb_targetpress_value =10;
  622  1              //AEB_State_now
  623  1             /* if(BrakeSysMode!=AutoBrakeMode)
  624  1              {
  625  1                      if(AEB_State_now==3)
  626  1                      {
  627  1                              BrakeSysMode=AebBrakeMode;
  628  1                      }
  629  1                      else
  630  1                      {
  631  1                              BrakeSysMode=BoosterBrakeMode;
  632  1                              Aeb_targetpress_value =0;
  633  1                      }
  634  1              }*/
  635  1          //}
  636  1      }
  637         
  638         FP32 accury_calc(void){
  639  1              FP32 dis_r, dis_m, precs;
  640  1              FP32 tt;
  641  1          /*tt = speed_time_d[0] - speed_time_d[calc_t - 15];
  642  1          if (tt > 0)
  643  1              tt = tt*0.5/1000;
  644  1          else
  645  1              tt = (65536 + tt)*0.5/1000;*/
  646  1              tt = 0.1;
  647  1      
  648  1          dis_r    = mean_array(pl, calc_t-15, calc_t-10) - mean_array(pl, 0, 5);
  649  1          dis_real = dis_r > 0 ? dis_r : (-1*dis_r);
  650  1          dis_m    = v_ego*tt/3.6 - 0.5 * acce_present * tt * tt;
  651  1      
  652  1          if (speed_front<1)
  653  1              precs = dis_m - dis_real;
  654  1          else
  655  1              precs = 0;
  656  1      
  657  1          return precs;
  658  1      }
  659         
  660         FP32 calc_ep(void){
  661  1              /*FP32 * ps, s_m, a_e, acce_ms, v_ms,v_f;
  662  1          FP32 t_build = 0.3, v_ego_ms;
  663  1      
  664  1          ps   = *p_p;
  665  1          v_ms = v_ego/3.6;
  666  1          v_f  = v_rel + v_ego;
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 12  

  667  1          s_m  = dis_rel + prec - dis_S0;                           //修正后的理论距离 = 实际距离 + 模型准确度
  668  1      
  669  1          v_ego_ms = v_ego/3.6;
  670  1          acce_ms  = acce_present*-1;
  671  1      
  672  1          if (v_f < 1 && (mean_array(ps, 0, 19) > mean_array(pp, 0, 9) * 0.9) &&\
  673  1              (mean_array(ps, calc_t-21, calc_t-1) < mean_array(pp, 0, 9)*1.1) &&\
  674  1              mean_array(pp, 0, 9) > 2  && v_ms > 1.0 && mean_array(ps, 0, 9)>2 &&\
  675  1              v_ego_ms/acce_ms > 0.5 && prec>0.5){
  676  1      
  677  1              phase = 7;
  678  1              /*a_e = -2*(6*s_m - 3*t_build*v_ego_ms + acce_ms*pow(t_build,2.0) - \
  679  1               pow((36*pow(s_m,2.0)+6*s_m*acce_ms*pow(t_build,2.0)-36*s_m*t_build*v_ego_ms\
  680  1               +pow(acce_ms,2.0)*pow(t_build,4.0)-6*acce_ms*v_ego_ms*pow(t_build,3.0) +\
  681  1               12*pow(t_build,2)*pow(v_ego_ms,2.0)),0.5))/pow(t_build,2.0);
  682  1              **
  683  1      
  684  1              a_e = 4;
  685  1              if (round(a_e) >= 1  && round(a_e) < 4.0)
  686  1                  Ep_add = (round(a_e))*17.0;
  687  1              else if (round(a_e)<1 && round(a_e)>=0)
  688  1                  Ep_add = 0.0;
  689  1              else if (round(a_e)>= 4.0)
  690  1                  Ep_add = 70;
  691  1              else
  692  1                  Ep_add = 0.0;
  693  1      
  694  1          } else */
  695  1              if (TTC < 0.6 && TTC>0) {
  696  2              phase  = 8;
  697  2              Ep_add = 50.0;
  698  2      
  699  2          } else {
  700  2              phase  = 9;
  701  2              Ep_add = 0.0;
  702  2          }
  703  1      
  704  1          return Ep_add;
  705  1      }
  706         
  707         FP32 pres_p(void){
  708  1              FP32 exp_add;
  709  1      
  710  1          exp_add    = calc_ep();
  711  1          *(p_ep+1) = MAX(*p_ep, *(p_ep+1));
  712  1          *p_ep     = exp_add;
  713  1      
  714  1          return MAX(*p_ep, *(p_ep+1));
  715  1      }
  716         
  717         
  718         //2019年6月20日下午3点22分：大陆雷达断开后，最小距离一直是零，故在CondFunc()函数中添加了&& distance_long>3
             -，来解决这一情况。


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        5698     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =         155     --------
C166 COMPILER V7.57.0, AEB                                                                 06/29/2020 10:22:07 PAGE 13  

  FAR-DATA SIZE    =        1794     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          14     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
