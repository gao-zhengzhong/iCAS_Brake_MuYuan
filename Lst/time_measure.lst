C166 COMPILER V7.57.0, TIME_MEASURE                                                        01/20/2021 09:50:58 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE TIME_MEASURE
OBJECT MODULE PLACED IN .\Obj\time_measure.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\time measure\time_measure.c MODV2 LARGE BROWSE INCDIR(.\src;.\
                    -src\bsw;.\src\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnosti
                    -c;.\src\app\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app
                    -\time measure;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\time_measure.lst) OBJECT(.\Obj\time_measure.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *               All Rights Reserved.                                                           *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : time_measure.c
    9         * Instance      : 
   10         * Description   : A time measurement function that measures execution time 
   11         *                                 and scheduling cycles
   12         *-----------------------------------------------------------------------
   13         * Version: v0.1
   14         * Date   : 2020.3.19 
   15         * Author : Zhu jinfeng
   16         ***********************************************************************/
   17         /*-History--------------------------------------------------------------
   18         * Version    Date           Name            Changes and comments
   19         ------------------------------------------------------------------------
   20         * 0.1       2020.3.19     Zhu jinfeng                   Initial version
   21         *=====================================================================*/
   22         #include "XC23xxBREGS.h"
   23         #include "Para_Fun_Type.h"
   24         #include "GPT2.h"
   25         #include "time_measure.h"
   26         #include "rte.h"
   27         
   28         static BOOLEAN bTimMeasureEnable = FALSE;
   29         T_TimeMeasure tTimeMeasure[TIME_MESSAGE_NUMBER] = {0};
   30         static BOOLEAN btaskPeriodMeasureCondition[TIME_MESSAGE_NUMBER] = {0};
   31         static BOOLEAN btaskExecuteMeasureCondition[TIME_MESSAGE_NUMBER] = {0};
   32         
   33         
   34         /***********************************************************************
   35         *  Name        : TimeMeasure_Init
   36         *  Description : After power on, Initializes the variables used for 
   37         *                timing measurements and start GPT2 Timer5.
   38         *  Parameter   : None
   39         *  Returns     : None
   40         ***********************************************************************/
   41         void TimeMeasure_Init(void)
   42         {     
   43  1          INT8U i = 0; 
   44  1          for(i = 0; i < TIME_MESSAGE_NUMBER; i++)
   45  1          {
   46  2                      tTimeMeasure[i].u16taskStartTime = 0;
   47  2                      tTimeMeasure[i].u16taskEndTime = 0;
   48  2      
   49  2                      tTimeMeasure[i].u16taskExecuteTime = 0;
   50  2                      tTimeMeasure[i].u16taskExecuteTimeMin = 0xFFFFu;
   51  2                      tTimeMeasure[i].u16taskExecuteTimeMax = 0;
   52  2      
C166 COMPILER V7.57.0, TIME_MEASURE                                                        01/20/2021 09:50:58 PAGE 2   

   53  2                      tTimeMeasure[i].u16taskPeriodTime = 0;
   54  2                      tTimeMeasure[i].u16taskPeriodTimeMin = 0xFFFFu;
   55  2                      tTimeMeasure[i].u16taskPeriodTimeMax = 0;
   56  2      
   57  2                      btaskPeriodMeasureCondition[i] = FALSE;
   58  2                      btaskExecuteMeasureCondition[i] = FALSE;
   59  2          } 
   60  1      }
   61         
   62         
   63         /***********************************************************************
   64         *  Name        : TimeMeasure_StartTimer
   65         *  Description : Start the GPT timer 5 counter.
   66         *  Parameter   : None
   67         *  Returns     : None
   68         ***********************************************************************/
   69         void TimeMeasure_StartTimer(void)
   70         {
   71  1              GPT2_vStartTmr_GPT2_TIMER_5(); /* GPT2 Timer5 start counting */
   72  1              bTimMeasureEnable = TRUE;
   73  1      }
   74         
   75         /***********************************************************************
   76         *  Name        : TimeMeasure_StopTimer
   77         *  Description : Stop the GPT timer 5 counter.
   78         *  Parameter   : None
   79         *  Returns     : None
   80         ***********************************************************************/
   81         void TimeMeasure_StopTimer(void)
   82         {
   83  1              GPT2_vStopTmr_GPT2_TIMER_5(); /* GPT2 Timer5 stop counting */
   84  1              bTimMeasureEnable = FALSE;
   85  1      }
   86         
   87         
   88         /***********************************************************************
   89         *  Name        : TimeMeasure_Start
   90         *  Description : Record the counter value before the task starts. And the 
   91         *                               call cycle can be calculated based on two differences.                           
   92         *  Parameter   : None
   93         *  Returns     : None
   94         ***********************************************************************/
   95         void TimeMeasure_Start(INT8U taskId)
   96         {
   97  1              static INT16U u16taskStartTimeLast[TIME_MESSAGE_NUMBER] = {0u, 0u, 0u, 0u};
   98  1              
   99  1      #if (1 == GPT2_TIME_MEASURE_EN)
  100  1          if (TRUE == bTimMeasureEnable)
  101  1          {
  102  2                      tTimeMeasure[taskId].u16taskStartTime = GPT2_uwReadTmr_GPT2_TIMER_5();
  103  2                      
  104  2                      btaskExecuteMeasureCondition[taskId] = TRUE;
  105  2                      
  106  2                      if(TRUE == btaskPeriodMeasureCondition[taskId])
  107  2                      {
  108  3                              if(tTimeMeasure[taskId].u16taskStartTime > u16taskStartTimeLast[taskId])
  109  3                              {
  110  4                                      tTimeMeasure[taskId].u16taskPeriodTime = tTimeMeasure[taskId].u16taskStartTime - u16taskStartTimeLast[
             -taskId];
  111  4                              }
  112  3                              else
  113  3                              {
C166 COMPILER V7.57.0, TIME_MEASURE                                                        01/20/2021 09:50:58 PAGE 3   

  114  4                                      tTimeMeasure[taskId].u16taskPeriodTime = 0xFFFFu - u16taskStartTimeLast[taskId] + tTimeMeasure[taskId]
             -.u16taskStartTime;
  115  4                              }
  116  3                              
  117  3                              if(tTimeMeasure[taskId].u16taskPeriodTime < tTimeMeasure[taskId].u16taskPeriodTimeMin)
  118  3                              {
  119  4                                      tTimeMeasure[taskId].u16taskPeriodTimeMin = tTimeMeasure[taskId].u16taskPeriodTime;
  120  4                              }
  121  3                              if(tTimeMeasure[taskId].u16taskPeriodTime > tTimeMeasure[taskId].u16taskPeriodTimeMax)
  122  3                              {
  123  4                                      tTimeMeasure[taskId].u16taskPeriodTimeMax = tTimeMeasure[taskId].u16taskPeriodTime;
  124  4                              }
  125  3                      }
  126  2                      else
  127  2                      {
  128  3                              btaskPeriodMeasureCondition[taskId] = TRUE;
  129  3                      }
  130  2      
  131  2                      u16taskStartTimeLast[taskId] = tTimeMeasure[taskId].u16taskStartTime;
  132  2          }
  133  1      #endif
  134  1              
  135  1      }
  136         
  137         
  138         /***********************************************************************
  139         *  Name        : TimeMeasure_End
  140         *  Description : The counter value is recorded after the task. And the 
  141         *                                task execution time can be calculated based on two differences.
  142         *  Parameter   : None
  143         *  Returns     : None
  144         ***********************************************************************/
  145         void TimeMeasure_End(INT8U taskId)
  146         {
  147  1      #if (1 == GPT2_TIME_MEASURE_EN)
  148  1          if (TRUE == bTimMeasureEnable)
  149  1          {
  150  2                      tTimeMeasure[taskId].u16taskEndTime = GPT2_uwReadTmr_GPT2_TIMER_5();
  151  2            
  152  2                      if(TRUE == btaskExecuteMeasureCondition[taskId])
  153  2                      {
  154  3                              if(tTimeMeasure[taskId].u16taskEndTime > tTimeMeasure[taskId].u16taskStartTime)
  155  3                              {
  156  4                                      tTimeMeasure[taskId].u16taskExecuteTime = tTimeMeasure[taskId].u16taskEndTime - tTimeMeasure[taskId].u
             -16taskStartTime;
  157  4                              }
  158  3                              else
  159  3                              {
  160  4                                      tTimeMeasure[taskId].u16taskExecuteTime = 0xFFFFu - tTimeMeasure[taskId].u16taskStartTime + tTimeMeasu
             -re[taskId].u16taskEndTime;
  161  4                              }
  162  3                              
  163  3                              if(tTimeMeasure[taskId].u16taskExecuteTime < tTimeMeasure[taskId].u16taskExecuteTimeMin)
  164  3                              {
  165  4                                      tTimeMeasure[taskId].u16taskExecuteTimeMin = tTimeMeasure[taskId].u16taskExecuteTime;
  166  4                              }
  167  3                              if(tTimeMeasure[taskId].u16taskExecuteTime > tTimeMeasure[taskId].u16taskExecuteTimeMax)
  168  3                              {
  169  4                                      tTimeMeasure[taskId].u16taskExecuteTimeMax = tTimeMeasure[taskId].u16taskExecuteTime;
  170  4                              }
  171  3                      }
  172  2                      else
C166 COMPILER V7.57.0, TIME_MEASURE                                                        01/20/2021 09:50:58 PAGE 4   

  173  2                      {
  174  3                              btaskExecuteMeasureCondition[taskId] = FALSE;
  175  3                      }
  176  2          }
  177  1      #endif
  178  1              
  179  1      }
  180         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         414     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           9     --------
  FAR-DATA SIZE    =          72     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =         106     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
