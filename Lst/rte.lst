C166 COMPILER V7.57.0, RTE                                                                 11/13/2020 15:09:26 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE RTE
OBJECT MODULE PLACED IN .\Obj\rte.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\rte\rte.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\src\driv
                    -er;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\mode c
                    -ontrol;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measure;.\sr
                    -c\app\rte) MODV2 DEBUG PRINT(.\Lst\rte.lst) OBJECT(.\Obj\rte.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *               All Rights Reserved.                                                           *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : rte.c
    9         * Instance      : 
   10         * Description   : A time measurement function that measures execution time 
   11         *                                 and scheduling cycles
   12         *-----------------------------------------------------------------------
   13         * Version: v0.1
   14         * Date   : 2020.3.19 
   15         * Author : Zhu jinfeng
   16         ***********************************************************************/
   17         /*-History--------------------------------------------------------------
   18         * Version    Date           Name            Changes and comments
   19         ------------------------------------------------------------------------
   20         * 0.1       2020.3.19     Zhu jinfeng                   Initial version
   21         *=====================================================================*/
   22         
   23         #define RTE_GLOBALS
   24         
   25         #include "MAIN.h"
   26         #include "can_if.h"
   27         #include "rte.h"
   28         #include "adc_sample.h"
   29         
   30         /**** Definition of variables ****/
   31         static INT8S TimeBaseCounter;    /* 时序计数变量*/
   32         #define TAB_N 256                //定义查表的点数
   33         #define PI 3.1416                //定义圆周率值
   34         
   35         FP32 temperatureAdTabble[50] =
   36         {
   37                 1002.5793, 987.5587, 964.3300, 930.5421, 884.4136, 856.3534, 824.9348, 790.2895, 752.7188, 712.6531,
   38                 670.7021, 627.5324, 583.8639, 540.4084, 497.8097, 456.6134, 417.2502, 380.0265, 345.1465, 312.7312,
   39                 282.8052, 255.3540, 230.3063, 207.5516, 186.9913, 183.1306, 179.3513, 175.6530, 172.0337, 168.4915,
   40                 165.0270, 161.6379, 158.3247, 155.0832, 151.9153, 148.8197, 145.7935, 142.8366, 139.9474, 137.1258,
   41                 134.3701, 131.6782, 129.0516, 126.4864, 123.9822, 121.5402, 119.1564, 116.8317, 114.5638, 112.3519 
   42         };
   43         
   44         INT8U temperatureValueTable[50] =
   45         {
   46                 -40,-30,-20,-10,0,      5,      10,     15,     20,     25,
   47                 30,     35,     40,     45,     50,     55,     60,     65,     70,     75,
   48                 80,     85,     90,     95,     100,101,102,103,104,105,
   49                 106,107,108,109,110,111,112,113,114,115,
   50                 116,117,118,119,120,121,122,123,124,125
   51         };
   52         
C166 COMPILER V7.57.0, RTE                                                                 11/13/2020 15:09:26 PAGE 2   

   53         /**** Declaration of functions ****/
   54         FP32 SIN_TAB[TAB_N / 4 + 1] = {                                  //初始化1/4的sin表(256点)
   55             0.0000,0.0245,0.0491,0.0735,0.0980,0.1224,0.1467,0.1710,
   56             0.1951,0.2191,0.2430,0.2667,0.2903,0.3137,0.3369,0.3599,
   57             0.3827,0.4052,0.4276,0.4496,0.4714,0.4929,0.5141,0.5350,
   58             0.5556,0.5758,0.5957,0.6152,0.6344,0.6532,0.6716,0.6895,
   59             0.7071,0.7242,0.7410,0.7572,0.7730,0.7883,0.8032,0.8176,
   60             0.8315,0.8449,0.8577,0.8701,0.8819,0.8932,0.9040,0.9142,
   61             0.9239,0.9330,0.9415,0.9495,0.9569,0.9638,0.9700,0.9757,
   62             0.9808,0.9853,0.9892,0.9925,0.9952,0.9973,0.9988,0.9997,
   63             1.0000
   64         };
   65         
   66         /***********************************************************************
   67         *  Name        : Rte_Init
   68         *  Description : initialization of variable and Enable CAN.
   69         *  Parameter   : None
   70         *  Returns     : None
   71         ***********************************************************************/
   72         void Rte_Init(void)
   73         {
   74  1              SystemMode_u8_Sig = 0;        /* 系统模式 */
   75  1              PDTFinish_u8_Sig = 0;         /* PowerDown模式结束标志位 */
   76  1              PUTFinish_u8_Sig = 0;         /* PowerUpTest模式结束标志位 */
   77  1              PDFinish_u8_Sig = 0;          /* PowerDownTest模式结束标志位*/
   78  1              NormalFinish_u8_Sig = 0;      /* Normal模式结束标志位 */
   79  1              PDTtoPUTflag_u8_Sig = 0;      /* PowerDown到PowerUpTest模式标志位*/
   80  1              MaintenStatus_u8_Sig = 0;     /* 维护模式标志位  */
   81  1              IGNStatus_u8_Sig = 0;         /* 点火信号状态*/
   82  1              MaintenLevel_u8_Sig = 0;      /* 维护信号状态*/
   83  1              FaultLevel_u8_Sig = 0;        /* 目前所发生故障的等级*/
   84  1              VehicleStatus_u8_Sig = 0;     /* 车辆状态 是否为停止状态 */
   85  1              VehSpeedFault_u8_Sig = 0;     /* 车速故障标识位*/
   86  1              TimeBaseCounter = -1;         /*时序计数器初始化赋值*/
   87  1      
   88  1              MCTimer = 0;
   89  1              g_cylinderExhaustEnFlag = FALSE;
   90  1              g_cylinderExhaustInformFlag = FALSE;
   91  1              g_ecuResetFlag = FALSE;
   92  1              g_pvTestFlag = FALSE;
   93  1              CanEnbale_v_g();            /*CAN0、CAN1 transfer使能*/
   94  1      }
   95         
   96         
   97         /***********************************************************************
   98         *  Name        : Rte_ReadSignalSts
   99         *  Description : Get IO state.
  100         *  Parameter   : None
  101         *  Returns     : None
  102         ***********************************************************************/
  103         void Rte_ReadSignalSts(void)
  104         {
  105  1              const T_ADC *ptr_Adc = Adc_SampleData();
  106  1              
  107  1              if(FALSE == g_adcSimulateDataFlag)
  108  1              {
  109  2                      g_inHwBrakeSwSts = IO_ubReadPin(IO_P4_0); /* read brake switch signal */
  110  2                      
  111  2      #if(1 == EXHAUST_MODE)
                              if(0 == g_inHwBrakeSwSts)
                              {
                                      g_cylinderExhaustEnFlag = TRUE;
C166 COMPILER V7.57.0, RTE                                                                 11/13/2020 15:09:26 PAGE 3   

                                      g_cylinderInitLocationValue = ptr_Adc->mainCylinderTrip_Adc[0] + 10;
                                      g_brakePedalInitLocationValue = ptr_Adc->brakePedalTrip_Adc[0] + 10;
                              }
                              
                              if(ptr_Adc->brakePedalTrip_Adc[0] > g_brakePedalInitLocationValue)
                              {
                                      g_exhaustObjPressure = (ptr_Adc->brakePedalTrip_Adc[0] - g_brakePedalInitLocationValue) / 2;
                              
                                      if(g_exhaustObjPressure > 100)
                                      {
                                              g_exhaustObjPressure = 100;
                                      }
                              }
                              else
                              {
                                      g_exhaustObjPressure = 0;
                              }
              #endif
  133  2              }
  134  1              else
  135  1              {
  136  2                      if(14 == g_adcSimulateDataIndex)
  137  2                      {
  138  3                              if(0 == g_adcSimulateData)
  139  3                              {
  140  4                                      g_inBrakeSwValidSts = FALSE;
  141  4                              }
  142  3                              else
  143  3                              {
  144  4                                      g_inBrakeSwValidSts = TRUE;
  145  4                              }
  146  3                      }
  147  2              }
  148  1              
  149  1              g_inIGNSts = IO_ubReadPin(IO_P7_3); /* read IGN signal */
  150  1              g_inPreDriverSts = IO_ubReadPin(IO_P6_0); /* read pre driver status */
  151  1              g_inWatchDogSts = IO_ubReadPin(IO_P4_3); /* read watch dog status */
  152  1              
  153  1              g_PedalPowerSts = IO_ubReadPin(IO_P7_4); /* read pedal power status */
  154  1              g_CylinderPowerSts = IO_ubReadPin(IO_P7_1); /* read cylinder power status */
  155  1              g_MainRelaySts = IO_ubReadPin(IO_P10_4); /* read main relay status */
  156  1              g_PredriverSts = IO_ubReadPin(IO_P0_7); /* read pre driver status */
  157  1              
  158  1              
  159  1              //g_inBrakeSwValidSts = (g_inHwBrakeSwSts == 0 ? TRUE : FALSE); /* The brake switch signal comes from the
             - hardware */
  160  1              g_inBrakeSwValidSts = VCU_BrakePedalSts; /* The brake switch signal comes from CAN network */
  161  1      }
  162         
  163         
  164         /***********************************************************************
  165         *  Name        : Rte_binarySearch
  166         *  Description : Binary search algorithm to find the value position in a descending table.
  167         *  Parameter   : None
  168         *  Returns     : None
  169         ***********************************************************************/
  170         static INT8U Rte_binarySearch(FP32 *array, INT8U tabLength, INT16U data)//表中数据从大到小
  171         {
  172  1              INT8U start, end, middle = 0;
  173  1              INT8U i;
  174  1      
  175  1          start = 0;
C166 COMPILER V7.57.0, RTE                                                                 11/13/2020 15:09:26 PAGE 4   

  176  1          end = tabLength - 1;
  177  1          i = 0;
  178  1      
  179  1          if (data >= array[start]) return start;
  180  1          else if (data <= array[end]) return end;
  181  1      
  182  1          while (start < end)
  183  1          {
  184  2              middle = (start + end) / 2;
*** WARNING C192 IN LINE 184 OF src\app\rte\rte.c: '=': value truncated
  185  2      
  186  2              if (data == array[middle]) 
  187  2                              break;
  188  2              if (data < array[middle] && data > array[middle + 1]) 
  189  2                              break;
  190  2      
  191  2              if (data > array[middle]) 
  192  2                              end = middle;
  193  2              else 
  194  2                              start = middle;
  195  2      
  196  2              if (i++ > tabLength) 
  197  2                              break;
  198  2          }
  199  1      
  200  1          if (start > end) 
  201  1                      return 0;
  202  1      
  203  1          return middle;
  204  1      }
  205         
  206         
  207         /***********************************************************************
  208         *  Name        : Rte_calcTemperature
  209         *  Description : According to the adc value, look up the table to get the temperature value.
  210         *  Parameter   : None
  211         *  Returns     : None
  212         ***********************************************************************/
  213         INT8S Rte_calcTemperature(INT16U data)
  214         {
  215  1              FP32 temp = 0;
  216  1              INT8U temploc = 0;
  217  1      
  218  1          temploc = Rte_binarySearch(temperatureAdTabble, 50, data);
  219  1      
  220  1          temp = (temperatureAdTabble[temploc] - data) / \
  221  1                      (temperatureAdTabble[temploc] - temperatureAdTabble[temploc + 1]) * \
  222  1                      (temperatureValueTable[temploc + 1] - temperatureValueTable[temploc]) + \
  223  1                      temperatureValueTable[temploc];
  224  1      
  225  1          return (INT8S)temp;
  226  1      }
  227         /***********************************************************************
  228         *  Name        : Sin_Tap
  229         *  Description : None.
  230         *  Parameter   : None
  231         *  Returns     : None
  232         ***********************************************************************/
  233         FP32 Sin_Tap(FP32 pi)
  234         {
  235  1              INT16S n;
  236  1          FP32 a;
C166 COMPILER V7.57.0, RTE                                                                 11/13/2020 15:09:26 PAGE 5   

  237  1      
  238  1          n=(INT16S)(pi * TAB_N / 2 / PI);             // SIN_TAB[i] = sin(2*PI*i/TAB_N);
  239  1              
  240  1          if(n >= 0 && n <= TAB_N / 4 )                // 0 ~ PI/2
  241  1          {
  242  2              a = SIN_TAB[n];
  243  2          }
  244  1          else if(n > TAB_N / 4 && n <= TAB_N / 2)    // PI ~ 3/4*PI
  245  1          {
  246  2              n = TAB_N/2 - n;
  247  2              a = SIN_TAB[n];
  248  2          }
  249  1          else if( n > TAB_N / 2 && n <= TAB_N * 3 / 4)
  250  1              {
  251  2                  n = n - TAB_N / 2;
  252  2                      a = SIN_TAB[n] * (-1);
  253  2              }
  254  1              else
  255  1              {
  256  2                      n = TAB_N - n;
  257  2                      a = SIN_TAB[n] * (-1);
  258  2              }
  259  1          return a;   
  260  1      }
  261         
  262         INT8U Rte_PreDriverOpenDelay(void)
  263         {
  264  1              static INT8U u8PreDriverOpenCnt = 0;
  265  1              
  266  1              if(u8PreDriverOpenCnt >= 40)
  267  1              {
  268  2                      IO_vSetPin(IO_P0_7); /* open pre driver */
  269  2              
  270  2                      return 1;
  271  2              }
  272  1              else
  273  1              {
  274  2                      u8PreDriverOpenCnt++;
  275  2                      
  276  2                      IO_vResetPin(IO_P0_7); /* close pre driver */
  277  2                      return 0;
  278  2              }
  279  1      }
  280         
  281         void Rte_WaitDriverRampDown(void)
  282         {
  283  1              static INT16U u16PreDriverRampDownCnt = 0;
  284  1              
  285  1          if(0 == IGNStatus_u8_Sig)
  286  1          {
  287  2              if(u16PreDriverRampDownCnt >= 40)
  288  2              {
  289  3                  NormalFinish_u8_Sig = 1;
  290  3              } 
  291  2                      else
  292  2                      {
  293  3                              u16PreDriverRampDownCnt++;
  294  3              }
  295  2          } 
  296  1              else
  297  1              {
  298  2              u16PreDriverRampDownCnt = 0;
C166 COMPILER V7.57.0, RTE                                                                 11/13/2020 15:09:26 PAGE 6   

  299  2          }
  300  1      }
  301         
  302         
  303         INT8U Rte_IGNStatusHandle(void)
  304         {
  305  1              static INT8U u8IgOffTimeCnt = 0;
  306  1              static INT8U u8IgOnTimeCnt = 0;
  307  1      
  308  1              if(0 == g_inIGNSts)
  309  1              {
  310  2                      u8IgOnTimeCnt = 0;
  311  2                      u8IgOffTimeCnt++;
  312  2                      if(u8IgOffTimeCnt >= IG_OFF_DURATION)
  313  2                      {
  314  3                              u8IgOffTimeCnt = IG_OFF_DURATION;
  315  3                              return IG_OFF;
  316  3                      }
  317  2              }
  318  1              else
  319  1              {
  320  2                      u8IgOffTimeCnt = 0;
  321  2                      u8IgOnTimeCnt++;
  322  2                      if(u8IgOnTimeCnt >= IG_ON_DURATION)
  323  2                      {
  324  3                              u8IgOnTimeCnt = IG_ON_DURATION;
  325  3                              return IG_ON;
  326  3                      }
  327  2              }
  328  1      
  329  1              return IG_ON;
  330  1      }
  331         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1268     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =         129     --------
  FAR-DATA SIZE    =         510     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =         552     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
