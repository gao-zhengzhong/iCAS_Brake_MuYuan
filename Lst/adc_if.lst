C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE ADC_IF
OBJECT MODULE PLACED IN .\Obj\adc_if.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\interaction\adc_if.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\s
                    -rc\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app
                    -\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measu
                    -re;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\adc_if.lst) OBJECT(.\Obj\adc_if.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : adc_if.c
    9         * Instance      : 
   10         * Description   : ADC sample interface
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 7,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 7,2019     Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "XC23xxBREGS.h"
   26         
   27         #include "adc_if.h"
   28         #include "rte.h"
   29         #include "ADC0.h"
   30         #include "ADC1.h"
   31         
   32         #define ADC_IF_GLOBALS
   33         
   34         
   35         /**** Definition of variables ****/
   36         ADC_IF_STAT T_ADC_IF tAdcIf = {0};
   37         
   38         
   39         /**** Declaration of functions ****/
   40         ADC_IF_STAT void AdcIf_VehiclePowerVoltage(void);
   41         ADC_IF_STAT void AdcIf_BrakeMotorVlinkSensorVoltage(void);
   42         ADC_IF_STAT void AdcIf_BrakeMotorAPhaseSensorVoltage(void);
   43         ADC_IF_STAT void AdcIf_BrakeMotorBPhaseSnesorVoltage(void);
   44         ADC_IF_STAT void AdcIf_BrakeMainCylinderSensorVoltage(void);
   45         ADC_IF_STAT void AdcIf_BrakePedalLocationSensorVoltage(void);
   46         ADC_IF_STAT void AdcIf_BrakeMainCylinderPressureSensorVoltage(void);
   47         ADC_IF_STAT void AdcIf_BrakePedalLocationSensor1(void);
   48         ADC_IF_STAT void AdcIf_BrakePedalLocationSensor2(void);
   49         ADC_IF_STAT void AdcIf_BrakeMainCylinderLocationSensor1(void);
   50         ADC_IF_STAT void AdcIf_BrakeMainCylinderLocationSensor2(void);
   51         ADC_IF_STAT void AdcIf_BrakeMotorCurrentSensor(void);
   52         ADC_IF_STAT void AdcIf_EnvironmentTemperatureSensor(void);
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 2   

   53         ADC_IF_STAT void AdcIf_BrakeMainCylinderPressureSensor(void);
   54         ADC_IF_STAT void AdcIf_ReserveSensor1(void);
   55         ADC_IF_STAT void AdcIf_ReserveSensor2(void);
   56         ADC_IF_STAT INT16U AdcIf_SignalSample(INT8U adcCore, INT8U adcChannel);
   57         
   58         
   59         /***********************************************************************
   60         *  Name        : AdcIf_Init
   61         *  Description : After power on, initiliaze ADC sample variable
   62         *  Parameter   : None
   63         *  Returns     : None
   64         ***********************************************************************/
   65         void AdcIf_Init(void)
   66         {
   67  1              memset(&tAdcIf, 0, sizeof(tAdcIf));
   68  1              return;
   69  1      }
   70         
   71         /***********************************************************************
   72         *  Name        : AdcIf_DeInit
   73         *  Description : During running, need initilize ADC sample variable
   74         *  Parameter   : None
   75         *  Returns     : None
   76         ***********************************************************************/
   77         void AdcIf_DeInit(void)
   78         {
   79  1              return;
   80  1      }
   81         
   82         /***********************************************************************
   83         *  Name        : AdcIf_Func
   84         *  Description : ADC sample handle
   85         *  Parameter   : None
   86         *  Returns     : None
   87         ***********************************************************************/
   88         void AdcIf_Func(void)
   89         {
   90  1              if(FALSE == g_adcSimulateDataFlag)
   91  1              {
   92  2                      AdcIf_VehiclePowerVoltage();
   93  2                      AdcIf_BrakeMotorVlinkSensorVoltage();
   94  2                      AdcIf_BrakeMotorAPhaseSensorVoltage();
   95  2                      AdcIf_BrakeMotorBPhaseSnesorVoltage();
   96  2                      AdcIf_BrakeMainCylinderSensorVoltage();
   97  2                      AdcIf_BrakePedalLocationSensorVoltage();
   98  2                      AdcIf_BrakeMainCylinderPressureSensorVoltage();
   99  2                      AdcIf_BrakePedalLocationSensor1();
  100  2                      AdcIf_BrakePedalLocationSensor2();
  101  2                      AdcIf_BrakeMainCylinderLocationSensor1();
  102  2                      AdcIf_BrakeMainCylinderLocationSensor2();
  103  2                      AdcIf_BrakeMotorCurrentSensor();
  104  2                      AdcIf_EnvironmentTemperatureSensor();
  105  2                      AdcIf_BrakeMainCylinderPressureSensor();
  106  2              }
  107  1              else
  108  1              {
  109  2                      switch(g_adcSimulateDataIndex)
  110  2                      {
  111  3                              case 0:
  112  3                                      tAdcIf.vehiclePowerVoltage_Adc = g_adcSimulateData;
  113  3                                      break;
  114  3                              case 1:
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 3   

  115  3                                      tAdcIf.brakeMotorVlinkSensorVoltage_Adc = g_adcSimulateData;
  116  3                                      break;
  117  3                              case 2:
  118  3                                      tAdcIf.brakeMotorAPhaseSensorVoltage_Adc = g_adcSimulateData;
  119  3                                      break;
  120  3                              case 3:
  121  3                                      tAdcIf.brakeMotorBPhaseSensorVoltage_Adc = g_adcSimulateData;
  122  3                                      break;
  123  3                              case 4:
  124  3                                      tAdcIf.brakeMainCylinderSensorVoltage_Adc = g_adcSimulateData;
  125  3                                      break;
  126  3                              case 5:
  127  3                                      tAdcIf.brakePedalLocationSensorVoltage_Adc = g_adcSimulateData;
  128  3                                      break;
  129  3                              case 6:
  130  3                                      tAdcIf.brakeMainCylinderPressureSensorVoltage_Adc = g_adcSimulateData;
  131  3                                      break;
  132  3                              case 7:
  133  3                                      tAdcIf.brakePedalLocationSensor1_Adc = g_adcSimulateData;
  134  3                                      break;
  135  3                              case 8:
  136  3                                      tAdcIf.brakePedalLocationSensor2_Adc = g_adcSimulateData;       
  137  3                                      break;
  138  3                              case 9:
  139  3                                      tAdcIf.brakeMainCylinderLocationSensor1_Adc = g_adcSimulateData;
  140  3                                      break;
  141  3                              case 10:
  142  3                                      tAdcIf.brakeMainCylinderLocationSensor2_Adc = g_adcSimulateData;
  143  3                                      break;
  144  3                              case 11:
  145  3                                      tAdcIf.brakeMotorCurrentSensor_Adc = g_adcSimulateData;
  146  3                                      break;
  147  3                              case 12:
  148  3                                      tAdcIf.environmentTemperatureSensor_Adc = g_adcSimulateData;
  149  3                                      break;
  150  3                              case 13:
  151  3                                      tAdcIf.brakeMainCylinderPressureSensor_Adc = g_adcSimulateData;
  152  3                                      break;
  153  3                              
  154  3                              default:
  155  3                                      break;
  156  3                      }
  157  2              }
  158  1              
  159  1              return;
  160  1      }
  161         
  162         
  163         /***********************************************************************
  164         *  Name        : AdcIf_VehiclePowerVoltage
  165         *  Description : Vehicle main power voltage ADC value
  166         *  Parameter   : None
  167         *  Returns     : None
  168         ***********************************************************************/
  169         ADC_IF_STAT void AdcIf_VehiclePowerVoltage(void)
  170         {
  171  1              tAdcIf.vehiclePowerVoltage_Adc = AdcIf_SignalSample(ADC_CORE_VEHICLE_POWER_VOLTAGE, ADC_CHANNEL_VEHICLE_P
             -OWER_VOLTAGE);
  172  1              return;
  173  1      }
  174         
  175         
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 4   

  176         
  177         /***********************************************************************
  178         *  Name        : AdcIf_BrakeMotorVlinkSensorVoltage
  179         *  Description : Brake motor vlink sensor power voltage ADC value
  180         *  Parameter   : None
  181         *  Returns     : None
  182         ***********************************************************************/
  183         ADC_IF_STAT void AdcIf_BrakeMotorVlinkSensorVoltage(void)
  184         {
  185  1              tAdcIf.brakeMotorVlinkSensorVoltage_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MOTOR_VLINK_VOLTAGE, ADC_CHAN
             -NEL_BRAKE_MOTOR_VLINKE_VOLTAGE);      
  186  1              return;
  187  1      }
  188         
  189         
  190         
  191         /***********************************************************************
  192         *  Name        : AdcIf_BrakeMotorAPhaseSensorVoltage
  193         *  Description : Brake motor A phase sensor power voltage ADC value
  194         *  Parameter   : None
  195         *  Returns     : None
  196         ***********************************************************************/
  197         ADC_IF_STAT void AdcIf_BrakeMotorAPhaseSensorVoltage(void)
  198         {
  199  1              tAdcIf.brakeMotorAPhaseSensorVoltage_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MOTOR_A_PHASE_VOLTAGE, ADC_C
             -HANNEL_BRAKE_MOTOR_A_PHASE_VOLTAGE);
  200  1              return;
  201  1      }
  202         
  203         
  204         /***********************************************************************
  205         *  Name        : AdcIf_BrakeMotorBPhaseSnesorVoltage
  206         *  Description : Brake motor B phase sensor power voltage ADC value
  207         *  Parameter   : None
  208         *  Returns     : None
  209         ***********************************************************************/
  210         ADC_IF_STAT void AdcIf_BrakeMotorBPhaseSnesorVoltage(void)
  211         {
  212  1              tAdcIf.brakeMotorBPhaseSensorVoltage_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MOTOR_B_PHASE_VOLTAGE, ADC_C
             -HANNEL_BRAKE_MOTOR_B_PHASE_VOLTAGE);
  213  1              return;
  214  1      }
  215         
  216         
  217         
  218         /***********************************************************************
  219         *  Name        : AdcIf_BrakeMainCylinderSensorVoltage
  220         *  Description : Brake main cylinder sensor power voltage ADC value
  221         *  Parameter   : None
  222         *  Returns     : None
  223         ***********************************************************************/
  224         ADC_IF_STAT void AdcIf_BrakeMainCylinderSensorVoltage(void)
  225         {
  226  1              tAdcIf.brakeMainCylinderSensorVoltage_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MAIN_CYLINDER_POWER_VOLTAGE
             -, ADC_CHANNEL_BRAKE_MAIN_CYLINDER_POWER_VOLTAGE);
  227  1              return;
  228  1      }
  229         
  230         
  231         
  232         /***********************************************************************
  233         *  Name        : AdcIf_BrakePedalLocationSensorVoltage
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 5   

  234         *  Description : Brake pedal location sensor power voltage ADC value
  235         *  Parameter   : None
  236         *  Returns     : None
  237         ***********************************************************************/
  238         ADC_IF_STAT void AdcIf_BrakePedalLocationSensorVoltage(void)
  239         {
  240  1              tAdcIf.brakePedalLocationSensorVoltage_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_PEDAL_LOCATION_POWER_VOLTA
             -GE, ADC_CHANNEL_BRAKE_PEDAL_LOCATION_POWER_VOLTAGE);
  241  1              return;
  242  1      }
  243         
  244         
  245         
  246         /***********************************************************************
  247         *  Name        : AdcIf_BrakeMainCylinderPressureSensorVoltage
  248         *  Description : Brake main cylinder pressure sensor power voltage ADC value
  249         *  Parameter   : None
  250         *  Returns     : None
  251         ***********************************************************************/
  252         ADC_IF_STAT void AdcIf_BrakeMainCylinderPressureSensorVoltage(void)
  253         {
  254  1              tAdcIf.brakeMainCylinderPressureSensorVoltage_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MAIN_CYLINDER_PRESS
             -URE_POWER_VOLTAGE, ADC_CHANNEL_BRAKE_MAIN_CYLINDER_PRESSURE_POWER_VOLTAGE);
  255  1              return;
  256  1      }
  257         
  258         
  259         /***********************************************************************
  260         *  Name        : AdcIf_BrakePedalLocationSensor1
  261         *  Description : Brake pedal location sensor 1 ADC value
  262         *  Parameter   : None
  263         *  Returns     : None
  264         ***********************************************************************/
  265         ADC_IF_STAT void AdcIf_BrakePedalLocationSensor1(void)
  266         {
  267  1              tAdcIf.brakePedalLocationSensor1_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_PEDAL_LOCATION_1, ADC_CAHNNEL_BR
             -AKE_PEDAL_LOCATION_1);
  268  1              return;
  269  1      }
  270         
  271         
  272         /***********************************************************************
  273         *  Name        : AdcIf_BrakePedalLocationSensor2
  274         *  Description : Brake pedal location sensor 2 ADC value
  275         *  Parameter   : None
  276         *  Returns     : None
  277         ***********************************************************************/
  278         ADC_IF_STAT void AdcIf_BrakePedalLocationSensor2(void)
  279         {
  280  1              tAdcIf.brakePedalLocationSensor2_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_PEDAL_LOCATION_2, ADC_CAHNNEL_BR
             -AKE_PEDAL_LOCATION_2);
  281  1              return;
  282  1      }
  283         
  284         
  285         /***********************************************************************
  286         *  Name        : AdcIf_BrakeMainCylinderLocationSensor1
  287         *  Description : Brake main cylinder location sensor 1 ADC value
  288         *  Parameter   : None
  289         *  Returns     : None
  290         ***********************************************************************/
  291         ADC_IF_STAT void AdcIf_BrakeMainCylinderLocationSensor1(void)
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 6   

  292         {
  293  1              tAdcIf.brakeMainCylinderLocationSensor1_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MAIN_CYLINDER_LOCATION_1,
             - ADC_CAHNNEL_BRAKE_MAIN_CYLINDER_LOCATION_1);
  294  1              return;
  295  1      }
  296         
  297         
  298         /***********************************************************************
  299         *  Name        : AdcIf_BrakeMainCylinderLocationSensor2
  300         *  Description : Brake main cylinder location sensor 2 ADC value
  301         *  Parameter   : None
  302         *  Returns     : None
  303         ***********************************************************************/
  304         ADC_IF_STAT void AdcIf_BrakeMainCylinderLocationSensor2(void)
  305         {
  306  1              tAdcIf.brakeMainCylinderLocationSensor2_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MAIN_CYLINDER_LOCATION_2,
             - ADC_CAHNNEL_BRAKE_MAIN_CYLINDER_LOCATION_2);
  307  1              return;
  308  1      }
  309         
  310         
  311         /***********************************************************************
  312         *  Name        : AdcIf_BrakeMotorCurrentSensor
  313         *  Description : Brake motor current ADC value
  314         *  Parameter   : None
  315         *  Returns     : None
  316         ***********************************************************************/
  317         ADC_IF_STAT void AdcIf_BrakeMotorCurrentSensor(void)
  318         {
  319  1              tAdcIf.brakeMotorCurrentSensor_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MOTOR_CURRENT, ADC_CHANNEL_BRAKE_M
             -OTOR_CURRENT);
  320  1              return;
  321  1      }
  322         
  323         
  324         /***********************************************************************
  325         *  Name        : AdcIf_EnvironmentTemperatureSensor
  326         *  Description : Environment temperature sensor ADC value
  327         *  Parameter   : None
  328         *  Returns     : None
  329         ***********************************************************************/
  330         ADC_IF_STAT void AdcIf_EnvironmentTemperatureSensor(void)
  331         {
  332  1              tAdcIf.environmentTemperatureSensor_Adc = AdcIf_SignalSample(ADC_CORE_ENVIRONMENT_TEMPERATURE, ADC_CHANNE
             -L_ENVIRONMENT_TEMPERATURE);
  333  1              return;
  334  1      }
  335         
  336         
  337         /***********************************************************************
  338         *  Name        : AdcIf_BrakeMainCylinderPressureSensor
  339         *  Description : Brake main cylinder pressure sensor ADC value
  340         *  Parameter   : None
  341         *  Returns     : None
  342         ***********************************************************************/
  343         ADC_IF_STAT void AdcIf_BrakeMainCylinderPressureSensor(void)
  344         {
  345  1              tAdcIf.brakeMainCylinderPressureSensor_Adc = AdcIf_SignalSample(ADC_CORE_BRAKE_MAIN_CYLINDER_PRESSURE, AD
             -C_CAHNNEL_BRAKE_MAIN_CYLINDER_PRESSURE);
  346  1              return;
  347  1      }
  348         
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 7   

  349         
  350         /***********************************************************************
  351         *  Name        : AdcIf_ReserveSensor1
  352         *  Description : Reserve sensor 1 ADC value
  353         *  Parameter   : None
  354         *  Returns     : None
  355         ***********************************************************************/
  356         ADC_IF_STAT void AdcIf_ReserveSensor1(void)
  357         {
  358  1              tAdcIf.reserveSensor1_Adc = AdcIf_SignalSample(ADC_CORE_RESERVE_1, ADC_CAHNNEL_RESERVE_1);
  359  1              return;
  360  1      }
  361         
  362         
  363         /***********************************************************************
  364         *  Name        : AdcIf_ReserveSensor2
  365         *  Description : Reserve sensor 2 ADC value
  366         *  Parameter   : None
  367         *  Returns     : None
  368         ***********************************************************************/
  369         ADC_IF_STAT void AdcIf_ReserveSensor2(void)
  370         {
  371  1              tAdcIf.reserveSensor2_Adc = AdcIf_SignalSample(ADC_CORE_RESERVE_2, ADC_CAHNNEL_RESERVE_2);
  372  1              return;
  373  1      }
  374         
  375         
  376         
  377         
  378         /***********************************************************************
  379         *  Name        : AdcIf_SignalSample
  380         *  Description : signal ADC sample function
  381         *  Parameter   : AdcCore:0-ADC0, 1-ADC1
  382         *                adcChannel: ADC channel of ADC0/ADC1 core
  383         *  Returns     : adcValue: ADC factual value
  384         ***********************************************************************/
  385         ADC_IF_STAT INT16U AdcIf_SignalSample(INT8U adcCore, INT8U adcChannel)
  386         {
  387  1              ADC_IF_STAT INT16U adcValue = 0u;
  388  1              
  389  1              switch (adcCore)
  390  1              {
  391  2                      case CORE_ADC0:
  392  2                      {
  393  3                              ADC0_vStartSeq2ReqChNum(0,0,0,adcChannel);
  394  3                              while(ADC0_uwBusy());
  395  3                              switch(adcChannel)
  396  3                              {
  397  4                                      case 0:
  398  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_0;
  399  4                                      break;
  400  4                                      
  401  4                                      case 2:
  402  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_1;
  403  4                                      break;
  404  4                                      
  405  4                                      case 3:
  406  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_2;
  407  4                                      break;
  408  4                                      
  409  4                                      case 4:
  410  4                                      case 5:
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 8   

  411  4                                      case 8:
  412  4                                      case 13:
  413  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_3;
  414  4                                      break;
  415  4                                      
  416  4                                      case 9:
  417  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_4;
  418  4                                      break;
  419  4                                      
  420  4                                      case 10:
  421  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_5;
  422  4                                      break;
  423  4                                      
  424  4                                      case 11:
  425  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_6;
  426  4                                      break;
  427  4                                      
  428  4                                      case 15:
  429  4                                              adcValue = ADC0_uwGetResultData_RESULT_REG_7;
  430  4                                      break;
  431  4                                      
  432  4                                      default:
  433  4                                      break;
  434  4                              }       
  435  3                      }break;
  436  2                      
  437  2                      case CORE_ADC1:
  438  2                      {
  439  3                              ADC1_vStartSeq2ReqChNum(0,0,0,adcChannel);
  440  3                              while(ADC1_uwBusy());
  441  3                              switch(adcChannel)
  442  3                              {
  443  4                                      case 0:
  444  4                                              adcValue = ADC1_uwGetResultData_RESULT_REG_0;
  445  4                                      break;
  446  4                                      
  447  4                                      case 2:
  448  4                                              adcValue = ADC1_uwGetResultData_RESULT_REG_1;
  449  4                                      break;
  450  4                                      
  451  4                                      case 4:
  452  4                                              adcValue = ADC1_uwGetResultData_RESULT_REG_3;
  453  4                                      break;
  454  4                                      
  455  4                                      default:
  456  4                                      break;
  457  4                              }
  458  3                      }break;
  459  2      
  460  2                      default:
  461  2                      break;
  462  2              }
  463  1              
  464  1              return adcValue;
  465  1      }
  466         
  467         
  468         /***********************************************************************
  469         *  Name        : AdcIf_InterfaceData
  470         *  Description : ADC sample module interface data
  471         *  Parameter   : None
  472         *  Returns     : ADC sample data structure access address
C166 COMPILER V7.57.0, ADC_IF                                                              12/25/2020 20:36:08 PAGE 9   

  473         ***********************************************************************/
  474         const T_ADC_IF* AdcIf_InterfaceData(void)
  475         {
  476  1              return (&tAdcIf);
  477  1      }       
  478         
  479         /* _END_OF_ADC_IF_ */
*** WARNING C174 IN LINE 356 OF src\interaction\adc_if.c: 'AdcIf_ReserveSensor1': unreferenced 'static' function
*** WARNING C174 IN LINE 369 OF src\interaction\adc_if.c: 'AdcIf_ReserveSensor2': unreferenced 'static' function


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1166     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           2     --------
  FAR-DATA SIZE    =          32     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          44     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
