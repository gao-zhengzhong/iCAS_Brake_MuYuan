C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE CAN_IF
OBJECT MODULE PLACED IN .\Obj\can_if.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\bsw\can\can_if.c MODV2 LARGE BROWSE INCDIR(.\src;.\src\bsw;.\src\d
                    -river;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnostic;.\src\app\mod
                    -e control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app\time measure;.
                    -\src\app\rte) MODV2 DEBUG PRINT(.\Lst\can_if.lst) OBJECT(.\Obj\can_if.obj) 

 stmt lvl     source

    1         //****************************************************************************
    2         // @Module        Project Settings
    3         // @Filename      can_if.c
    4         // @Project       P300.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon XC2365B-40F80
    7         //
    8         // @Compiler      Keil
    9         //
   10         // @Codegenerator 2.0
   11         //
   12         // @Description   This file contains the project initialization function.
   13         //
   14         //----------------------------------------------------------------------------
   15         // @Date          2020-03-04 15:47:42
   16         //
   17         //****************************************************************************
   18         
   19         // USER CODE BEGIN (MAIN_General,1)
   20         
   21         // USER CODE END
   22         
   23         
   24         
   25         //****************************************************************************
   26         // @Project Includes
   27         //****************************************************************************
   28         
   29         // USER CODE BEGIN (MAIN_General,2)
   30         
   31         #include "can.h"
   32         #include "can_if.h"
   33         #include "can_com.h"
   34         #include "desc_ser.h"
   35         #include "IO.h"
   36         #include "MAIN.h"
   37         #include "rte.h"
   38         
   39         #define CAN_IF_GLOBALS
   40         
   41         // USER CODE END
   42         
   43         
   44         //****************************************************************************
   45         // @Macros
   46         //****************************************************************************
   47         
   48         // USER CODE BEGIN (MAIN_General,3)
   49         
   50         // USER CODE END
   51         
   52         
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 2   

   53         //****************************************************************************
   54         // @Defines
   55         //****************************************************************************
   56         
   57         // USER CODE BEGIN (MAIN_General,4)
   58         
   59         // USER CODE END
   60         
   61         
   62         //****************************************************************************
   63         // @Typedefs
   64         //****************************************************************************
   65         
   66         // USER CODE BEGIN (MAIN_General,5)
   67         
   68         // USER CODE END
   69         
   70         
   71         //****************************************************************************
   72         // @Imported Global Variables
   73         //****************************************************************************
   74         
   75         // USER CODE BEGIN (MAIN_General,6)
   76         
   77         // USER CODE END
   78         
   79         
   80         //****************************************************************************
   81         // @Global Variables
   82         //****************************************************************************
   83         
   84         // USER CODE BEGIN (MAIN_General,7)
   85         
   86         // USER CODE END
   87         
   88         
   89         //****************************************************************************
   90         // @External Prototypes
   91         //****************************************************************************
   92         
   93         // USER CODE BEGIN (MAIN_General,8)
   94         
   95         // USER CODE END
   96         
   97         
   98         //****************************************************************************
   99         // @Prototypes Of Local Functions
  100         //****************************************************************************
  101         
  102         // USER CODE BEGIN (MAIN_General,9)
  103         
  104         // USER CODE END
  105         
  106         //****************************************************************************
  107         // @Function      void CanEnbale_v_g(voif) 
  108         //
  109         //----------------------------------------------------------------------------
  110         // @Description   This function enable can transceiver.
  111         //
  112         //----------------------------------------------------------------------------
  113         // @Returnvalue   None
  114         //
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 3   

  115         //----------------------------------------------------------------------------
  116         // @Parameters    None 
  117         //
  118         //----------------------------------------------------------------------------
  119         // @Date          2020-03-04
  120         //
  121         //****************************************************************************
  122         
  123         // USER CODE BEGIN (If_TxConfirmation,1)
  124         
  125         // USER CODE END
  126         
  127         void CanEnbale_v_g(void)
  128         {
  129  1      
  130  1        // USER CODE BEGIN (If_TxConfirmation,2)
  131  1      
  132  1              IO_vSetPin(IO_P1_5); // Enable Can0 tracv enter normal mode (STB)
  133  1              IO_vSetPin(IO_P1_4); // Enable Can1 tracv enter normal mode (STB)
  134  1              
  135  1        // USER CODE END
  136  1      
  137  1      } //  End of function CanEnbale_v_g
  138         
  139         //****************************************************************************
  140         // @Function      void CanSendMsg_v_g(ubyte ubObjNr, ubyte *ubpubData, ubyte  
  141         //                Len) 
  142         //
  143         //----------------------------------------------------------------------------
  144         // @Description   This function indicates the L-SDU has already been copied 
  145         //                from the CAN hardware (or shadow) buffer to the destination 
  146         //                bufferby the destination layer.
  147         //
  148         //----------------------------------------------------------------------------
  149         // @Returnvalue   None
  150         //
  151         //----------------------------------------------------------------------------
  152         // @Parameters    Hrh: 
  153         //                Hardware Object Index of the message object (0-63)
  154         // @Parameters    Identifier: 
  155         //                Message Object Identifier
  156         // @Parameters    CanDlc: 
  157         //                Message Object Data Length
  158         // @Parameters    *CanSduPtr: 
  159         //                Message Object Data Pointer
  160         //
  161         //----------------------------------------------------------------------------
  162         // @Date          2020-03-04
  163         //
  164         //****************************************************************************
  165         
  166         // USER CODE BEGIN (If_TxConfirmation,1)
  167         
  168         // USER CODE END
  169         
  170         void CanSendMsg_v_g(ubyte ubObjNr, ubyte *ubpubData)
  171         {
  172  1      
  173  1        // USER CODE BEGIN (If_TxConfirmation,2)
  174  1      
  175  1              CAN_vLoadData(ubObjNr,ubpubData);
  176  1              CAN_vTransmit(ubObjNr); 
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 4   

  177  1      
  178  1        // USER CODE END
  179  1      
  180  1      } //  End of function CanSendMsg_v_g
  181         
  182         //****************************************************************************
  183         // @Function      ubyte CanRecMsg_v_g(ubyte ubObjNr, ubyte *ubpubData, ubyte  
  184         //                *Len) 
  185         //
  186         //----------------------------------------------------------------------------
  187         // @Description   This function indicates the L-SDU has already been copied 
  188         //                from the CAN hardware (or shadow) buffer to the destination 
  189         //                bufferby the destination layer.
  190         //
  191         //----------------------------------------------------------------------------
  192         // @Returnvalue   None
  193         //
  194         //----------------------------------------------------------------------------
  195         // @Parameters    Hrh: 
  196         //                Hardware Object Index of the message object (0-63)
  197         // @Parameters    Identifier: 
  198         //                Message Object Identifier
  199         // @Parameters    CanDlc: 
  200         //                Message Object Data Length
  201         // @Parameters    *CanSduPtr: 
  202         //                Message Object Data Pointer
  203         //
  204         //----------------------------------------------------------------------------
  205         // @Date          2020-03-04
  206         //
  207         //****************************************************************************
  208         
  209         // USER CODE BEGIN (If_TxConfirmation,1)
  210         
  211         // USER CODE END
  212         
  213         ubyte CanRecMsg_v_g(ubyte ubObjNr, ubyte *ubpubData, ubyte *Len)
  214         {
  215  1      
  216  1        // USER CODE BEGIN (If_TxConfirmation,2)
  217  1      
  218  1              ubyte i;
  219  1        
  220  1              if (CAN_ubNewData(ubObjNr))
  221  1              {
  222  2                      Len[0]= (ubyte)((CAN_HWOBJ[ubObjNr].uwMOFCRH & 0x0F00) >> 8); 
  223  2                      
  224  2                      for (i=0u; i<=Len[0]; i++)
  225  2                      {
  226  3                              ubpubData[i]=CAN_HWOBJ[ubObjNr].ubData[i];
  227  3                      }
  228  2      
  229  2                      CAN_HWOBJ[ubObjNr].uwMOCTRL = 0x0008;
  230  2                      return 1;
  231  2              }
  232  1              
  233  1              return 0;
  234  1      
  235  1        // USER CODE END
  236  1      
  237  1      } //  End of function CanRecMsg_v_g
  238         
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 5   

  239         //****************************************************************************
  240         // @Function      void CanIf_RxIndication(ubyte Hrh, ulong Identifier, ubyte 
  241         //                CanDlc, ubyte *CanSduPtr) 
  242         //
  243         //----------------------------------------------------------------------------
  244         // @Description   This function indicates the L-SDU has already been copied 
  245         //                from the CAN hardware (or shadow) buffer to the destination 
  246         //                bufferby the destination layer.
  247         //
  248         //----------------------------------------------------------------------------
  249         // @Returnvalue   None
  250         //
  251         //----------------------------------------------------------------------------
  252         // @Parameters    Hrh: 
  253         //                Hardware Object Index of the message object (0-63)
  254         // @Parameters    Identifier: 
  255         //                Message Object Identifier
  256         // @Parameters    CanDlc: 
  257         //                Message Object Data Length
  258         // @Parameters    *CanSduPtr: 
  259         //                Message Object Data Pointer
  260         //
  261         //----------------------------------------------------------------------------
  262         // @Date          2020-03-04
  263         //
  264         //****************************************************************************
  265         
  266         // USER CODE BEGIN (If_RxIndication,1)
  267         
  268         // USER CODE END
  269         
  270         void CanIf_RxIndication0(ubyte Hrh, ulong Identifier, ubyte CanDlc, ubyte *CanSduPtr)
  271         {
  272  1      
  273  1        // USER CODE BEGIN (If_RxIndication,2)
  274  1      
  275  1              ubyte i = 0u;
  276  1              CanSvcInst *ptr_can0SvcInst = CanCom_ApplCan0SvcInstAccess();
  277  1      
  278  1              if (Hrh < 15)
  279  1              {
  280  2                      if (CanDlc == ptr_can0SvcInst[Hrh].msgLen)
  281  2                      {
  282  3                              if (NULL != ptr_can0SvcInst[Hrh].mainHandler)                   
  283  3                              {
  284  4                                      if((TRUE == descNmFrameRxEnable) && (TRUE == descApplFrameRxEnable))
  285  4                                      {
  286  5                                              CanCom_ApplCan0MsgResetTimeoutCnt(Hrh);
  287  5                                              ptr_can0SvcInst[Hrh].mainHandler(CanSduPtr);
  288  5                                      }
  289  4                                      else
  290  4                                      {
  291  5                                              if (FALSE == descNmFrameRxEnable)
  292  5                                              {
  293  6                                                      if ((ptr_can0SvcInst[Hrh].canId & 0x600) != 0x600)
  294  6                                                      {
  295  7                                                              CanCom_ApplCan0MsgResetTimeoutCnt(Hrh);
  296  7                                                              ptr_can0SvcInst[Hrh].mainHandler(CanSduPtr);
  297  7                                                      }
  298  6                                              }
  299  5                                              
  300  5                                              if (FALSE == descApplFrameRxEnable)
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 6   

  301  5                                              {
  302  6                                                      if (((ptr_can0SvcInst[Hrh].canId & 0x600) == 0x600) || ((ptr_can0SvcInst[Hrh].canId & 0x700) == 0x70
             -0))
  303  6                                                      {
  304  7                                                              CanCom_ApplCan0MsgResetTimeoutCnt(Hrh);
  305  7                                                              ptr_can0SvcInst[Hrh].mainHandler(CanSduPtr);
  306  7                                                      }
  307  6                                              }
  308  5                                      }
  309  4                              }
  310  3                      }
  311  2              }
  312  1              else if(15 == Hrh)
  313  1              {
  314  2                      for (i = 15u; i < kCan0SvcInstNumItems; i++)
  315  2                      {
  316  3                              if (Identifier == ptr_can0SvcInst[i].canId)
  317  3                              {               
  318  4                                      if (CanDlc == ptr_can0SvcInst[i].msgLen)
  319  4                                      {
  320  5                                              if (NULL != ptr_can0SvcInst[i].mainHandler)                     
  321  5                                              {
  322  6                                                      if (FALSE == descNmFrameRxEnable)
  323  6                                                      {
  324  7                                                              if ((ptr_can0SvcInst[i].canId & 0x600) != 0x600)
  325  7                                                              {
  326  8                                                                      CanCom_ApplCan0MsgResetTimeoutCnt(i);
  327  8                                                                      ptr_can0SvcInst[i].mainHandler(CanSduPtr);
  328  8                                                                      
  329  8                                                                      break;
  330  8                                                              }
  331  7                                                      }
  332  6                      
  333  6                                                      if (FALSE == descApplFrameRxEnable)
  334  6                                                      {
  335  7                                                              if (((ptr_can0SvcInst[i].canId & 0x600) == 0x600) || ((ptr_can0SvcInst[i].canId & 0x700) == 0x700))
  336  7                                                              {
  337  8                                                                      CanCom_ApplCan0MsgResetTimeoutCnt(i);
  338  8                                                                      ptr_can0SvcInst[i].mainHandler(CanSduPtr);
  339  8                                                                      
  340  8                                                                      break;
  341  8                                                              }
  342  7                                                      }
  343  6                      
  344  6                                                      CanCom_ApplCan0MsgResetTimeoutCnt(i);
  345  6                                                      ptr_can0SvcInst[i].mainHandler(CanSduPtr);
  346  6                                                      
  347  6                                              }       
  348  5                                      }
  349  4                              }
  350  3                      }
  351  2              }
  352  1      
  353  1        // USER CODE END
  354  1      
  355  1      } //  End of function CanIf_RxIndication0
  356         
  357         
  358         void CanIf_RxIndication1(ubyte Hrh, ulong Identifier, ubyte CanDlc, ubyte *CanSduPtr)
  359         {
  360  1      
  361  1        // USER CODE BEGIN (If_RxIndication,2)
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 7   

  362  1      
  363  1              ubyte i = 0u;
  364  1              CanSvcInst *ptr_can1SvcInst = CanCom_ApplCan1SvcInstAccess();
  365  1      
  366  1              if ((Hrh > 31) && (Hrh < 47))
  367  1              {
  368  2                      if (CanDlc == ptr_can1SvcInst[Hrh - 32].msgLen)
  369  2                      {
  370  3                              if (NULL != ptr_can1SvcInst[Hrh - 32].mainHandler)                      
  371  3                              {                       
  372  4                                      CanCom_ApplCan1MsgResetTimeoutCnt(Hrh - 32);
  373  4                                      ptr_can1SvcInst[Hrh - 32].mainHandler(CanSduPtr);                               
  374  4                              }
  375  3                      }
  376  2              }
  377  1              else if (47 == Hrh)
  378  1              {
  379  2                      for (i = 15u; i < kCan1SvcInstNumItems; i++)
  380  2                      {
  381  3                              if (Identifier == ptr_can1SvcInst[i].canId)
  382  3                              {               
  383  4                                      if (CanDlc == ptr_can1SvcInst[i].msgLen)
  384  4                                      {
  385  5                                              if (NULL != ptr_can1SvcInst[i].mainHandler)                     
  386  5                                              {                       
  387  6                                                      CanCom_ApplCan1MsgResetTimeoutCnt(i);
  388  6                                                      ptr_can1SvcInst[i].mainHandler(CanSduPtr);                                              
  389  6                                              }
  390  5                                      }
  391  4                              }
  392  3                      }                       
  393  2              }
  394  1      
  395  1        // USER CODE END
  396  1      
  397  1      } //  End of function CanIf_RxIndication1
  398         
  399         
  400         //****************************************************************************
  401         // @Prototypes Of Local Functions
  402         //****************************************************************************
  403         
  404         // USER CODE BEGIN (MAIN_General,9)
  405         
  406         // USER CODE END
  407         
  408         //****************************************************************************
  409         // @Function      void CanIf_TxConfirmation(ubyte SwPduHandle) 
  410         //
  411         //----------------------------------------------------------------------------
  412         // @Description   This function Indicates a successful transmission.
  413         //
  414         //----------------------------------------------------------------------------
  415         // @Returnvalue   None
  416         //
  417         //----------------------------------------------------------------------------
  418         // @Parameters    SwPduHandle: 
  419         //                Softare Pdu Handle
  420         //
  421         //----------------------------------------------------------------------------
  422         // @Date          2020-03-04
  423         //
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 8   

  424         //****************************************************************************
  425         
  426         // USER CODE BEGIN (If_TxConfirmation,1)
  427         
  428         // USER CODE END
  429         
  430         void CanIf_TxConfirmation(ubyte SwPduHandle)
  431         {
  432  1      
  433  1        // USER CODE BEGIN (If_TxConfirmation,2)
  434  1      
  435  1              switch (SwPduHandle)
  436  1              {
  437  2                      case 16:
  438  2                      case 48:
  439  2                      {
  440  3                              if(TRUE == g_ecuResetFlag)
  441  3                              {
  442  4                                      g_ecuResetFlag = FALSE;
  443  4      
  444  4                                      /* reset instruction */
  445  4                                      MAIN_vUnlockProtecReg();
  446  4                                      SCU_SWRSTCON &= 0x00FF;
  447  4                                      SCU_RSTCON0 |= 0xC000; //clearn SCU_RSTCON0.SW = 0x11
  448  4                                      SCU_SWRSTCON |= 0x0001; //SCU_SWRSTCON.SWBOOT = 1
  449  4                                      SCU_SWRSTCON |= 0x0002; //SCU_SWRSTCON.SWRSTREQ = 1;
  450  4                                      while(1);
  451  4                              }
  452  3                              
  453  3                              break;
  454  3                      }
  455  2                              
  456  2                      default:
  457  2                              break;
  458  2              }
  459  1      
  460  1        // USER CODE END
  461  1      
  462  1      } //  End of function CanIf_TxConfirmation
  463         
  464         //****************************************************************************
  465         // @Function      void CanIf_ControllerBusOff(ubyte Controller) 
  466         //
  467         //----------------------------------------------------------------------------
  468         // @Description   This function Indicates that the controller went in bus-off 
  469         //                mode.
  470         //
  471         //----------------------------------------------------------------------------
  472         // @Returnvalue   None
  473         //
  474         //----------------------------------------------------------------------------
  475         // @Parameters    Controller: 
  476         //                CAN Controller for which bus-off state is requested. Number 
  477         //                of node ( 0 - 3)
  478         //
  479         //----------------------------------------------------------------------------
  480         // @Date          2020-03-04
  481         //
  482         //****************************************************************************
  483         
  484         // USER CODE BEGIN (If_ControllerBusOff,1)
  485         
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 9   

  486         // USER CODE END
  487         
  488         void CanIf_ControllerBusOff(ubyte Controller)
  489         {
  490  1      
  491  1        // USER CODE BEGIN (If_ControllerBusOff,2)
  492  1      
  493  1        // USER CODE END  
  494  1      
  495  1              switch (Controller)
  496  1              {
  497  2                      case CAN_CONTROLLER0:
  498  2      
  499  2                              // USER CODE BEGIN (If_ControllerBusOff,3)
  500  2      
  501  2                              //Can_DisableControllerInterrupts(CAN_CONTROLLER0);
  502  2      
  503  2                              Can_SetControllerMode(CAN_CONTROLLER0, CAN_T_START);    
  504  2                              
  505  2                              // USER CODE END
  506  2                      
  507  2                              break;
  508  2      
  509  2                      case CAN_CONTROLLER1:
  510  2      
  511  2                              // USER CODE BEGIN (If_ControllerBusOff,4)
  512  2      
  513  2                              //Can_DisableControllerInterrupts(CAN_CONTROLLER1);
  514  2      
  515  2                              Can_SetControllerMode(CAN_CONTROLLER1, CAN_T_START);                    
  516  2                              
  517  2                              // USER CODE END
  518  2                              
  519  2                              break;
  520  2      
  521  2                      default:
  522  2                      
  523  2                      // USER CODE BEGIN (If_ControllerBusOff,5)
  524  2                      
  525  2                      // USER CODE END
  526  2                      
  527  2                        break;
  528  2      
  529  2              }
  530  1      
  531  1          // USER CODE BEGIN (SetControllerMode,7)
  532  1      
  533  1          // USER CODE END
  534  1      
  535  1      } //  End of function CanIf_ControllerBusOff
  536         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1526     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
C166 COMPILER V7.57.0, CAN_IF                                                              11/13/2020 15:09:31 PAGE 10  

  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
