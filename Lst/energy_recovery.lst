C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     01/20/2021 09:50:44 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE ENERGY_RECOVERY
OBJECT MODULE PLACED IN .\Obj\energy_recovery.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\energy_recovery.c MODV2 LARGE BROWSE INCDIR(.\src;.\
                    -src\bsw;.\src\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnosti
                    -c;.\src\app\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app
                    -\time measure;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\energy_recovery.lst) OBJECT(.\Obj\energy_recovery.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : energy_recovery.c
    9         * Instance      : 
   10         * Description   : Brake energy recovery
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 27,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 27,2019    Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "XC23xxBREGS.h"
   26         
   27         #include "booster.h"
   28         #include "energy_recovery.h"
   29         #include "rte.h"
   30         
   31         #define ENERGY_RECOVERY_GLOBALS
   32         
   33         
   34         /**** Definition of variables ****/
   35         ENERGY_RECOVERY_STAT T_ENERGY_RECOVERY tEnergyRecovery = {0u};
   36         
   37         /**** Declaration of functions ****/
   38         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorMaxiumTorque(void);
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorActualTorque(void);
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorObjTorqueRateOfChange(void);
              #endif
   43         
   44         /***********************************************************************
   45         *  Name        : EnergyRecovery_Init
   46         *  Description : After power on, initiliaze brake energy recovery alogrithm variable
   47         *  Parameter   : None
   48         *  Returns     : None
   49         ***********************************************************************/
   50         void EnergyRecovery_Init(void)
   51         {
   52  1              memset(&tEnergyRecovery, 0, sizeof(tEnergyRecovery));
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     01/20/2021 09:50:44 PAGE 2   

   53  1              return;
   54  1      }
   55         
   56         /***********************************************************************
   57         *  Name        : AdcApp_DeInit
   58         *  Description : During running, need initilize brake energy recovery alogrithm variable
   59         *  Parameter   : None
   60         *  Returns     : None
   61         ***********************************************************************/
   62         void EnergyRecovery_DeInit(void)
   63         {
   64  1              memset(&tEnergyRecovery, 0, sizeof(tEnergyRecovery));
   65  1              return;
   66  1      }
   67         
   68         /***********************************************************************
   69         *  Name        : EnergyRecovery_Algorithm
   70         *  Description : Brake energy recovery control algorithm
   71         *  Parameter   : None
   72         *  Returns     : None
   73         ***********************************************************************/
   74         void EnergyRecovery_Algorithm(void)
   75         {
   76  1      #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
                      EnergyRecovery_McuMotorMaxiumTorque();
                      EnergyRecovery_McuMotorActualTorque();
                      EnergyRecovery_McuMotorObjTorqueRateOfChange();
              #else
   81  1              EnergyRecovery_DeInit();
   82  1      #endif
   83  1              return;
   84  1      }
   85         
   86         
   87         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_McuMotorMaxiumTorque
              *  Description : Get vehicle mcu motor maxium brake torque
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorMaxiumTorque(void)
              {
                      tEnergyRecovery.mcuMotorMaxiumTorque = MCU_MotToqLmt * 0.5 - 4000;
              }
              #endif
   99         
  100         
  101         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_McuMotorActualTorque
              *  Description : Get vehicle mcu motor actual apply brake torque
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorActualTorque(void)
              {
                      tEnergyRecovery.mcuMotorActualTorque = MCU_MotActuToq * 0.5 - 4000;
              }
              #endif
  113         
  114         
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     01/20/2021 09:50:44 PAGE 3   

  115         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_McuMotorObjTorqueRateOfChange
              *  Description : Request mcu motor object torque rate of change
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorObjTorqueRateOfChange(void)
              {
                      INT8U i;
                      ENERGY_RECOVERY_STAT INT16U objTorque[7] = {0u};
              
                      /* Calculate the change rate of braking torque value of the requested motor. */
                      tEnergyRecovery.mcuMotorObjTorqueRateOfChange = 
                                7 * abs(tEnergyRecovery.mcuMotorObjTorque - objTorque[0])
                              + 5 * abs(objTorque[6] - objTorque[1])
                              + 3 * abs(objTorque[5] - objTorque[2])
                              +     abs(objTorque[4] - objTorque[3]);
              
                      for (i=0; i<=5; i++) // polyspace test by gzz 2020.12.30
                      {
                              objTorque[i] = objTorque[i+1];
                      }
              
                      objTorque[6] = tEnergyRecovery.mcuMotorObjTorque;
                      return;
              }
              #endif
  143         
  144         /***********************************************************************
  145         *  Name        : Booster_BrakeTorqueReduction
  146         *  Description : Judge brake torque reduction value.
  147         *  Parameter   : torque, coef
  148         *  Returns     : tempTorque
  149         ***********************************************************************/
  150         INT16U EnergyRecovery_ObjLocationIncrement(INT16U objLocation, FP32 coef)
  151         {
  152  1              INT16U tempobjLocation = 0;
  153  1      
  154  1              tempobjLocation = objLocation;
  155  1      
  156  1              if (coef > 1)
  157  1              {
  158  2                      coef = 1;
  159  2              }
  160  1              else
  161  1              {
  162  2                      if (coef < 0)
  163  2                      {
  164  3                              coef = 0;
  165  3                      }
  166  2              }
  167  1              
  168  1              tempobjLocation = (INT16U)(tempobjLocation * (1 - coef));
  169  1              return tempobjLocation;
  170  1      }
  171         
  172         /***********************************************************************
  173         *  Name        : Booster_BrakeTorqueReduction
  174         *  Description : Judge brake torque reduction value.
  175         *  Parameter   : torque, coef
  176         *  Returns     : tempTorque
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     01/20/2021 09:50:44 PAGE 4   

  177         ***********************************************************************/
  178         INT16S EnergyRecovery_BrakeTorqueReduction(INT16S torque, FP32 coef)
  179         {
  180  1              INT16S tempTorque;
  181  1      
  182  1              if (torque > MCU_MOTOR_TORQUE_DEFAULT)
  183  1              {
  184  2                      torque = MCU_MOTOR_TORQUE_DEFAULT;
  185  2              }
  186  1              else
  187  1              {
  188  2                      if (torque < MCU_MOTOR_TORQUE_MAX_LIMIT)
  189  2                      {
  190  3                              torque = MCU_MOTOR_TORQUE_MAX_LIMIT;
  191  3                      }
  192  2              }
  193  1      
  194  1              tempTorque = torque;
  195  1      
  196  1              if (coef > 1)
  197  1              {
  198  2                      coef = 1;
  199  2              }
  200  1              else
  201  1              {
  202  2                      if (coef < 0)
  203  2                      {
  204  3                              coef = 0;
  205  3                      }
  206  2              }
  207  1              
  208  1              tempTorque = (INT16S)(tempTorque * coef);
  209  1              return tempTorque;
  210  1      }
  211         
  212         
  213         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_CalculateFrictionObjTorque
              *  Description : Calculate friction brake object torque.
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_EXT INT16S EnergyRecovery_CalculateFrictionObjTorque(void)
              {
                      INT16S frictionBrakeObjTorque = 0;
                      FP32 rb_target_mot_objtorque = 0;
                      const T_BOOSTER *ptr_booster = Booster_AlogrithmData();
                      
                      ENERGY_RECOVERY_STAT INT16U frictionBrakeObjTorqueIncrement = 0;
                      ENERGY_RECOVERY_STAT INT8U hybridBrakeRelaseCnt = 0;
                      ENERGY_RECOVERY_STAT INT16S mcuMotorObjTorqueRateOfChangeLast = 0;
              
                      switch (ptr_booster->brakeStatus)
                      {
                              case STATUS_INIT_BRAKE:
                                      frictionBrakeObjTorque = 0u;
                                      frictionBrakeObjTorqueIncrement = 0;
                                      tEnergyRecovery.mcuMotorObjTorque = 0;                  
                                      break;
              
                              case STATUS_FRICTION_BRAKE:
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     01/20/2021 09:50:44 PAGE 5   

                              case STATUS_TRANSIENT:
                                      /* Judge VCU motor torque facutal value cannot apply brake force requirement. 
                                       * Not request VCU motor torque agian. */
              #if 0
                                      if (ptr_booster->totalTorqueRequest < tEnergyRecovery.mcuMotorMaxiumTorque)
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
                                              frictionBrakeObjTorque = ptr_booster->totalTorqueRequest - tEnergyRecovery.mcuMotorObjTorque;
                                      }
                                      else
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = ptr_booster->totalTorqueRequest;
                                              frictionBrakeObjTorque = ptr_booster->totalTorqueRequest - tEnergyRecovery.mcuMotorActualTorque;
                                      }       
              #endif                  
                                      tEnergyRecovery.mcuMotorObjTorque = 0;
                                      break;
              
                              case STATUS_HYBRID_BRAKE:
                                      tEnergyRecovery.mcuMotorObjTorque = ptr_booster->totalTorqueRequest - ptr_booster->frictionBrakeObjTorq
             -ue;
                                      /* Judge VCU motor torque capacity value cannot apply brake force requirement. */
                                      if (tEnergyRecovery.mcuMotorObjTorque < tEnergyRecovery.mcuMotorMaxiumTorque)
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
                                      }
                                      break;
              
                              case STATUS_RELASE_HYBRID_BRAKE:
                                      /* Energy recovery brake torque reduction */
                                      tEnergyRecovery.mcuMotorObjTorque = EnergyRecovery_BrakeTorqueReduction(ptr_booster->totalTorqueRequest
             -, ptr_booster->State4coef);
                                  
                                  if (tEnergyRecovery.mcuMotorObjTorque < tEnergyRecovery.mcuMotorMaxiumTorque)
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
                                      }
              
                                      frictionBrakeObjTorque = tEnergyRecovery.mcuMotorActualTorque - ptr_booster->totalTorqueRequest;
                                      
                                      if(tEnergyRecovery.mcuMotorObjTorque > tEnergyRecovery.mcuMotorActualTorque)
                                      {
                                              frictionBrakeObjTorque = frictionBrakeObjTorque + ((tEnergyRecovery.mcuMotorObjTorque - tEnergyRecover
             -y.mcuMotorActualTorque) >> 1U); // polyspace test by gzz 2020.12.30
                                      }
                                      
                                      if((tEnergyRecovery.mcuMotorObjTorqueRateOfChange > 300) 
                                              && (mcuMotorObjTorqueRateOfChangeLast <= 300)
                                              && (0 == hybridBrakeRelaseCnt))
                                      {
                                              hybridBrakeRelaseCnt = 80;
                                              frictionBrakeObjTorqueIncrement = (MCU_MOTOR_TORQUE_DEFAULT - tEnergyRecovery.mcuMotorActualTorque) >>
             - 1;
                                              
                                      }
                                      else if(hybridBrakeRelaseCnt > 0)
                                      {
                                              if(hybridBrakeRelaseCnt < 20)
                                              {
                                                      frictionBrakeObjTorqueIncrement = frictionBrakeObjTorqueIncrement * hybridBrakeRelaseCnt / 20;
                                              }
                                              else if(hybridBrakeRelaseCnt > 60)
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     01/20/2021 09:50:44 PAGE 6   

                                              {
                                                      frictionBrakeObjTorqueIncrement = frictionBrakeObjTorqueIncrement * (80 - hybridBrakeRelaseCnt) / 20;
                                              }
                                              
                                              frictionBrakeObjTorque = frictionBrakeObjTorque + frictionBrakeObjTorqueIncrement;
                                              hybridBrakeRelaseCnt--;
                                      }
                                      
                                      mcuMotorObjTorqueRateOfChangeLast = tEnergyRecovery.mcuMotorObjTorqueRateOfChange;
                                      break;
              
                              default:
                                      frictionBrakeObjTorque = 0u;    
                                      tEnergyRecovery.mcuMotorObjTorque = 0;                  
                                      break;
                      }
              
                      /* VCU motor brake torque requirement value limiting range. */
                      if (tEnergyRecovery.mcuMotorObjTorque > 0)
                      {
                              tEnergyRecovery.mcuMotorObjTorque = 0;
                      }
                      else if (tEnergyRecovery.mcuMotorObjTorque < tEnergyRecovery.mcuMotorMaxiumTorque)
                      {
                              tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
                      }
                      
                      return frictionBrakeObjTorque;
              }
              #endif
  327         
  328         /***********************************************************************
  329         *  Name        : EnergyRecovery_AlogrithmData
  330         *  Description : Brake energy recovery alogrithm data
  331         *  Parameter   : None
  332         *  Returns     : Brake energy recovery alogrithm data structure access address
  333         ***********************************************************************/
  334          T_ENERGY_RECOVERY* EnergyRecovery_AlogrithmData(void)
  335         {
  336  1              return (&tEnergyRecovery);
  337  1      }
  338         
  339         /* _END_OF_ENERGY_RECOVERY_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         256     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =           8     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          14     --------
END OF MODULE INFORMATION.

C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     01/20/2021 09:50:44 PAGE 7   


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
