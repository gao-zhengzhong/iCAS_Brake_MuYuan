C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     11/13/2020 15:09:24 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE ENERGY_RECOVERY
OBJECT MODULE PLACED IN .\Obj\energy_recovery.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\energy_recovery.c MODV2 LARGE BROWSE INCDIR(.\src;.\
                    -src\bsw;.\src\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnosti
                    -c;.\src\app\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app
                    -\time measure;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\energy_recovery.lst) OBJECT(.\Obj\energy_recovery.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : energy_recovery.c
    9         * Instance      : 
   10         * Description   : Brake energy recovery
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 27,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 27,2019    Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "XC23xxBREGS.h"
   26         
   27         #include "booster.h"
   28         #include "energy_recovery.h"
   29         
   30         #define ENERGY_RECOVERY_GLOBALS
   31         
   32         ENERGY_RECOVERY_STAT INT16U MCU_MotToqLmt; 
   33         ENERGY_RECOVERY_STAT INT16U MCU_MotActuToq;
   34         
   35         /**** Definition of variables ****/
   36         ENERGY_RECOVERY_STAT T_ENERGY_RECOVERY tEnergyRecovery = {0u};
   37         
   38         /**** Declaration of functions ****/
   39         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorMaxiumTorque(void);
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorActualTorque(void);
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorObjTorqueRateOfChange(void);
              #endif
   44         
   45         /***********************************************************************
   46         *  Name        : EnergyRecovery_Init
   47         *  Description : After power on, initiliaze brake energy recovery alogrithm variable
   48         *  Parameter   : None
   49         *  Returns     : None
   50         ***********************************************************************/
   51         void EnergyRecovery_Init(void)
   52         {
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     11/13/2020 15:09:24 PAGE 2   

   53  1              memset(&tEnergyRecovery, 0, sizeof(tEnergyRecovery));
   54  1              return;
   55  1      }
   56         
   57         /***********************************************************************
   58         *  Name        : AdcApp_DeInit
   59         *  Description : During running, need initilize brake energy recovery alogrithm variable
   60         *  Parameter   : None
   61         *  Returns     : None
   62         ***********************************************************************/
   63         void EnergyRecovery_DeInit(void)
   64         {
   65  1              memset(&tEnergyRecovery, 0, sizeof(tEnergyRecovery));
   66  1              return;
   67  1      }
   68         
   69         /***********************************************************************
   70         *  Name        : EnergyRecovery_Algorithm
   71         *  Description : Brake energy recovery control algorithm
   72         *  Parameter   : None
   73         *  Returns     : None
   74         ***********************************************************************/
   75         void EnergyRecovery_Algorithm(void)
   76         {
   77  1      #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
                      EnergyRecovery_McuMotorMaxiumTorque();
                      EnergyRecovery_McuMotorActualTorque();
                      EnergyRecovery_McuMotorObjTorqueRateOfChange();
              #else
   82  1              EnergyRecovery_DeInit();
   83  1      #endif
   84  1              return;
   85  1      }
   86         
   87         
   88         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_McuMotorMaxiumTorque
              *  Description : Get vehicle mcu motor maxium brake torque
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorMaxiumTorque(void)
              {
                      /* Vehicle mcu motor maxium brake torque limiter processing. */
                      if (MCU_MotToqLmt < MCU_MOTOR_TORQUE_MAX_LIMIT)
                      {
                              tEnergyRecovery.mcuMotorMaxiumTorque = MCU_MOTOR_TORQUE_DEFAULT - MCU_MOTOR_TORQUE_MAX_LIMIT;
                      }
                      else
                      {
                              /* More than default value, indicate vehicle is accelerate, not have brake torque,
                               * less than default value, indicate vehicle is decelerate, have brake torque. */
                              if (MCU_MotToqLmt > MCU_MOTOR_TORQUE_DEFAULT)
                              {
                                      tEnergyRecovery.mcuMotorMaxiumTorque = 0u;
                              }
                              else
                              {
                                      tEnergyRecovery.mcuMotorMaxiumTorque = MCU_MOTOR_TORQUE_DEFAULT - MCU_MotToqLmt;
                              }
                      }
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     11/13/2020 15:09:24 PAGE 3   

              
                      return;
              }
              #endif
  119         
  120         
  121         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_McuMotorActualTorque
              *  Description : Get vehicle mcu motor actual apply brake torque
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorActualTorque(void)
              {
                      /* Vehicle mcu motor acutal brake torque limiter processing. */
                      if (MCU_MotActuToq < MCU_MOTOR_TORQUE_MAX_LIMIT)
                      {
                              tEnergyRecovery.mcuMotorActualTorque = MCU_MOTOR_TORQUE_DEFAULT - MCU_MOTOR_TORQUE_MAX_LIMIT;
                      }
                      else
                      {
                              /* More than default value, indicate vehicle is accelerate, not have brake torque,
                               * less than default value, indicate vehicle is decelerate, have brake torque. */
                              if (MCU_MotActuToq > MCU_MOTOR_TORQUE_DEFAULT)
                              {
                                      tEnergyRecovery.mcuMotorActualTorque = 0u;
                              }
                              else
                              {
                                      tEnergyRecovery.mcuMotorActualTorque = MCU_MOTOR_TORQUE_DEFAULT - MCU_MotActuToq;
                              }
                      }       
                      
                      return;
              }
              #endif
  152         
  153         
  154         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_McuMotorObjTorqueRateOfChange
              *  Description : Request mcu motor object torque rate of change
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorObjTorqueRateOfChange(void)
              {
                      INT8U i;
                      ENERGY_RECOVERY_STAT INT16U objTorque[7] = {0u};
              
                      /* Calculate the change rate of braking torque value of the requested motor. */
                      tEnergyRecovery.mcuMotorObjTorqueRateOfChange = 
                                7 * abs(tEnergyRecovery.mcuMotorObjTorque - objTorque[0])
                              + 5 * abs(objTorque[6] - objTorque[1])
                              + 3 * abs(objTorque[5] - objTorque[2])
                              +     abs(objTorque[4] - objTorque[3]);
              
                      for (i=0; i<sizeof(objTorque)-1; i++)
                      {
                              objTorque[i] = objTorque[i+1];
                      }
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     11/13/2020 15:09:24 PAGE 4   

              
                      objTorque[6] = tEnergyRecovery.mcuMotorObjTorque;
                      return;
              }
              #endif
  182         
  183         
  184         
  185         /***********************************************************************
  186         *  Name        : Booster_BrakeTorqueReduction
  187         *  Description : Judge brake torque reduction value.
  188         *  Parameter   : torque, coef
  189         *  Returns     : tempTorque
  190         ***********************************************************************/
  191         ENERGY_RECOVERY_STAT INT16U EnergyRecovery_BrakeTorqueReduction(INT16U torque, INT8U coef)
  192         {
  193  1              INT16U tempTorque;
  194  1      
  195  1              if (torque > MCU_MOTOR_TORQUE_DEFAULT)
  196  1              {
  197  2                      torque = MCU_MOTOR_TORQUE_DEFAULT;
  198  2              }
  199  1              else
  200  1              {
  201  2                      if (torque < MCU_MOTOR_TORQUE_MAX_LIMIT)
  202  2                      {
  203  3                              torque = MCU_MOTOR_TORQUE_MAX_LIMIT;
  204  3                      }
  205  2              }
  206  1      
  207  1              tempTorque = MCU_MOTOR_TORQUE_DEFAULT - torque;
  208  1      
  209  1              if (coef > 1)
  210  1              {
  211  2                      coef = 1;
  212  2              }
  213  1              else
  214  1              {
  215  2                      if (coef < 0)
  216  2                      {
  217  3                              coef = 0;
  218  3                      }
  219  2              }
  220  1              
  221  1              tempTorque = MCU_MOTOR_TORQUE_DEFAULT - tempTorque * coef;
  222  1              return tempTorque;
  223  1      }
  224         
  225         
  226         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
              /***********************************************************************
              *  Name        : EnergyRecovery_CalculateFrictionObjTorque
              *  Description : Calculate friction brake object torque.
              *  Parameter   : None
              *  Returns     : None
              ***********************************************************************/
              ENERGY_RECOVERY_EXT INT16U EnergyRecovery_CalculateFrictionObjTorque(void)
              {
                      const T_BOOSTER *ptr_booster = Booster_AlogrithmData();
                      INT16U frictionBrakeObjTorque;
                      ENERGY_RECOVERY_STAT INT16U frictionBrakeObjTorqueIncrement;
                      ENERGY_RECOVERY_STAT INT8U hybridBrakeRelaseCnt = 0;
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     11/13/2020 15:09:24 PAGE 5   

                      ENERGY_RECOVERY_STAT INT16S mcuMotorObjTorqueRateOfChangeLast = 0;
              
                      switch (ptr_booster->brakeStatus)
                      {
                              case STATUS_INIT_BRAKE:
                                      frictionBrakeObjTorque = 0u;
                                      frictionBrakeObjTorqueIncrement = 0;
                                      tEnergyRecovery.mcuMotorObjTorque = MCU_MOTOR_TORQUE_DEFAULT;                   
                                      break;
              
                              case STATUS_FRICTION_BRAKE:
                              case STATUS_TRANSIENT:
                                      /* Judge VCU motor torque facutal value cannot apply brake force requirement. 
                                       * Not request VCU motor torque agian. */
                                      if (ptr_booster->totalTorqueRequest < tEnergyRecovery.mcuMotorActualTorque)
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = MCU_MOTOR_TORQUE_DEFAULT;
                                              frictionBrakeObjTorque = tEnergyRecovery.mcuMotorActualTorque - ptr_booster->totalTorqueRequest;
                                      }
                                      else
                                      {
                                              frictionBrakeObjTorque = 0u;
                                              tEnergyRecovery.mcuMotorObjTorque = MCU_MOTOR_TORQUE_DEFAULT;
                                      }               
                                      break;
              
                              case STATUS_HYBRID_BRAKE:
                                      /* Judge VCU motor torque capacity value cannot apply brake force requirement. */
                                      if (ptr_booster->totalTorqueRequest < tEnergyRecovery.mcuMotorMaxiumTorque)
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
                                              tEnergyRecovery.brakeMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque - ptr_booster->totalTorqueR
             -equest;
                                      }
                                      else
                                      {
                                              tEnergyRecovery.brakeMotorObjTorque = 0u;
                                              tEnergyRecovery.mcuMotorObjTorque = ptr_booster->totalTorqueRequest;
                                      }
              
                                      frictionBrakeObjTorque = tEnergyRecovery.brakeMotorObjTorque;   
                                      break;
              
                              case STATUS_RELASE_HYBRID_BRAKE:
                                      /* Energy recovery brake torque reduction */
                                      tEnergyRecovery.mcuMotorObjTorque = EnergyRecovery_BrakeTorqueReduction(ptr_booster->totalTorqueRequest
             -, ptr_booster->coef);
                                      if (tEnergyRecovery.mcuMotorObjTorque < tEnergyRecovery.mcuMotorMaxiumTorque)
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
                                      }
              
                                      frictionBrakeObjTorque = tEnergyRecovery.mcuMotorActualTorque - ptr_booster->totalTorqueRequest;
                                      
                                      if(tEnergyRecovery.mcuMotorObjTorque > tEnergyRecovery.mcuMotorActualTorque)
                                      {
                                              frictionBrakeObjTorque = frictionBrakeObjTorque + (tEnergyRecovery.mcuMotorObjTorque - tEnergyRecovery
             -.mcuMotorActualTorque) >> 1;
                                      }
                                      
                                      if((tEnergyRecovery.mcuMotorObjTorqueRateOfChange > 300) 
                                              && (mcuMotorObjTorqueRateOfChangeLast <= 300)
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     11/13/2020 15:09:24 PAGE 6   

                                              && (0 == hybridBrakeRelaseCnt))
                                      {
                                              hybridBrakeRelaseCnt = 80;
                                              frictionBrakeObjTorqueIncrement = (MCU_MOTOR_TORQUE_DEFAULT - tEnergyRecovery.mcuMotorActualTorque) >>
             - 1;
                                              
                                      }
                                      else if(hybridBrakeRelaseCnt > 0)
                                      {
                                              if(hybridBrakeRelaseCnt < 20)
                                              {
                                                      frictionBrakeObjTorqueIncrement = frictionBrakeObjTorqueIncrement * hybridBrakeRelaseCnt / 20;
                                              }
                                              else if(hybridBrakeRelaseCnt > 60)
                                              {
                                                      frictionBrakeObjTorqueIncrement = frictionBrakeObjTorqueIncrement * (80 - hybridBrakeRelaseCnt) / 20;
                                              }
                                              
                                              frictionBrakeObjTorque = frictionBrakeObjTorque + frictionBrakeObjTorqueIncrement;
                                              hybridBrakeRelaseCnt--;
                                      }
                                      
                                      mcuMotorObjTorqueRateOfChangeLast = tEnergyRecovery.mcuMotorObjTorqueRateOfChange;
                                      break;
              
                              default:
                                      frictionBrakeObjTorque = 0u;    
                                      tEnergyRecovery.mcuMotorObjTorque = MCU_MOTOR_TORQUE_DEFAULT;                   
                                      break;
                      }
              
                      /* VCU motor brake torque requirement value limiting range. */
                      if (tEnergyRecovery.mcuMotorObjTorque < MCU_MOTOR_TORQUE_MAX_LIMIT)
                      {
                              tEnergyRecovery.mcuMotorObjTorque = MCU_MOTOR_TORQUE_MAX_LIMIT;
                      }
                      else
                      {
                              if (tEnergyRecovery.mcuMotorObjTorque > MCU_MOTOR_TORQUE_DEFAULT)
                              {
                                      tEnergyRecovery.mcuMotorObjTorque = MCU_MOTOR_TORQUE_DEFAULT;
                              }
                      }
              
                      return frictionBrakeObjTorque;
              }
              #endif
  344         
  345         /***********************************************************************
  346         *  Name        : EnergyRecovery_AlogrithmData
  347         *  Description : Brake energy recovery alogrithm data
  348         *  Parameter   : None
  349         *  Returns     : Brake energy recovery alogrithm data structure access address
  350         ***********************************************************************/
  351         const T_ENERGY_RECOVERY* EnergyRecovery_AlogrithmData(void)
  352         {
  353  1              return (&tEnergyRecovery);
  354  1      }
  355         
  356         /* _END_OF_ENERGY_RECOVERY_ */
*** WARNING C174 IN LINE 191 OF src\app\alogrithm\energy_recovery.c: 'EnergyRecovery_BrakeTorqueReduction': unreferenced
             - 'static' function
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     11/13/2020 15:09:24 PAGE 7   



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =          52     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           4     --------
  FAR-DATA SIZE    =          12     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          18     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
