C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     12/25/2020 20:36:02 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE ENERGY_RECOVERY
OBJECT MODULE PLACED IN .\Obj\energy_recovery.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\app\alogrithm\energy_recovery.c MODV2 LARGE BROWSE INCDIR(.\src;.\
                    -src\bsw;.\src\driver;.\src\interaction;.\src\app\adc;.\src\app\alogrithm;.\src\app\can;.\src\app\ccp;.\src\app\diagnosti
                    -c;.\src\app\mode control;.\src\app\task;.\src\app\Fun;.\src\app\rtos;.\src\bsw\can;.\src\bsw\desc;.\src\bsw\nm;.\src\app
                    -\time measure;.\src\app\rte) MODV2 DEBUG PRINT(.\Lst\energy_recovery.lst) OBJECT(.\Obj\energy_recovery.obj) 

 stmt lvl     source

    1         /***********************************************************************
    2         *   Copyright (C) JWD Automotive Co., Ltd.                                             * 
    3         *       All Rights Reserved.                                                                   *
    4         *   Department : iCAS SW                                                                               *
    5         *   AUTHOR         :                                                                                               *
    6         ************************************************************************
    7         * Object        : 
    8         * Module        : energy_recovery.c
    9         * Instance      : 
   10         * Description   : Brake energy recovery
   11         *-----------------------------------------------------------------------
   12         * Version: v0.1
   13         * Date   : Dec 27,2019 
   14         * Author : Gao zehngzhong
   15         ***********************************************************************/
   16         /*-History--------------------------------------------------------------
   17         * Version    Date           Name            Changes and comments
   18         ------------------------------------------------------------------------
   19         * 0.1        Dec 27,2019    Gao Zhengzhong  Initial version
   20         *=====================================================================*/
   21         
   22         #include <stdlib.h>
   23         #include <string.h>
   24         
   25         #include "XC23xxBREGS.h"
   26         
   27         #include "booster.h"
   28         #include "energy_recovery.h"
   29         #include "rte.h"
   30         
   31         #define ENERGY_RECOVERY_GLOBALS
   32         
   33         
   34         /**** Definition of variables ****/
   35         ENERGY_RECOVERY_STAT T_ENERGY_RECOVERY tEnergyRecovery = {0u};
   36         
   37         /**** Declaration of functions ****/
   38         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
   39         ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorMaxiumTorque(void);
   40         ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorActualTorque(void);
   41         ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorObjTorqueRateOfChange(void);
   42         #endif
   43         
   44         /***********************************************************************
   45         *  Name        : EnergyRecovery_Init
   46         *  Description : After power on, initiliaze brake energy recovery alogrithm variable
   47         *  Parameter   : None
   48         *  Returns     : None
   49         ***********************************************************************/
   50         void EnergyRecovery_Init(void)
   51         {
   52  1              memset(&tEnergyRecovery, 0, sizeof(tEnergyRecovery));
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     12/25/2020 20:36:02 PAGE 2   

   53  1              return;
   54  1      }
   55         
   56         /***********************************************************************
   57         *  Name        : AdcApp_DeInit
   58         *  Description : During running, need initilize brake energy recovery alogrithm variable
   59         *  Parameter   : None
   60         *  Returns     : None
   61         ***********************************************************************/
   62         void EnergyRecovery_DeInit(void)
   63         {
   64  1              memset(&tEnergyRecovery, 0, sizeof(tEnergyRecovery));
   65  1              return;
   66  1      }
   67         
   68         /***********************************************************************
   69         *  Name        : EnergyRecovery_Algorithm
   70         *  Description : Brake energy recovery control algorithm
   71         *  Parameter   : None
   72         *  Returns     : None
   73         ***********************************************************************/
   74         void EnergyRecovery_Algorithm(void)
   75         {
   76  1      #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
   77  1              EnergyRecovery_McuMotorMaxiumTorque();
   78  1              EnergyRecovery_McuMotorActualTorque();
   79  1              EnergyRecovery_McuMotorObjTorqueRateOfChange();
   80  1      #else
                      EnergyRecovery_DeInit();
              #endif
   83  1              return;
   84  1      }
   85         
   86         
   87         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
   88         /***********************************************************************
   89         *  Name        : EnergyRecovery_McuMotorMaxiumTorque
   90         *  Description : Get vehicle mcu motor maxium brake torque
   91         *  Parameter   : None
   92         *  Returns     : None
   93         ***********************************************************************/
   94         ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorMaxiumTorque(void)
   95         {
   96  1              tEnergyRecovery.mcuMotorMaxiumTorque = MCU_MotToqLmt * 0.5 - 4000;
   97  1      }
   98         #endif
   99         
  100         
  101         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
  102         /***********************************************************************
  103         *  Name        : EnergyRecovery_McuMotorActualTorque
  104         *  Description : Get vehicle mcu motor actual apply brake torque
  105         *  Parameter   : None
  106         *  Returns     : None
  107         ***********************************************************************/
  108         ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorActualTorque(void)
  109         {
  110  1              tEnergyRecovery.mcuMotorActualTorque = MCU_MotActuToq * 0.5 - 4000;
  111  1      }
  112         #endif
  113         
  114         
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     12/25/2020 20:36:02 PAGE 3   

  115         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
  116         /***********************************************************************
  117         *  Name        : EnergyRecovery_McuMotorObjTorqueRateOfChange
  118         *  Description : Request mcu motor object torque rate of change
  119         *  Parameter   : None
  120         *  Returns     : None
  121         ***********************************************************************/
  122         ENERGY_RECOVERY_STAT void EnergyRecovery_McuMotorObjTorqueRateOfChange(void)
  123         {
  124  1              INT8U i;
  125  1              ENERGY_RECOVERY_STAT INT16U objTorque[7] = {0u};
  126  1      
  127  1              /* Calculate the change rate of braking torque value of the requested motor. */
  128  1              tEnergyRecovery.mcuMotorObjTorqueRateOfChange = 
  129  1                        7 * abs(tEnergyRecovery.mcuMotorObjTorque - objTorque[0])
  130  1                      + 5 * abs(objTorque[6] - objTorque[1])
  131  1                      + 3 * abs(objTorque[5] - objTorque[2])
  132  1                      +     abs(objTorque[4] - objTorque[3]);
  133  1      
  134  1              for (i=0; i<sizeof(objTorque)-1; i++)
  135  1              {
  136  2                      objTorque[i] = objTorque[i+1];
  137  2              }
  138  1      
  139  1              objTorque[6] = tEnergyRecovery.mcuMotorObjTorque;
  140  1              return;
  141  1      }
  142         #endif
  143         
  144         /***********************************************************************
  145         *  Name        : Booster_BrakeTorqueReduction
  146         *  Description : Judge brake torque reduction value.
  147         *  Parameter   : torque, coef
  148         *  Returns     : tempTorque
  149         ***********************************************************************/
  150         INT16U EnergyRecovery_ObjLocationIncrement(INT16U objLocation, FP32 coef)
  151         {
  152  1              INT16U tempobjLocation = 0;
  153  1      
  154  1              tempobjLocation = objLocation;
  155  1      
  156  1              if (coef > 1)
  157  1              {
  158  2                      coef = 1;
  159  2              }
  160  1              else
  161  1              {
  162  2                      if (coef < 0)
  163  2                      {
  164  3                              coef = 0;
  165  3                      }
  166  2              }
  167  1              
  168  1              tempobjLocation = (INT16U)(tempobjLocation * (1 - coef));
  169  1              return tempobjLocation;
  170  1      }
  171         
  172         /***********************************************************************
  173         *  Name        : Booster_BrakeTorqueReduction
  174         *  Description : Judge brake torque reduction value.
  175         *  Parameter   : torque, coef
  176         *  Returns     : tempTorque
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     12/25/2020 20:36:02 PAGE 4   

  177         ***********************************************************************/
  178         INT16S EnergyRecovery_BrakeTorqueReduction(INT16S torque, FP32 coef)
  179         {
  180  1              INT16S tempTorque;
  181  1      
  182  1              if (torque > MCU_MOTOR_TORQUE_DEFAULT)
  183  1              {
  184  2                      torque = MCU_MOTOR_TORQUE_DEFAULT;
  185  2              }
  186  1              else
  187  1              {
  188  2                      if (torque < MCU_MOTOR_TORQUE_MAX_LIMIT)
  189  2                      {
  190  3                              torque = MCU_MOTOR_TORQUE_MAX_LIMIT;
  191  3                      }
  192  2              }
  193  1      
  194  1              tempTorque = torque;
  195  1      
  196  1              if (coef > 1)
  197  1              {
  198  2                      coef = 1;
  199  2              }
  200  1              else
  201  1              {
  202  2                      if (coef < 0)
  203  2                      {
  204  3                              coef = 0;
  205  3                      }
  206  2              }
  207  1              
  208  1              tempTorque = (INT16S)(tempTorque * coef);
  209  1              return tempTorque;
  210  1      }
  211         
  212         
  213         #if (ENABLE == FUNC_BRAKE_ENERGY_RECOVERY)
  214         /***********************************************************************
  215         *  Name        : EnergyRecovery_CalculateFrictionObjTorque
  216         *  Description : Calculate friction brake object torque.
  217         *  Parameter   : None
  218         *  Returns     : None
  219         ***********************************************************************/
  220         ENERGY_RECOVERY_EXT INT16S EnergyRecovery_CalculateFrictionObjTorque(void)
  221         {
  222  1              INT16S frictionBrakeObjTorque = 0;
  223  1              FP32 rb_target_mot_objtorque = 0;
  224  1              const T_BOOSTER *ptr_booster = Booster_AlogrithmData();
  225  1              
  226  1              ENERGY_RECOVERY_STAT INT16U frictionBrakeObjTorqueIncrement = 0;
  227  1              ENERGY_RECOVERY_STAT INT8U hybridBrakeRelaseCnt = 0;
  228  1              ENERGY_RECOVERY_STAT INT16S mcuMotorObjTorqueRateOfChangeLast = 0;
  229  1      
  230  1              switch (ptr_booster->brakeStatus)
  231  1              {
  232  2                      case STATUS_INIT_BRAKE:
  233  2                              frictionBrakeObjTorque = 0u;
  234  2                              frictionBrakeObjTorqueIncrement = 0;
  235  2                              tEnergyRecovery.mcuMotorObjTorque = 0;                  
  236  2                              break;
  237  2      
  238  2                      case STATUS_FRICTION_BRAKE:
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     12/25/2020 20:36:02 PAGE 5   

  239  2                      case STATUS_TRANSIENT:
  240  2                              /* Judge VCU motor torque facutal value cannot apply brake force requirement. 
  241  2                               * Not request VCU motor torque agian. */
  242  2      #if 0
                                      if (ptr_booster->totalTorqueRequest < tEnergyRecovery.mcuMotorMaxiumTorque)
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
                                              frictionBrakeObjTorque = ptr_booster->totalTorqueRequest - tEnergyRecovery.mcuMotorObjTorque;
                                      }
                                      else
                                      {
                                              tEnergyRecovery.mcuMotorObjTorque = ptr_booster->totalTorqueRequest;
                                              frictionBrakeObjTorque = ptr_booster->totalTorqueRequest - tEnergyRecovery.mcuMotorActualTorque;
                                      }       
              #endif                  
  254  2                              tEnergyRecovery.mcuMotorObjTorque = 0;
  255  2                              break;
  256  2      
  257  2                      case STATUS_HYBRID_BRAKE:
  258  2                              tEnergyRecovery.mcuMotorObjTorque = ptr_booster->totalTorqueRequest - ptr_booster->frictionBrakeObjTorq
             -ue;
  259  2                              /* Judge VCU motor torque capacity value cannot apply brake force requirement. */
  260  2                              if (tEnergyRecovery.mcuMotorObjTorque < tEnergyRecovery.mcuMotorMaxiumTorque)
  261  2                              {
  262  3                                      tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
  263  3                              }
  264  2                              break;
  265  2      
  266  2                      case STATUS_RELASE_HYBRID_BRAKE:
  267  2                              /* Energy recovery brake torque reduction */
  268  2                              tEnergyRecovery.mcuMotorObjTorque = EnergyRecovery_BrakeTorqueReduction(ptr_booster->totalTorqueRequest
             -, ptr_booster->State4coef);
  269  2                          
  270  2                          if (tEnergyRecovery.mcuMotorObjTorque < tEnergyRecovery.mcuMotorMaxiumTorque)
  271  2                              {
  272  3                                      tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
  273  3                              }
  274  2      
  275  2                              frictionBrakeObjTorque = tEnergyRecovery.mcuMotorActualTorque - ptr_booster->totalTorqueRequest;
  276  2                              
  277  2                              if(tEnergyRecovery.mcuMotorObjTorque > tEnergyRecovery.mcuMotorActualTorque)
  278  2                              {
  279  3                                      frictionBrakeObjTorque = frictionBrakeObjTorque + (tEnergyRecovery.mcuMotorObjTorque - tEnergyRecovery
             -.mcuMotorActualTorque) >> 1;
  280  3                              }
  281  2                              
  282  2                              if((tEnergyRecovery.mcuMotorObjTorqueRateOfChange > 300) 
  283  2                                      && (mcuMotorObjTorqueRateOfChangeLast <= 300)
  284  2                                      && (0 == hybridBrakeRelaseCnt))
  285  2                              {
  286  3                                      hybridBrakeRelaseCnt = 80;
  287  3                                      frictionBrakeObjTorqueIncrement = (MCU_MOTOR_TORQUE_DEFAULT - tEnergyRecovery.mcuMotorActualTorque) >>
             - 1;
  288  3                                      
  289  3                              }
  290  2                              else if(hybridBrakeRelaseCnt > 0)
  291  2                              {
  292  3                                      if(hybridBrakeRelaseCnt < 20)
  293  3                                      {
  294  4                                              frictionBrakeObjTorqueIncrement = frictionBrakeObjTorqueIncrement * hybridBrakeRelaseCnt / 20;
  295  4                                      }
  296  3                                      else if(hybridBrakeRelaseCnt > 60)
C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     12/25/2020 20:36:02 PAGE 6   

  297  3                                      {
  298  4                                              frictionBrakeObjTorqueIncrement = frictionBrakeObjTorqueIncrement * (80 - hybridBrakeRelaseCnt) / 20;
  299  4                                      }
  300  3                                      
  301  3                                      frictionBrakeObjTorque = frictionBrakeObjTorque + frictionBrakeObjTorqueIncrement;
  302  3                                      hybridBrakeRelaseCnt--;
  303  3                              }
  304  2                              
  305  2                              mcuMotorObjTorqueRateOfChangeLast = tEnergyRecovery.mcuMotorObjTorqueRateOfChange;
  306  2                              break;
  307  2      
  308  2                      default:
  309  2                              frictionBrakeObjTorque = 0u;    
  310  2                              tEnergyRecovery.mcuMotorObjTorque = 0;                  
  311  2                              break;
  312  2              }
  313  1      
  314  1              /* VCU motor brake torque requirement value limiting range. */
  315  1              if (tEnergyRecovery.mcuMotorObjTorque > 0)
  316  1              {
  317  2                      tEnergyRecovery.mcuMotorObjTorque = 0;
  318  2              }
  319  1              else if (tEnergyRecovery.mcuMotorObjTorque < tEnergyRecovery.mcuMotorMaxiumTorque)
  320  1              {
  321  2                      tEnergyRecovery.mcuMotorObjTorque = tEnergyRecovery.mcuMotorMaxiumTorque;
  322  2              }
  323  1              
  324  1              return frictionBrakeObjTorque;
  325  1      }
  326         #endif
  327         
  328         /***********************************************************************
  329         *  Name        : EnergyRecovery_AlogrithmData
  330         *  Description : Brake energy recovery alogrithm data
  331         *  Parameter   : None
  332         *  Returns     : Brake energy recovery alogrithm data structure access address
  333         ***********************************************************************/
  334          T_ENERGY_RECOVERY* EnergyRecovery_AlogrithmData(void)
  335         {
  336  1              return (&tEnergyRecovery);
  337  1      }
  338         
  339         /* _END_OF_ENERGY_RECOVERY_ */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         890     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           5     --------
  FAR-DATA SIZE    =          22     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          52     --------
END OF MODULE INFORMATION.

C166 COMPILER V7.57.0, ENERGY_RECOVERY                                                     12/25/2020 20:36:02 PAGE 7   


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
